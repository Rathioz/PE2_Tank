
PE2_Tank.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006860  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080069e8  080069e8  000169e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a28  08006a28  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08006a28  08006a28  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006a28  08006a28  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a28  08006a28  00016a28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a2c  08006a2c  00016a2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08006a30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000314  20000014  08006a44  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000328  08006a44  00020328  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eb7c  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f66  00000000  00000000  0002ebc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d90  00000000  00000000  00030b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ca8  00000000  00000000  000318b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001582e  00000000  00000000  00032560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010020  00000000  00000000  00047d8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088975  00000000  00000000  00057dae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e0723  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038bc  00000000  00000000  000e0774  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080069d0 	.word	0x080069d0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	080069d0 	.word	0x080069d0

080001c8 <CSN_Select>:

#define NRF24_CSN_PORT GPIOB
#define NRF24_CSN_PIN  GPIO_PIN_6

void CSN_Select (void) //Makes CSN(active LOW) 0 and selects the device
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
	 HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN,0);
 80001cc:	2200      	movs	r2, #0
 80001ce:	2140      	movs	r1, #64	; 0x40
 80001d0:	4802      	ldr	r0, [pc, #8]	; (80001dc <CSN_Select+0x14>)
 80001d2:	f002 fe35 	bl	8002e40 <HAL_GPIO_WritePin>
}
 80001d6:	bf00      	nop
 80001d8:	bd80      	pop	{r7, pc}
 80001da:	bf00      	nop
 80001dc:	48000400 	.word	0x48000400

080001e0 <CSN_UnSelect>:

void CSN_UnSelect (void)//Makes CSN(active LOW) 1 and unselects the device
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	af00      	add	r7, sp, #0
	 HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN,1);
 80001e4:	2201      	movs	r2, #1
 80001e6:	2140      	movs	r1, #64	; 0x40
 80001e8:	4802      	ldr	r0, [pc, #8]	; (80001f4 <CSN_UnSelect+0x14>)
 80001ea:	f002 fe29 	bl	8002e40 <HAL_GPIO_WritePin>
}
 80001ee:	bf00      	nop
 80001f0:	bd80      	pop	{r7, pc}
 80001f2:	bf00      	nop
 80001f4:	48000400 	.word	0x48000400

080001f8 <CE_Enable>:

void CE_Enable (void) //Makes CE 1 and Enables the device
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	af00      	add	r7, sp, #0
	 HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN,1);
 80001fc:	2201      	movs	r2, #1
 80001fe:	2180      	movs	r1, #128	; 0x80
 8000200:	4802      	ldr	r0, [pc, #8]	; (800020c <CE_Enable+0x14>)
 8000202:	f002 fe1d 	bl	8002e40 <HAL_GPIO_WritePin>
}
 8000206:	bf00      	nop
 8000208:	bd80      	pop	{r7, pc}
 800020a:	bf00      	nop
 800020c:	48000400 	.word	0x48000400

08000210 <CE_Disable>:

void CE_Disable (void) //Makes CE 0 and Disables the device
{
 8000210:	b580      	push	{r7, lr}
 8000212:	af00      	add	r7, sp, #0
	 HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN,0);
 8000214:	2200      	movs	r2, #0
 8000216:	2180      	movs	r1, #128	; 0x80
 8000218:	4802      	ldr	r0, [pc, #8]	; (8000224 <CE_Disable+0x14>)
 800021a:	f002 fe11 	bl	8002e40 <HAL_GPIO_WritePin>
}
 800021e:	bf00      	nop
 8000220:	bd80      	pop	{r7, pc}
 8000222:	bf00      	nop
 8000224:	48000400 	.word	0x48000400

08000228 <nrf24_WriteReg>:

void nrf24_WriteReg (uint8_t Reg, uint8_t Data) // Write 1 byte to the register
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b084      	sub	sp, #16
 800022c:	af00      	add	r7, sp, #0
 800022e:	4603      	mov	r3, r0
 8000230:	460a      	mov	r2, r1
 8000232:	71fb      	strb	r3, [r7, #7]
 8000234:	4613      	mov	r3, r2
 8000236:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2]; // Buffer that stores 2 bytes
	buf[0] = Reg|1<<5; //First Byte is Register address
 8000238:	79fb      	ldrb	r3, [r7, #7]
 800023a:	f043 0320 	orr.w	r3, r3, #32
 800023e:	b2db      	uxtb	r3, r3
 8000240:	733b      	strb	r3, [r7, #12]
	buf[1] = Data; //Second Byte is the Data
 8000242:	79bb      	ldrb	r3, [r7, #6]
 8000244:	737b      	strb	r3, [r7, #13]
	// Select the device
	CSN_Select();
 8000246:	f7ff ffbf 	bl	80001c8 <CSN_Select>

	HAL_SPI_Transmit(NRF24_SPI,buf,2,1000); // Send buffer with size 2
 800024a:	f107 010c 	add.w	r1, r7, #12
 800024e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000252:	2202      	movs	r2, #2
 8000254:	4804      	ldr	r0, [pc, #16]	; (8000268 <nrf24_WriteReg+0x40>)
 8000256:	f004 fa82 	bl	800475e <HAL_SPI_Transmit>

	// Release the device
	CSN_UnSelect();
 800025a:	f7ff ffc1 	bl	80001e0 <CSN_UnSelect>

}
 800025e:	bf00      	nop
 8000260:	3710      	adds	r7, #16
 8000262:	46bd      	mov	sp, r7
 8000264:	bd80      	pop	{r7, pc}
 8000266:	bf00      	nop
 8000268:	20000080 	.word	0x20000080

0800026c <nrf24_WriteRegMulti>:

void nrf24_WriteRegMulti (uint8_t Reg, uint8_t *Data, int size) // Write many bytes starting from a particular register
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b086      	sub	sp, #24
 8000270:	af00      	add	r7, sp, #0
 8000272:	4603      	mov	r3, r0
 8000274:	60b9      	str	r1, [r7, #8]
 8000276:	607a      	str	r2, [r7, #4]
 8000278:	73fb      	strb	r3, [r7, #15]
	uint8_t buf[1]; // Buffer that stores 1 byte
	buf[0] = Reg|1<<5; //Byte is Register address
 800027a:	7bfb      	ldrb	r3, [r7, #15]
 800027c:	f043 0320 	orr.w	r3, r3, #32
 8000280:	b2db      	uxtb	r3, r3
 8000282:	753b      	strb	r3, [r7, #20]

	// Select the device
	CSN_Select();
 8000284:	f7ff ffa0 	bl	80001c8 <CSN_Select>

	HAL_SPI_Transmit(NRF24_SPI,buf,1,100); // Send Register address
 8000288:	f107 0114 	add.w	r1, r7, #20
 800028c:	2364      	movs	r3, #100	; 0x64
 800028e:	2201      	movs	r2, #1
 8000290:	4807      	ldr	r0, [pc, #28]	; (80002b0 <nrf24_WriteRegMulti+0x44>)
 8000292:	f004 fa64 	bl	800475e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF24_SPI,Data,size,100); //Send all data bytes at ones
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	b29a      	uxth	r2, r3
 800029a:	2364      	movs	r3, #100	; 0x64
 800029c:	68b9      	ldr	r1, [r7, #8]
 800029e:	4804      	ldr	r0, [pc, #16]	; (80002b0 <nrf24_WriteRegMulti+0x44>)
 80002a0:	f004 fa5d 	bl	800475e <HAL_SPI_Transmit>

	// Release the device
	CSN_UnSelect();
 80002a4:	f7ff ff9c 	bl	80001e0 <CSN_UnSelect>

}
 80002a8:	bf00      	nop
 80002aa:	3718      	adds	r7, #24
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bd80      	pop	{r7, pc}
 80002b0:	20000080 	.word	0x20000080

080002b4 <nrf24_ReadReg>:

uint8_t nrf24_ReadReg (uint8_t Reg) // Read 1 byte
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b084      	sub	sp, #16
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	4603      	mov	r3, r0
 80002bc:	71fb      	strb	r3, [r7, #7]
	uint8_t data=0; // Variable to store data
 80002be:	2300      	movs	r3, #0
 80002c0:	73fb      	strb	r3, [r7, #15]
	// Select the device
	CSN_Select();
 80002c2:	f7ff ff81 	bl	80001c8 <CSN_Select>

	HAL_SPI_Transmit(NRF24_SPI,&Reg,1,100); // Send register address where we want to read data from
 80002c6:	1df9      	adds	r1, r7, #7
 80002c8:	2364      	movs	r3, #100	; 0x64
 80002ca:	2201      	movs	r2, #1
 80002cc:	4808      	ldr	r0, [pc, #32]	; (80002f0 <nrf24_ReadReg+0x3c>)
 80002ce:	f004 fa46 	bl	800475e <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI,&data,1,100); // Read 1 byte from register
 80002d2:	f107 010f 	add.w	r1, r7, #15
 80002d6:	2364      	movs	r3, #100	; 0x64
 80002d8:	2201      	movs	r2, #1
 80002da:	4805      	ldr	r0, [pc, #20]	; (80002f0 <nrf24_ReadReg+0x3c>)
 80002dc:	f004 fbb4 	bl	8004a48 <HAL_SPI_Receive>

	// Release the device
	CSN_UnSelect();
 80002e0:	f7ff ff7e 	bl	80001e0 <CSN_UnSelect>

	return data;
 80002e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80002e6:	4618      	mov	r0, r3
 80002e8:	3710      	adds	r7, #16
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bd80      	pop	{r7, pc}
 80002ee:	bf00      	nop
 80002f0:	20000080 	.word	0x20000080

080002f4 <nrfsendCmd>:
	CSN_UnSelect();
}

//Send command to the NRF24
void nrfsendCmd(uint8_t cmd)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b082      	sub	sp, #8
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	4603      	mov	r3, r0
 80002fc:	71fb      	strb	r3, [r7, #7]
	// Select the device
	CSN_Select();
 80002fe:	f7ff ff63 	bl	80001c8 <CSN_Select>

	HAL_SPI_Transmit(NRF24_SPI,&cmd,1,100);
 8000302:	1df9      	adds	r1, r7, #7
 8000304:	2364      	movs	r3, #100	; 0x64
 8000306:	2201      	movs	r2, #1
 8000308:	4804      	ldr	r0, [pc, #16]	; (800031c <nrfsendCmd+0x28>)
 800030a:	f004 fa28 	bl	800475e <HAL_SPI_Transmit>

	// Release the device
	CSN_UnSelect();
 800030e:	f7ff ff67 	bl	80001e0 <CSN_UnSelect>
}
 8000312:	bf00      	nop
 8000314:	3708      	adds	r7, #8
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	20000080 	.word	0x20000080

08000320 <nrf24_reset>:

void nrf24_reset(uint8_t REG)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b088      	sub	sp, #32
 8000324:	af00      	add	r7, sp, #0
 8000326:	4603      	mov	r3, r0
 8000328:	71fb      	strb	r3, [r7, #7]
	if (REG == STATUS)
 800032a:	79fb      	ldrb	r3, [r7, #7]
 800032c:	2b07      	cmp	r3, #7
 800032e:	d104      	bne.n	800033a <nrf24_reset+0x1a>
	{
		nrf24_WriteReg(STATUS, 0x00);
 8000330:	2100      	movs	r1, #0
 8000332:	2007      	movs	r0, #7
 8000334:	f7ff ff78 	bl	8000228 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
	nrf24_WriteReg(FIFO_STATUS, 0x11);
	nrf24_WriteReg(DYNPD, 0);
	nrf24_WriteReg(FEATURE, 0);
	}
}
 8000338:	e090      	b.n	800045c <nrf24_reset+0x13c>
	else if (REG == FIFO_STATUS)
 800033a:	79fb      	ldrb	r3, [r7, #7]
 800033c:	2b17      	cmp	r3, #23
 800033e:	d104      	bne.n	800034a <nrf24_reset+0x2a>
		nrf24_WriteReg(FIFO_STATUS, 0x11);
 8000340:	2111      	movs	r1, #17
 8000342:	2017      	movs	r0, #23
 8000344:	f7ff ff70 	bl	8000228 <nrf24_WriteReg>
}
 8000348:	e088      	b.n	800045c <nrf24_reset+0x13c>
	nrf24_WriteReg(CONFIG, 0x08);
 800034a:	2108      	movs	r1, #8
 800034c:	2000      	movs	r0, #0
 800034e:	f7ff ff6b 	bl	8000228 <nrf24_WriteReg>
	nrf24_WriteReg(EN_AA, 0x3F);
 8000352:	213f      	movs	r1, #63	; 0x3f
 8000354:	2001      	movs	r0, #1
 8000356:	f7ff ff67 	bl	8000228 <nrf24_WriteReg>
	nrf24_WriteReg(EN_RXADDR, 0x03);
 800035a:	2103      	movs	r1, #3
 800035c:	2002      	movs	r0, #2
 800035e:	f7ff ff63 	bl	8000228 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_AW, 0x03);
 8000362:	2103      	movs	r1, #3
 8000364:	2003      	movs	r0, #3
 8000366:	f7ff ff5f 	bl	8000228 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_RETR, 0x03);
 800036a:	2103      	movs	r1, #3
 800036c:	2004      	movs	r0, #4
 800036e:	f7ff ff5b 	bl	8000228 <nrf24_WriteReg>
	nrf24_WriteReg(RF_CH, 0x02);
 8000372:	2102      	movs	r1, #2
 8000374:	2005      	movs	r0, #5
 8000376:	f7ff ff57 	bl	8000228 <nrf24_WriteReg>
	nrf24_WriteReg(RF_SETUP, 0x0E);
 800037a:	210e      	movs	r1, #14
 800037c:	2006      	movs	r0, #6
 800037e:	f7ff ff53 	bl	8000228 <nrf24_WriteReg>
	nrf24_WriteReg(STATUS, 0x00);
 8000382:	2100      	movs	r1, #0
 8000384:	2007      	movs	r0, #7
 8000386:	f7ff ff4f 	bl	8000228 <nrf24_WriteReg>
	nrf24_WriteReg(OBSERVE_TX, 0x00);
 800038a:	2100      	movs	r1, #0
 800038c:	2008      	movs	r0, #8
 800038e:	f7ff ff4b 	bl	8000228 <nrf24_WriteReg>
	nrf24_WriteReg(CD, 0x00);
 8000392:	2100      	movs	r1, #0
 8000394:	2009      	movs	r0, #9
 8000396:	f7ff ff47 	bl	8000228 <nrf24_WriteReg>
	uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 800039a:	4a32      	ldr	r2, [pc, #200]	; (8000464 <nrf24_reset+0x144>)
 800039c:	f107 0318 	add.w	r3, r7, #24
 80003a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80003a4:	6018      	str	r0, [r3, #0]
 80003a6:	3304      	adds	r3, #4
 80003a8:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P0, rx_addr_p0_def, 5);
 80003aa:	f107 0318 	add.w	r3, r7, #24
 80003ae:	2205      	movs	r2, #5
 80003b0:	4619      	mov	r1, r3
 80003b2:	200a      	movs	r0, #10
 80003b4:	f7ff ff5a 	bl	800026c <nrf24_WriteRegMulti>
	uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 80003b8:	4a2b      	ldr	r2, [pc, #172]	; (8000468 <nrf24_reset+0x148>)
 80003ba:	f107 0310 	add.w	r3, r7, #16
 80003be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80003c2:	6018      	str	r0, [r3, #0]
 80003c4:	3304      	adds	r3, #4
 80003c6:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(RX_ADDR_P1, rx_addr_p1_def, 5);
 80003c8:	f107 0310 	add.w	r3, r7, #16
 80003cc:	2205      	movs	r2, #5
 80003ce:	4619      	mov	r1, r3
 80003d0:	200b      	movs	r0, #11
 80003d2:	f7ff ff4b 	bl	800026c <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xC3);
 80003d6:	21c3      	movs	r1, #195	; 0xc3
 80003d8:	200c      	movs	r0, #12
 80003da:	f7ff ff25 	bl	8000228 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P3, 0xC4);
 80003de:	21c4      	movs	r1, #196	; 0xc4
 80003e0:	200d      	movs	r0, #13
 80003e2:	f7ff ff21 	bl	8000228 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P4, 0xC5);
 80003e6:	21c5      	movs	r1, #197	; 0xc5
 80003e8:	200e      	movs	r0, #14
 80003ea:	f7ff ff1d 	bl	8000228 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P5, 0xC6);
 80003ee:	21c6      	movs	r1, #198	; 0xc6
 80003f0:	200f      	movs	r0, #15
 80003f2:	f7ff ff19 	bl	8000228 <nrf24_WriteReg>
	uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 80003f6:	4a1b      	ldr	r2, [pc, #108]	; (8000464 <nrf24_reset+0x144>)
 80003f8:	f107 0308 	add.w	r3, r7, #8
 80003fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000400:	6018      	str	r0, [r3, #0]
 8000402:	3304      	adds	r3, #4
 8000404:	7019      	strb	r1, [r3, #0]
	nrf24_WriteRegMulti(TX_ADDR, tx_addr_def, 5);
 8000406:	f107 0308 	add.w	r3, r7, #8
 800040a:	2205      	movs	r2, #5
 800040c:	4619      	mov	r1, r3
 800040e:	2010      	movs	r0, #16
 8000410:	f7ff ff2c 	bl	800026c <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_PW_P0, 0);
 8000414:	2100      	movs	r1, #0
 8000416:	2011      	movs	r0, #17
 8000418:	f7ff ff06 	bl	8000228 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P1, 0);
 800041c:	2100      	movs	r1, #0
 800041e:	2012      	movs	r0, #18
 8000420:	f7ff ff02 	bl	8000228 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P2, 0);
 8000424:	2100      	movs	r1, #0
 8000426:	2013      	movs	r0, #19
 8000428:	f7ff fefe 	bl	8000228 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P3, 0);
 800042c:	2100      	movs	r1, #0
 800042e:	2014      	movs	r0, #20
 8000430:	f7ff fefa 	bl	8000228 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P4, 0);
 8000434:	2100      	movs	r1, #0
 8000436:	2015      	movs	r0, #21
 8000438:	f7ff fef6 	bl	8000228 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
 800043c:	2100      	movs	r1, #0
 800043e:	2016      	movs	r0, #22
 8000440:	f7ff fef2 	bl	8000228 <nrf24_WriteReg>
	nrf24_WriteReg(FIFO_STATUS, 0x11);
 8000444:	2111      	movs	r1, #17
 8000446:	2017      	movs	r0, #23
 8000448:	f7ff feee 	bl	8000228 <nrf24_WriteReg>
	nrf24_WriteReg(DYNPD, 0);
 800044c:	2100      	movs	r1, #0
 800044e:	201c      	movs	r0, #28
 8000450:	f7ff feea 	bl	8000228 <nrf24_WriteReg>
	nrf24_WriteReg(FEATURE, 0);
 8000454:	2100      	movs	r1, #0
 8000456:	201d      	movs	r0, #29
 8000458:	f7ff fee6 	bl	8000228 <nrf24_WriteReg>
}
 800045c:	bf00      	nop
 800045e:	3720      	adds	r7, #32
 8000460:	46bd      	mov	sp, r7
 8000462:	bd80      	pop	{r7, pc}
 8000464:	080069e8 	.word	0x080069e8
 8000468:	080069f0 	.word	0x080069f0

0800046c <NRF24_Init>:

void NRF24_Init (void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0
	//Disable chip before config
	CE_Disable();
 8000470:	f7ff fece 	bl	8000210 <CE_Disable>


	nrf24_reset(0);
 8000474:	2000      	movs	r0, #0
 8000476:	f7ff ff53 	bl	8000320 <nrf24_reset>

	nrf24_WriteReg(CONFIG,0); // Will be configured later
 800047a:	2100      	movs	r1, #0
 800047c:	2000      	movs	r0, #0
 800047e:	f7ff fed3 	bl	8000228 <nrf24_WriteReg>

	nrf24_WriteReg(EN_AA,0); // No Auto Ack
 8000482:	2100      	movs	r1, #0
 8000484:	2001      	movs	r0, #1
 8000486:	f7ff fecf 	bl	8000228 <nrf24_WriteReg>

	nrf24_WriteReg(EN_RXADDR,0); // Not enabling any data pipe right now
 800048a:	2100      	movs	r1, #0
 800048c:	2002      	movs	r0, #2
 800048e:	f7ff fecb 	bl	8000228 <nrf24_WriteReg>

	nrf24_WriteReg(SETUP_AW,0x03); // 5 bytes for the TX/RX address
 8000492:	2103      	movs	r1, #3
 8000494:	2003      	movs	r0, #3
 8000496:	f7ff fec7 	bl	8000228 <nrf24_WriteReg>

	nrf24_WriteReg(SETUP_RETR,0); // No retransmision (no shockburst)
 800049a:	2100      	movs	r1, #0
 800049c:	2004      	movs	r0, #4
 800049e:	f7ff fec3 	bl	8000228 <nrf24_WriteReg>

	nrf24_WriteReg(RF_CH,0); // setup during Tx or Rx
 80004a2:	2100      	movs	r1, #0
 80004a4:	2005      	movs	r0, #5
 80004a6:	f7ff febf 	bl	8000228 <nrf24_WriteReg>

	nrf24_WriteReg(RF_SETUP,0x0E); // Power = 0db, Data Rate = 2Mbps
 80004aa:	210e      	movs	r1, #14
 80004ac:	2006      	movs	r0, #6
 80004ae:	f7ff febb 	bl	8000228 <nrf24_WriteReg>

	//Disable chip before config
	CE_Enable();
 80004b2:	f7ff fea1 	bl	80001f8 <CE_Enable>
}
 80004b6:	bf00      	nop
 80004b8:	bd80      	pop	{r7, pc}

080004ba <NRF24_RXMode>:

	return 0;
}

void NRF24_RXMode(uint8_t *address,uint8_t channel)
{
 80004ba:	b580      	push	{r7, lr}
 80004bc:	b084      	sub	sp, #16
 80004be:	af00      	add	r7, sp, #0
 80004c0:	6078      	str	r0, [r7, #4]
 80004c2:	460b      	mov	r3, r1
 80004c4:	70fb      	strb	r3, [r7, #3]
	//Disable chip before config
	CE_Disable();
 80004c6:	f7ff fea3 	bl	8000210 <CE_Disable>

	nrf24_WriteReg(RF_CH,channel); // Select the channel
 80004ca:	78fb      	ldrb	r3, [r7, #3]
 80004cc:	4619      	mov	r1, r3
 80004ce:	2005      	movs	r0, #5
 80004d0:	f7ff feaa 	bl	8000228 <nrf24_WriteReg>

	uint8_t en_rxaddr = nrf24_ReadReg(EN_RXADDR);
 80004d4:	2002      	movs	r0, #2
 80004d6:	f7ff feed 	bl	80002b4 <nrf24_ReadReg>
 80004da:	4603      	mov	r3, r0
 80004dc:	73fb      	strb	r3, [r7, #15]
	en_rxaddr = en_rxaddr|(1<<1); // first make sure no other pipes get disabled.
 80004de:	7bfb      	ldrb	r3, [r7, #15]
 80004e0:	f043 0302 	orr.w	r3, r3, #2
 80004e4:	73fb      	strb	r3, [r7, #15]
	nrf24_WriteReg(EN_RXADDR,en_rxaddr); // select data pipe 1
 80004e6:	7bfb      	ldrb	r3, [r7, #15]
 80004e8:	4619      	mov	r1, r3
 80004ea:	2002      	movs	r0, #2
 80004ec:	f7ff fe9c 	bl	8000228 <nrf24_WriteReg>
	nrf24_WriteRegMulti(RX_ADDR_P1,address,5); // 5 byte address for data pipe1
 80004f0:	2205      	movs	r2, #5
 80004f2:	6879      	ldr	r1, [r7, #4]
 80004f4:	200b      	movs	r0, #11
 80004f6:	f7ff feb9 	bl	800026c <nrf24_WriteRegMulti>

	nrf24_WriteReg(RX_PW_P1,32); // 32 byte payload size for pipe1
 80004fa:	2120      	movs	r1, #32
 80004fc:	2012      	movs	r0, #18
 80004fe:	f7ff fe93 	bl	8000228 <nrf24_WriteReg>

	//Power up device without changing other bits of register
	uint8_t config = nrf24_ReadReg(CONFIG);
 8000502:	2000      	movs	r0, #0
 8000504:	f7ff fed6 	bl	80002b4 <nrf24_ReadReg>
 8000508:	4603      	mov	r3, r0
 800050a:	73bb      	strb	r3, [r7, #14]
	config = config|(1<<1) | (1<<0);
 800050c:	7bbb      	ldrb	r3, [r7, #14]
 800050e:	f043 0303 	orr.w	r3, r3, #3
 8000512:	73bb      	strb	r3, [r7, #14]
	nrf24_WriteReg(CONFIG,config);
 8000514:	7bbb      	ldrb	r3, [r7, #14]
 8000516:	4619      	mov	r1, r3
 8000518:	2000      	movs	r0, #0
 800051a:	f7ff fe85 	bl	8000228 <nrf24_WriteReg>

	//Disable chip before config
	CE_Enable();
 800051e:	f7ff fe6b 	bl	80001f8 <CE_Enable>
}
 8000522:	bf00      	nop
 8000524:	3710      	adds	r7, #16
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}

0800052a <isDataAvailable>:

uint8_t isDataAvailable(int pipenum)
{
 800052a:	b580      	push	{r7, lr}
 800052c:	b084      	sub	sp, #16
 800052e:	af00      	add	r7, sp, #0
 8000530:	6078      	str	r0, [r7, #4]
	uint8_t status = nrf24_ReadReg(STATUS);
 8000532:	2007      	movs	r0, #7
 8000534:	f7ff febe 	bl	80002b4 <nrf24_ReadReg>
 8000538:	4603      	mov	r3, r0
 800053a:	73fb      	strb	r3, [r7, #15]

	if ((status&(1<<6))&&(status&(pipenum<<1)))
 800053c:	7bfb      	ldrb	r3, [r7, #15]
 800053e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000542:	2b00      	cmp	r3, #0
 8000544:	d00b      	beq.n	800055e <isDataAvailable+0x34>
 8000546:	7bfa      	ldrb	r2, [r7, #15]
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	005b      	lsls	r3, r3, #1
 800054c:	4013      	ands	r3, r2
 800054e:	2b00      	cmp	r3, #0
 8000550:	d005      	beq.n	800055e <isDataAvailable+0x34>
	{
		nrf24_WriteReg(STATUS,(1<<6));
 8000552:	2140      	movs	r1, #64	; 0x40
 8000554:	2007      	movs	r0, #7
 8000556:	f7ff fe67 	bl	8000228 <nrf24_WriteReg>
		return 1;
 800055a:	2301      	movs	r3, #1
 800055c:	e000      	b.n	8000560 <isDataAvailable+0x36>
	}
	return 0;
 800055e:	2300      	movs	r3, #0
}
 8000560:	4618      	mov	r0, r3
 8000562:	3710      	adds	r7, #16
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}

08000568 <NRF24_Receive>:

void NRF24_Receive (uint8_t *data)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b084      	sub	sp, #16
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
	uint8_t cmdtosend = 0;
 8000570:	2300      	movs	r3, #0
 8000572:	73fb      	strb	r3, [r7, #15]

	// Select the device
	CSN_Select();
 8000574:	f7ff fe28 	bl	80001c8 <CSN_Select>

	//Payload command
	cmdtosend = R_RX_PAYLOAD;
 8000578:	2361      	movs	r3, #97	; 0x61
 800057a:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(NRF24_SPI,&cmdtosend,1,100);
 800057c:	f107 010f 	add.w	r1, r7, #15
 8000580:	2364      	movs	r3, #100	; 0x64
 8000582:	2201      	movs	r2, #1
 8000584:	480c      	ldr	r0, [pc, #48]	; (80005b8 <NRF24_Receive+0x50>)
 8000586:	f004 f8ea 	bl	800475e <HAL_SPI_Transmit>

	// send the payload
	HAL_SPI_Receive(NRF24_SPI,data,19,1000);
 800058a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800058e:	2213      	movs	r2, #19
 8000590:	6879      	ldr	r1, [r7, #4]
 8000592:	4809      	ldr	r0, [pc, #36]	; (80005b8 <NRF24_Receive+0x50>)
 8000594:	f004 fa58 	bl	8004a48 <HAL_SPI_Receive>

	// Select the device
	CSN_UnSelect();
 8000598:	f7ff fe22 	bl	80001e0 <CSN_UnSelect>

	HAL_Delay(1);
 800059c:	2001      	movs	r0, #1
 800059e:	f001 fb67 	bl	8001c70 <HAL_Delay>

	cmdtosend = FLUSH_RX;
 80005a2:	23e2      	movs	r3, #226	; 0xe2
 80005a4:	73fb      	strb	r3, [r7, #15]
	nrfsendCmd(cmdtosend);
 80005a6:	7bfb      	ldrb	r3, [r7, #15]
 80005a8:	4618      	mov	r0, r3
 80005aa:	f7ff fea3 	bl	80002f4 <nrfsendCmd>
}
 80005ae:	bf00      	nop
 80005b0:	3710      	adds	r7, #16
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	20000080 	.word	0x20000080

080005bc <processData>:
////////////////////                            OR 0000 1011 0000 0000
////////////////////                             = 0000 1011 0100 1100 = 12 bit waarde
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void processData(void){
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
	NRF24_Receive(RxData); // Ontvang data
 80005c2:	4815      	ldr	r0, [pc, #84]	; (8000618 <processData+0x5c>)
 80005c4:	f7ff ffd0 	bl	8000568 <NRF24_Receive>
	for (int i = 0, j = 0; i < 9; i++, j += 2) {
 80005c8:	2300      	movs	r3, #0
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	2300      	movs	r3, #0
 80005ce:	603b      	str	r3, [r7, #0]
 80005d0:	e015      	b.n	80005fe <processData+0x42>
		ADC_Values[i] = (RxData[j] | (RxData[j+1] << 8));  // Combineert 2 ontvangen data bytes naar een 12 bit value.
 80005d2:	4a11      	ldr	r2, [pc, #68]	; (8000618 <processData+0x5c>)
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	4413      	add	r3, r2
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	4619      	mov	r1, r3
 80005dc:	683b      	ldr	r3, [r7, #0]
 80005de:	3301      	adds	r3, #1
 80005e0:	4a0d      	ldr	r2, [pc, #52]	; (8000618 <processData+0x5c>)
 80005e2:	5cd3      	ldrb	r3, [r2, r3]
 80005e4:	021b      	lsls	r3, r3, #8
 80005e6:	430b      	orrs	r3, r1
 80005e8:	4619      	mov	r1, r3
 80005ea:	4a0c      	ldr	r2, [pc, #48]	; (800061c <processData+0x60>)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0, j = 0; i < 9; i++, j += 2) {
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	3301      	adds	r3, #1
 80005f6:	607b      	str	r3, [r7, #4]
 80005f8:	683b      	ldr	r3, [r7, #0]
 80005fa:	3302      	adds	r3, #2
 80005fc:	603b      	str	r3, [r7, #0]
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	2b08      	cmp	r3, #8
 8000602:	dde6      	ble.n	80005d2 <processData+0x16>
	}
	buttonStates = RxData[18]; // Haalt de status van de knoppen uit de ontvangen data
 8000604:	4b04      	ldr	r3, [pc, #16]	; (8000618 <processData+0x5c>)
 8000606:	7c9a      	ldrb	r2, [r3, #18]
 8000608:	4b05      	ldr	r3, [pc, #20]	; (8000620 <processData+0x64>)
 800060a:	701a      	strb	r2, [r3, #0]
	adjustDutyCycle(); // Roept de functie op voor het toepassen van de nieuwe waardes
 800060c:	f000 f80a 	bl	8000624 <adjustDutyCycle>
}
 8000610:	bf00      	nop
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	200001c8 	.word	0x200001c8
 800061c:	200001dc 	.word	0x200001dc
 8000620:	20000200 	.word	0x20000200

08000624 <adjustDutyCycle>:
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////// adjustDutyCycle gebruikt de ontvangen waardes om de duyclyes van de motoren aan te passen
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void adjustDutyCycle(void) {
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
	///////////////////////////////////////////////////////
	//////////////////// DC Motor 1 ///////////////////////
	///////////////////////////////////////////////////////
	if (ADC_Values[0] < 4096){ // zorgt ervoor dat foutieve waardes boven 4096 genegeert worden
 8000628:	4b72      	ldr	r3, [pc, #456]	; (80007f4 <adjustDutyCycle+0x1d0>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000630:	d277      	bcs.n	8000722 <adjustDutyCycle+0xfe>
		if (ADC_Values[0] < DEAD_ZONE_LOW) { // Als de ADC waarde onder de threshold ligt gaat de motor achteruit.
 8000632:	4b70      	ldr	r3, [pc, #448]	; (80007f4 <adjustDutyCycle+0x1d0>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 800063a:	d22a      	bcs.n	8000692 <adjustDutyCycle+0x6e>
			lowCountM1 += 1;
 800063c:	4b6e      	ldr	r3, [pc, #440]	; (80007f8 <adjustDutyCycle+0x1d4>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	3301      	adds	r3, #1
 8000642:	4a6d      	ldr	r2, [pc, #436]	; (80007f8 <adjustDutyCycle+0x1d4>)
 8000644:	6013      	str	r3, [r2, #0]
			highCountM1 = 0;
 8000646:	4b6d      	ldr	r3, [pc, #436]	; (80007fc <adjustDutyCycle+0x1d8>)
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
			if(lowCountM1 >= NOJITTER) // Als de waarde 3 keer onder de threshold ligt dan weten we dat het geen jitter is.
 800064c:	4b6a      	ldr	r3, [pc, #424]	; (80007f8 <adjustDutyCycle+0x1d4>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	2b02      	cmp	r3, #2
 8000652:	dd56      	ble.n	8000702 <adjustDutyCycle+0xde>
			{
				lowCountM1 = 0;
 8000654:	4b68      	ldr	r3, [pc, #416]	; (80007f8 <adjustDutyCycle+0x1d4>)
 8000656:	2200      	movs	r2, #0
 8000658:	601a      	str	r2, [r3, #0]
				dutyCycle_CH3 = (DEAD_ZONE_LOW - ADC_Values[0]) * 100 / (DEAD_ZONE_LOW - 500); // berekent de dutycycle voor een waarde onder de threshold
 800065a:	4b66      	ldr	r3, [pc, #408]	; (80007f4 <adjustDutyCycle+0x1d0>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8000662:	fb02 f303 	mul.w	r3, r2, r3
 8000666:	f503 332f 	add.w	r3, r3, #179200	; 0x2bc00
 800066a:	f503 7348 	add.w	r3, r3, #800	; 0x320
 800066e:	4a64      	ldr	r2, [pc, #400]	; (8000800 <adjustDutyCycle+0x1dc>)
 8000670:	fba2 2303 	umull	r2, r3, r2, r3
 8000674:	0a9b      	lsrs	r3, r3, #10
 8000676:	b2da      	uxtb	r2, r3
 8000678:	4b62      	ldr	r3, [pc, #392]	; (8000804 <adjustDutyCycle+0x1e0>)
 800067a:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2,0); //Configureert IN21
 800067c:	2200      	movs	r2, #0
 800067e:	2104      	movs	r1, #4
 8000680:	4861      	ldr	r0, [pc, #388]	; (8000808 <adjustDutyCycle+0x1e4>)
 8000682:	f002 fbdd 	bl	8002e40 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,1); //Configureert IN11
 8000686:	2201      	movs	r2, #1
 8000688:	2101      	movs	r1, #1
 800068a:	485f      	ldr	r0, [pc, #380]	; (8000808 <adjustDutyCycle+0x1e4>)
 800068c:	f002 fbd8 	bl	8002e40 <HAL_GPIO_WritePin>
 8000690:	e037      	b.n	8000702 <adjustDutyCycle+0xde>
			}
		}
		else if (ADC_Values[0] > DEAD_ZONE_HIGH) { // Als de ADC waarde boven de threshold ligt gaat de motor vooruit.
 8000692:	4b58      	ldr	r3, [pc, #352]	; (80007f4 <adjustDutyCycle+0x1d0>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 800069a:	d929      	bls.n	80006f0 <adjustDutyCycle+0xcc>
			highCountM1 += 1;
 800069c:	4b57      	ldr	r3, [pc, #348]	; (80007fc <adjustDutyCycle+0x1d8>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	3301      	adds	r3, #1
 80006a2:	4a56      	ldr	r2, [pc, #344]	; (80007fc <adjustDutyCycle+0x1d8>)
 80006a4:	6013      	str	r3, [r2, #0]
			lowCountM1 = 0;
 80006a6:	4b54      	ldr	r3, [pc, #336]	; (80007f8 <adjustDutyCycle+0x1d4>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
			if(highCountM1 >= NOJITTER) // Als de waarde 3 keer onder de threshold ligt dan weten we dat het geen jitter is.
 80006ac:	4b53      	ldr	r3, [pc, #332]	; (80007fc <adjustDutyCycle+0x1d8>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	2b02      	cmp	r3, #2
 80006b2:	dd26      	ble.n	8000702 <adjustDutyCycle+0xde>
			{
				highCountM1 = 0;
 80006b4:	4b51      	ldr	r3, [pc, #324]	; (80007fc <adjustDutyCycle+0x1d8>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
				dutyCycle_CH3 = (ADC_Values[0] - DEAD_ZONE_HIGH) * 100 / (3550 - DEAD_ZONE_HIGH); // berekent de dutycycle voor een waarde boven de threshold
 80006ba:	4b4e      	ldr	r3, [pc, #312]	; (80007f4 <adjustDutyCycle+0x1d0>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	2264      	movs	r2, #100	; 0x64
 80006c0:	fb02 f303 	mul.w	r3, r2, r3
 80006c4:	f5a3 336a 	sub.w	r3, r3, #239616	; 0x3a800
 80006c8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80006cc:	4a4f      	ldr	r2, [pc, #316]	; (800080c <adjustDutyCycle+0x1e8>)
 80006ce:	fba2 2303 	umull	r2, r3, r2, r3
 80006d2:	0a9b      	lsrs	r3, r3, #10
 80006d4:	b2da      	uxtb	r2, r3
 80006d6:	4b4b      	ldr	r3, [pc, #300]	; (8000804 <adjustDutyCycle+0x1e0>)
 80006d8:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,0); //Configureert IN11
 80006da:	2200      	movs	r2, #0
 80006dc:	2101      	movs	r1, #1
 80006de:	484a      	ldr	r0, [pc, #296]	; (8000808 <adjustDutyCycle+0x1e4>)
 80006e0:	f002 fbae 	bl	8002e40 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2,1); //Configureert IN21
 80006e4:	2201      	movs	r2, #1
 80006e6:	2104      	movs	r1, #4
 80006e8:	4847      	ldr	r0, [pc, #284]	; (8000808 <adjustDutyCycle+0x1e4>)
 80006ea:	f002 fba9 	bl	8002e40 <HAL_GPIO_WritePin>
 80006ee:	e008      	b.n	8000702 <adjustDutyCycle+0xde>
			}
		}
		else {
			highCountM1 = 0;
 80006f0:	4b42      	ldr	r3, [pc, #264]	; (80007fc <adjustDutyCycle+0x1d8>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
			lowCountM1 = 0;
 80006f6:	4b40      	ldr	r3, [pc, #256]	; (80007f8 <adjustDutyCycle+0x1d4>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
			dutyCycle_CH3 = 0; // Motor stops in dead zone
 80006fc:	4b41      	ldr	r3, [pc, #260]	; (8000804 <adjustDutyCycle+0x1e0>)
 80006fe:	2200      	movs	r2, #0
 8000700:	701a      	strb	r2, [r3, #0]
		}
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, (2999 * dutyCycle_CH3) / 100); //Gebruikt de nieuwe duty cycle en laat de motor draaien.
 8000702:	4b40      	ldr	r3, [pc, #256]	; (8000804 <adjustDutyCycle+0x1e0>)
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	461a      	mov	r2, r3
 8000708:	f640 33b7 	movw	r3, #2999	; 0xbb7
 800070c:	fb02 f303 	mul.w	r3, r2, r3
 8000710:	4a3f      	ldr	r2, [pc, #252]	; (8000810 <adjustDutyCycle+0x1ec>)
 8000712:	fb82 1203 	smull	r1, r2, r2, r3
 8000716:	1152      	asrs	r2, r2, #5
 8000718:	17db      	asrs	r3, r3, #31
 800071a:	1ad2      	subs	r2, r2, r3
 800071c:	4b3d      	ldr	r3, [pc, #244]	; (8000814 <adjustDutyCycle+0x1f0>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	635a      	str	r2, [r3, #52]	; 0x34
	///////////////////////////////////////////////////////

	///////////////////////////////////////////////////////
	//////////////////// DC Motor 2 ///////////////////////
	///////////////////////////////////////////////////////
	if (ADC_Values[7] < 4096){ // zorgt ervoor dat foutieve waardes boven 4096 genegeert worden
 8000722:	4b34      	ldr	r3, [pc, #208]	; (80007f4 <adjustDutyCycle+0x1d0>)
 8000724:	69db      	ldr	r3, [r3, #28]
 8000726:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800072a:	f080 8094 	bcs.w	8000856 <adjustDutyCycle+0x232>
		if (ADC_Values[7] < DEAD_ZONE_LOW) { // Als de ADC waarde onder de threshold ligt gaat de motor achteruit.
 800072e:	4b31      	ldr	r3, [pc, #196]	; (80007f4 <adjustDutyCycle+0x1d0>)
 8000730:	69db      	ldr	r3, [r3, #28]
 8000732:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8000736:	d22c      	bcs.n	8000792 <adjustDutyCycle+0x16e>
			lowCountM2 += 1;
 8000738:	4b37      	ldr	r3, [pc, #220]	; (8000818 <adjustDutyCycle+0x1f4>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	3301      	adds	r3, #1
 800073e:	4a36      	ldr	r2, [pc, #216]	; (8000818 <adjustDutyCycle+0x1f4>)
 8000740:	6013      	str	r3, [r2, #0]
			highCountM2 = 0;
 8000742:	4b36      	ldr	r3, [pc, #216]	; (800081c <adjustDutyCycle+0x1f8>)
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
			if(lowCountM2 >= NOJITTER) // Als de waarde 3 keer onder de threshold ligt dan weten we dat het geen jitter is.
 8000748:	4b33      	ldr	r3, [pc, #204]	; (8000818 <adjustDutyCycle+0x1f4>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	2b02      	cmp	r3, #2
 800074e:	dd72      	ble.n	8000836 <adjustDutyCycle+0x212>
			{
				lowCountM2 = 0;
 8000750:	4b31      	ldr	r3, [pc, #196]	; (8000818 <adjustDutyCycle+0x1f4>)
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
				dutyCycle_CH4 = (DEAD_ZONE_LOW - ADC_Values[7]) * 100 / (DEAD_ZONE_LOW - 500); // berekent de dutycycle voor een waarde onder de threshold
 8000756:	4b27      	ldr	r3, [pc, #156]	; (80007f4 <adjustDutyCycle+0x1d0>)
 8000758:	69db      	ldr	r3, [r3, #28]
 800075a:	f06f 0263 	mvn.w	r2, #99	; 0x63
 800075e:	fb02 f303 	mul.w	r3, r2, r3
 8000762:	f503 332f 	add.w	r3, r3, #179200	; 0x2bc00
 8000766:	f503 7348 	add.w	r3, r3, #800	; 0x320
 800076a:	4a25      	ldr	r2, [pc, #148]	; (8000800 <adjustDutyCycle+0x1dc>)
 800076c:	fba2 2303 	umull	r2, r3, r2, r3
 8000770:	0a9b      	lsrs	r3, r3, #10
 8000772:	b2da      	uxtb	r2, r3
 8000774:	4b2a      	ldr	r3, [pc, #168]	; (8000820 <adjustDutyCycle+0x1fc>)
 8000776:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4,0); //Configureert IN10
 8000778:	2200      	movs	r2, #0
 800077a:	2110      	movs	r1, #16
 800077c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000780:	f002 fb5e 	bl	8002e40 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6,1); //Configureert IN20
 8000784:	2201      	movs	r2, #1
 8000786:	2140      	movs	r1, #64	; 0x40
 8000788:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800078c:	f002 fb58 	bl	8002e40 <HAL_GPIO_WritePin>
 8000790:	e051      	b.n	8000836 <adjustDutyCycle+0x212>
			}
		}
		else if (ADC_Values[7] > DEAD_ZONE_HIGH) { // Als de ADC waarde boven de threshold ligt gaat de motor vooruit.
 8000792:	4b18      	ldr	r3, [pc, #96]	; (80007f4 <adjustDutyCycle+0x1d0>)
 8000794:	69db      	ldr	r3, [r3, #28]
 8000796:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 800079a:	d943      	bls.n	8000824 <adjustDutyCycle+0x200>
			highCountM2 += 1;
 800079c:	4b1f      	ldr	r3, [pc, #124]	; (800081c <adjustDutyCycle+0x1f8>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	3301      	adds	r3, #1
 80007a2:	4a1e      	ldr	r2, [pc, #120]	; (800081c <adjustDutyCycle+0x1f8>)
 80007a4:	6013      	str	r3, [r2, #0]
			lowCountM2 = 0;
 80007a6:	4b1c      	ldr	r3, [pc, #112]	; (8000818 <adjustDutyCycle+0x1f4>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
			if(highCountM2 >= NOJITTER) // Als de waarde 3 keer onder de threshold ligt dan weten we dat het geen jitter is.
 80007ac:	4b1b      	ldr	r3, [pc, #108]	; (800081c <adjustDutyCycle+0x1f8>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	2b02      	cmp	r3, #2
 80007b2:	dd40      	ble.n	8000836 <adjustDutyCycle+0x212>
			{
				highCountM2 = 0;
 80007b4:	4b19      	ldr	r3, [pc, #100]	; (800081c <adjustDutyCycle+0x1f8>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
				dutyCycle_CH4 = (ADC_Values[7] - DEAD_ZONE_HIGH) * 100 / (3550 - DEAD_ZONE_HIGH); // berekent de dutycycle voor een waarde boven de threshold
 80007ba:	4b0e      	ldr	r3, [pc, #56]	; (80007f4 <adjustDutyCycle+0x1d0>)
 80007bc:	69db      	ldr	r3, [r3, #28]
 80007be:	2264      	movs	r2, #100	; 0x64
 80007c0:	fb02 f303 	mul.w	r3, r2, r3
 80007c4:	f5a3 336a 	sub.w	r3, r3, #239616	; 0x3a800
 80007c8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80007cc:	4a0f      	ldr	r2, [pc, #60]	; (800080c <adjustDutyCycle+0x1e8>)
 80007ce:	fba2 2303 	umull	r2, r3, r2, r3
 80007d2:	0a9b      	lsrs	r3, r3, #10
 80007d4:	b2da      	uxtb	r2, r3
 80007d6:	4b12      	ldr	r3, [pc, #72]	; (8000820 <adjustDutyCycle+0x1fc>)
 80007d8:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6,0); //Configureert IN20
 80007da:	2200      	movs	r2, #0
 80007dc:	2140      	movs	r1, #64	; 0x40
 80007de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007e2:	f002 fb2d 	bl	8002e40 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4,1); //Configureert IN10
 80007e6:	2201      	movs	r2, #1
 80007e8:	2110      	movs	r1, #16
 80007ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ee:	f002 fb27 	bl	8002e40 <HAL_GPIO_WritePin>
 80007f2:	e020      	b.n	8000836 <adjustDutyCycle+0x212>
 80007f4:	200001dc 	.word	0x200001dc
 80007f8:	20000308 	.word	0x20000308
 80007fc:	2000030c 	.word	0x2000030c
 8000800:	c9a633fd 	.word	0xc9a633fd
 8000804:	20000304 	.word	0x20000304
 8000808:	48000400 	.word	0x48000400
 800080c:	e3f388af 	.word	0xe3f388af
 8000810:	51eb851f 	.word	0x51eb851f
 8000814:	2000017c 	.word	0x2000017c
 8000818:	20000310 	.word	0x20000310
 800081c:	20000314 	.word	0x20000314
 8000820:	20000305 	.word	0x20000305
			}
		}
		else {
			highCountM2 = 0;
 8000824:	4ba1      	ldr	r3, [pc, #644]	; (8000aac <adjustDutyCycle+0x488>)
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
			lowCountM2 = 0;
 800082a:	4ba1      	ldr	r3, [pc, #644]	; (8000ab0 <adjustDutyCycle+0x48c>)
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
			dutyCycle_CH4 = 0; // Motor stops in dead zone
 8000830:	4ba0      	ldr	r3, [pc, #640]	; (8000ab4 <adjustDutyCycle+0x490>)
 8000832:	2200      	movs	r2, #0
 8000834:	701a      	strb	r2, [r3, #0]
		}
		__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_2, (2999 * dutyCycle_CH4) / 100); //Gebruikt de nieuwe duty cycle en laat de motor draaien.
 8000836:	4b9f      	ldr	r3, [pc, #636]	; (8000ab4 <adjustDutyCycle+0x490>)
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	461a      	mov	r2, r3
 800083c:	f640 33b7 	movw	r3, #2999	; 0xbb7
 8000840:	fb02 f303 	mul.w	r3, r2, r3
 8000844:	4a9c      	ldr	r2, [pc, #624]	; (8000ab8 <adjustDutyCycle+0x494>)
 8000846:	fb82 1203 	smull	r1, r2, r2, r3
 800084a:	1152      	asrs	r2, r2, #5
 800084c:	17db      	asrs	r3, r3, #31
 800084e:	1ad2      	subs	r2, r2, r3
 8000850:	4b9a      	ldr	r3, [pc, #616]	; (8000abc <adjustDutyCycle+0x498>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	639a      	str	r2, [r3, #56]	; 0x38
	///////////////////////////////////////////////////////

	///////////////////////////////////////////////////////
	//////////////////// Kanon servo 1 ////////////////////
	///////////////////////////////////////////////////////
	dutyCycle_G1 = 3600 + ((ADC_Values[5] * (5200 - 3600)) / 4095); // the duty cycly = min value * % * (Max vcalue - Min Value) (20ms = 60khz)
 8000856:	4b9a      	ldr	r3, [pc, #616]	; (8000ac0 <adjustDutyCycle+0x49c>)
 8000858:	695b      	ldr	r3, [r3, #20]
 800085a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800085e:	fb03 f202 	mul.w	r2, r3, r2
 8000862:	4b98      	ldr	r3, [pc, #608]	; (8000ac4 <adjustDutyCycle+0x4a0>)
 8000864:	fba3 1302 	umull	r1, r3, r3, r2
 8000868:	1ad2      	subs	r2, r2, r3
 800086a:	0852      	lsrs	r2, r2, #1
 800086c:	4413      	add	r3, r2
 800086e:	0adb      	lsrs	r3, r3, #11
 8000870:	f503 6361 	add.w	r3, r3, #3600	; 0xe10
 8000874:	4a94      	ldr	r2, [pc, #592]	; (8000ac8 <adjustDutyCycle+0x4a4>)
 8000876:	6013      	str	r3, [r2, #0]
	if (dutyCycle_G1 < 3600) // De waarden limiteren tot hun max/minimum
 8000878:	4b93      	ldr	r3, [pc, #588]	; (8000ac8 <adjustDutyCycle+0x4a4>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8000880:	d203      	bcs.n	800088a <adjustDutyCycle+0x266>
	{
		dutyCycle_G1 = 3600;
 8000882:	4b91      	ldr	r3, [pc, #580]	; (8000ac8 <adjustDutyCycle+0x4a4>)
 8000884:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8000888:	601a      	str	r2, [r3, #0]
	}
	if (dutyCycle_G1 > 5200)
 800088a:	4b8f      	ldr	r3, [pc, #572]	; (8000ac8 <adjustDutyCycle+0x4a4>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	f241 4250 	movw	r2, #5200	; 0x1450
 8000892:	4293      	cmp	r3, r2
 8000894:	d903      	bls.n	800089e <adjustDutyCycle+0x27a>
	{
		dutyCycle_G1 = 5200;
 8000896:	4b8c      	ldr	r3, [pc, #560]	; (8000ac8 <adjustDutyCycle+0x4a4>)
 8000898:	f241 4250 	movw	r2, #5200	; 0x1450
 800089c:	601a      	str	r2, [r3, #0]
	}
	dutyCycle_G1_total = dutyCycle_G1_total - values_G1[index_G1] + dutyCycle_G1;
 800089e:	4b8b      	ldr	r3, [pc, #556]	; (8000acc <adjustDutyCycle+0x4a8>)
 80008a0:	681a      	ldr	r2, [r3, #0]
 80008a2:	4b8b      	ldr	r3, [pc, #556]	; (8000ad0 <adjustDutyCycle+0x4ac>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	498b      	ldr	r1, [pc, #556]	; (8000ad4 <adjustDutyCycle+0x4b0>)
 80008a8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80008ac:	1ad2      	subs	r2, r2, r3
 80008ae:	4b86      	ldr	r3, [pc, #536]	; (8000ac8 <adjustDutyCycle+0x4a4>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	4413      	add	r3, r2
 80008b4:	4a85      	ldr	r2, [pc, #532]	; (8000acc <adjustDutyCycle+0x4a8>)
 80008b6:	6013      	str	r3, [r2, #0]
	values_G1[index_G1] = dutyCycle_G1;
 80008b8:	4b85      	ldr	r3, [pc, #532]	; (8000ad0 <adjustDutyCycle+0x4ac>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a82      	ldr	r2, [pc, #520]	; (8000ac8 <adjustDutyCycle+0x4a4>)
 80008be:	6812      	ldr	r2, [r2, #0]
 80008c0:	4984      	ldr	r1, [pc, #528]	; (8000ad4 <adjustDutyCycle+0x4b0>)
 80008c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	index_G1 = (index_G1 + 1) % 10;
 80008c6:	4b82      	ldr	r3, [pc, #520]	; (8000ad0 <adjustDutyCycle+0x4ac>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	1c59      	adds	r1, r3, #1
 80008cc:	4b82      	ldr	r3, [pc, #520]	; (8000ad8 <adjustDutyCycle+0x4b4>)
 80008ce:	fba3 2301 	umull	r2, r3, r3, r1
 80008d2:	08da      	lsrs	r2, r3, #3
 80008d4:	4613      	mov	r3, r2
 80008d6:	009b      	lsls	r3, r3, #2
 80008d8:	4413      	add	r3, r2
 80008da:	005b      	lsls	r3, r3, #1
 80008dc:	1aca      	subs	r2, r1, r3
 80008de:	4b7c      	ldr	r3, [pc, #496]	; (8000ad0 <adjustDutyCycle+0x4ac>)
 80008e0:	601a      	str	r2, [r3, #0]
	if (dutyCycle_G1_count < 10) { // Het rollend gemiddelde moet eerst tot 10 waarden stijgen nadien blijft deze hier.
 80008e2:	4b7e      	ldr	r3, [pc, #504]	; (8000adc <adjustDutyCycle+0x4b8>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	2b09      	cmp	r3, #9
 80008e8:	d804      	bhi.n	80008f4 <adjustDutyCycle+0x2d0>
		dutyCycle_G1_count++;
 80008ea:	4b7c      	ldr	r3, [pc, #496]	; (8000adc <adjustDutyCycle+0x4b8>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	3301      	adds	r3, #1
 80008f0:	4a7a      	ldr	r2, [pc, #488]	; (8000adc <adjustDutyCycle+0x4b8>)
 80008f2:	6013      	str	r3, [r2, #0]
	}
	av_du_G1 = dutyCycle_G1_total / dutyCycle_G1_count; // Bereken de gemiddelde duty cycle
 80008f4:	4b75      	ldr	r3, [pc, #468]	; (8000acc <adjustDutyCycle+0x4a8>)
 80008f6:	681a      	ldr	r2, [r3, #0]
 80008f8:	4b78      	ldr	r3, [pc, #480]	; (8000adc <adjustDutyCycle+0x4b8>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000900:	4a77      	ldr	r2, [pc, #476]	; (8000ae0 <adjustDutyCycle+0x4bc>)
 8000902:	6013      	str	r3, [r2, #0]
	if (av_du_G1 < 3600) // De waarden limiteren tot hun max/minimum
 8000904:	4b76      	ldr	r3, [pc, #472]	; (8000ae0 <adjustDutyCycle+0x4bc>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 800090c:	d203      	bcs.n	8000916 <adjustDutyCycle+0x2f2>
	{
		av_du_G1 = 3600;
 800090e:	4b74      	ldr	r3, [pc, #464]	; (8000ae0 <adjustDutyCycle+0x4bc>)
 8000910:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8000914:	601a      	str	r2, [r3, #0]
	}
	if (av_du_G1 > 5200)
 8000916:	4b72      	ldr	r3, [pc, #456]	; (8000ae0 <adjustDutyCycle+0x4bc>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	f241 4250 	movw	r2, #5200	; 0x1450
 800091e:	4293      	cmp	r3, r2
 8000920:	d903      	bls.n	800092a <adjustDutyCycle+0x306>
	{
		av_du_G1 = 5200;
 8000922:	4b6f      	ldr	r3, [pc, #444]	; (8000ae0 <adjustDutyCycle+0x4bc>)
 8000924:	f241 4250 	movw	r2, #5200	; 0x1450
 8000928:	601a      	str	r2, [r3, #0]
	}
	if (av_du_G1 > Last_av_du_G1)
 800092a:	4b6d      	ldr	r3, [pc, #436]	; (8000ae0 <adjustDutyCycle+0x4bc>)
 800092c:	681a      	ldr	r2, [r3, #0]
 800092e:	4b6d      	ldr	r3, [pc, #436]	; (8000ae4 <adjustDutyCycle+0x4c0>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	429a      	cmp	r2, r3
 8000934:	d926      	bls.n	8000984 <adjustDutyCycle+0x360>
	{
		if ((av_du_G1 - Last_av_du_G1) > 150) // er mag pas bewogen worden van zodra er een verschil is van meer dan 100 eenheiden tegen over vorige waarde.
 8000936:	4b6a      	ldr	r3, [pc, #424]	; (8000ae0 <adjustDutyCycle+0x4bc>)
 8000938:	681a      	ldr	r2, [r3, #0]
 800093a:	4b6a      	ldr	r3, [pc, #424]	; (8000ae4 <adjustDutyCycle+0x4c0>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	1ad3      	subs	r3, r2, r3
 8000940:	2b96      	cmp	r3, #150	; 0x96
 8000942:	d91f      	bls.n	8000984 <adjustDutyCycle+0x360>
		{
			Last_av_du_G1 = av_du_G1;
 8000944:	4b66      	ldr	r3, [pc, #408]	; (8000ae0 <adjustDutyCycle+0x4bc>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a66      	ldr	r2, [pc, #408]	; (8000ae4 <adjustDutyCycle+0x4c0>)
 800094a:	6013      	str	r3, [r2, #0]
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800094c:	2100      	movs	r1, #0
 800094e:	4866      	ldr	r0, [pc, #408]	; (8000ae8 <adjustDutyCycle+0x4c4>)
 8000950:	f004 ff84 	bl	800585c <HAL_TIM_PWM_Stop>
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8000954:	2104      	movs	r1, #4
 8000956:	4864      	ldr	r0, [pc, #400]	; (8000ae8 <adjustDutyCycle+0x4c4>)
 8000958:	f004 ff80 	bl	800585c <HAL_TIM_PWM_Stop>
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_4);
 800095c:	210c      	movs	r1, #12
 800095e:	4862      	ldr	r0, [pc, #392]	; (8000ae8 <adjustDutyCycle+0x4c4>)
 8000960:	f004 ff7c 	bl	800585c <HAL_TIM_PWM_Stop>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,av_du_G1); // gebruik de gevonde duty cycle
 8000964:	4b60      	ldr	r3, [pc, #384]	; (8000ae8 <adjustDutyCycle+0x4c4>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a5d      	ldr	r2, [pc, #372]	; (8000ae0 <adjustDutyCycle+0x4bc>)
 800096a:	6812      	ldr	r2, [r2, #0]
 800096c:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800096e:	2108      	movs	r1, #8
 8000970:	485d      	ldr	r0, [pc, #372]	; (8000ae8 <adjustDutyCycle+0x4c4>)
 8000972:	f004 fe8d 	bl	8005690 <HAL_TIM_PWM_Start>
			HAL_Delay(20);
 8000976:	2014      	movs	r0, #20
 8000978:	f001 f97a 	bl	8001c70 <HAL_Delay>
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 800097c:	2108      	movs	r1, #8
 800097e:	485a      	ldr	r0, [pc, #360]	; (8000ae8 <adjustDutyCycle+0x4c4>)
 8000980:	f004 ff6c 	bl	800585c <HAL_TIM_PWM_Stop>
		}
	}
	if (av_du_G1 < Last_av_du_G1)
 8000984:	4b56      	ldr	r3, [pc, #344]	; (8000ae0 <adjustDutyCycle+0x4bc>)
 8000986:	681a      	ldr	r2, [r3, #0]
 8000988:	4b56      	ldr	r3, [pc, #344]	; (8000ae4 <adjustDutyCycle+0x4c0>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	429a      	cmp	r2, r3
 800098e:	d226      	bcs.n	80009de <adjustDutyCycle+0x3ba>
	{
		if ((Last_av_du_G1 - av_du_G1) > 150) // er mag pas bewogen worden van zodra er een verschil is van meer dan 100 eenheiden tegen over vorige waarde.
 8000990:	4b54      	ldr	r3, [pc, #336]	; (8000ae4 <adjustDutyCycle+0x4c0>)
 8000992:	681a      	ldr	r2, [r3, #0]
 8000994:	4b52      	ldr	r3, [pc, #328]	; (8000ae0 <adjustDutyCycle+0x4bc>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	1ad3      	subs	r3, r2, r3
 800099a:	2b96      	cmp	r3, #150	; 0x96
 800099c:	d91f      	bls.n	80009de <adjustDutyCycle+0x3ba>
		{
			Last_av_du_G1 = av_du_G1;
 800099e:	4b50      	ldr	r3, [pc, #320]	; (8000ae0 <adjustDutyCycle+0x4bc>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	4a50      	ldr	r2, [pc, #320]	; (8000ae4 <adjustDutyCycle+0x4c0>)
 80009a4:	6013      	str	r3, [r2, #0]
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80009a6:	2100      	movs	r1, #0
 80009a8:	484f      	ldr	r0, [pc, #316]	; (8000ae8 <adjustDutyCycle+0x4c4>)
 80009aa:	f004 ff57 	bl	800585c <HAL_TIM_PWM_Stop>
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 80009ae:	2104      	movs	r1, #4
 80009b0:	484d      	ldr	r0, [pc, #308]	; (8000ae8 <adjustDutyCycle+0x4c4>)
 80009b2:	f004 ff53 	bl	800585c <HAL_TIM_PWM_Stop>
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_4);
 80009b6:	210c      	movs	r1, #12
 80009b8:	484b      	ldr	r0, [pc, #300]	; (8000ae8 <adjustDutyCycle+0x4c4>)
 80009ba:	f004 ff4f 	bl	800585c <HAL_TIM_PWM_Stop>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,av_du_G1); // gebruik de gevonde duty cycle
 80009be:	4b4a      	ldr	r3, [pc, #296]	; (8000ae8 <adjustDutyCycle+0x4c4>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4a47      	ldr	r2, [pc, #284]	; (8000ae0 <adjustDutyCycle+0x4bc>)
 80009c4:	6812      	ldr	r2, [r2, #0]
 80009c6:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80009c8:	2108      	movs	r1, #8
 80009ca:	4847      	ldr	r0, [pc, #284]	; (8000ae8 <adjustDutyCycle+0x4c4>)
 80009cc:	f004 fe60 	bl	8005690 <HAL_TIM_PWM_Start>
			HAL_Delay(40);
 80009d0:	2028      	movs	r0, #40	; 0x28
 80009d2:	f001 f94d 	bl	8001c70 <HAL_Delay>
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 80009d6:	2108      	movs	r1, #8
 80009d8:	4843      	ldr	r0, [pc, #268]	; (8000ae8 <adjustDutyCycle+0x4c4>)
 80009da:	f004 ff3f 	bl	800585c <HAL_TIM_PWM_Stop>
	///////////////////////////////////////////////////////

	///////////////////////////////////////////////////////
	//////////////////// Kanon servo 2 ////////////////////
	///////////////////////////////////////////////////////
	dutyCycle_G2 = 3600 + ((ADC_Values[2] * (5200 - 3600)) / 4095); // the duty cycly = min value * % * (Max vcalue - Min Value) (20ms = 60khz)
 80009de:	4b38      	ldr	r3, [pc, #224]	; (8000ac0 <adjustDutyCycle+0x49c>)
 80009e0:	689b      	ldr	r3, [r3, #8]
 80009e2:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80009e6:	fb03 f202 	mul.w	r2, r3, r2
 80009ea:	4b36      	ldr	r3, [pc, #216]	; (8000ac4 <adjustDutyCycle+0x4a0>)
 80009ec:	fba3 1302 	umull	r1, r3, r3, r2
 80009f0:	1ad2      	subs	r2, r2, r3
 80009f2:	0852      	lsrs	r2, r2, #1
 80009f4:	4413      	add	r3, r2
 80009f6:	0adb      	lsrs	r3, r3, #11
 80009f8:	f503 6361 	add.w	r3, r3, #3600	; 0xe10
 80009fc:	4a3b      	ldr	r2, [pc, #236]	; (8000aec <adjustDutyCycle+0x4c8>)
 80009fe:	6013      	str	r3, [r2, #0]
	if (dutyCycle_G2 < 3600) // De waarden limiteren tot hun max/minimum
 8000a00:	4b3a      	ldr	r3, [pc, #232]	; (8000aec <adjustDutyCycle+0x4c8>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8000a08:	d203      	bcs.n	8000a12 <adjustDutyCycle+0x3ee>
	{
		dutyCycle_G2 = 3600;
 8000a0a:	4b38      	ldr	r3, [pc, #224]	; (8000aec <adjustDutyCycle+0x4c8>)
 8000a0c:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8000a10:	601a      	str	r2, [r3, #0]
	}
	if (dutyCycle_G2 > 5200)
 8000a12:	4b36      	ldr	r3, [pc, #216]	; (8000aec <adjustDutyCycle+0x4c8>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	f241 4250 	movw	r2, #5200	; 0x1450
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d903      	bls.n	8000a26 <adjustDutyCycle+0x402>
	{
		dutyCycle_G2 = 5200;
 8000a1e:	4b33      	ldr	r3, [pc, #204]	; (8000aec <adjustDutyCycle+0x4c8>)
 8000a20:	f241 4250 	movw	r2, #5200	; 0x1450
 8000a24:	601a      	str	r2, [r3, #0]
	}
	dutyCycle_G2_total = dutyCycle_G2_total - values_G2[index_G2] + dutyCycle_G2; // de totaalsom van het rollent gemiddelde = De som - de oudste waar + de nieuwste waarde
 8000a26:	4b32      	ldr	r3, [pc, #200]	; (8000af0 <adjustDutyCycle+0x4cc>)
 8000a28:	681a      	ldr	r2, [r3, #0]
 8000a2a:	4b32      	ldr	r3, [pc, #200]	; (8000af4 <adjustDutyCycle+0x4d0>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4932      	ldr	r1, [pc, #200]	; (8000af8 <adjustDutyCycle+0x4d4>)
 8000a30:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a34:	1ad2      	subs	r2, r2, r3
 8000a36:	4b2d      	ldr	r3, [pc, #180]	; (8000aec <adjustDutyCycle+0x4c8>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4413      	add	r3, r2
 8000a3c:	4a2c      	ldr	r2, [pc, #176]	; (8000af0 <adjustDutyCycle+0x4cc>)
 8000a3e:	6013      	str	r3, [r2, #0]
	values_G2[index_G2] = dutyCycle_G2;
 8000a40:	4b2c      	ldr	r3, [pc, #176]	; (8000af4 <adjustDutyCycle+0x4d0>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a29      	ldr	r2, [pc, #164]	; (8000aec <adjustDutyCycle+0x4c8>)
 8000a46:	6812      	ldr	r2, [r2, #0]
 8000a48:	492b      	ldr	r1, [pc, #172]	; (8000af8 <adjustDutyCycle+0x4d4>)
 8000a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	index_G2 = (index_G2 + 1) % 10;
 8000a4e:	4b29      	ldr	r3, [pc, #164]	; (8000af4 <adjustDutyCycle+0x4d0>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	1c59      	adds	r1, r3, #1
 8000a54:	4b20      	ldr	r3, [pc, #128]	; (8000ad8 <adjustDutyCycle+0x4b4>)
 8000a56:	fba3 2301 	umull	r2, r3, r3, r1
 8000a5a:	08da      	lsrs	r2, r3, #3
 8000a5c:	4613      	mov	r3, r2
 8000a5e:	009b      	lsls	r3, r3, #2
 8000a60:	4413      	add	r3, r2
 8000a62:	005b      	lsls	r3, r3, #1
 8000a64:	1aca      	subs	r2, r1, r3
 8000a66:	4b23      	ldr	r3, [pc, #140]	; (8000af4 <adjustDutyCycle+0x4d0>)
 8000a68:	601a      	str	r2, [r3, #0]
	if (dutyCycle_G2_count < 10) { // Het rollend gemiddelde moet eerst tot 10 waarden stijgen nadien blijft deze hier.
 8000a6a:	4b24      	ldr	r3, [pc, #144]	; (8000afc <adjustDutyCycle+0x4d8>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	2b09      	cmp	r3, #9
 8000a70:	d804      	bhi.n	8000a7c <adjustDutyCycle+0x458>
		dutyCycle_G2_count++;
 8000a72:	4b22      	ldr	r3, [pc, #136]	; (8000afc <adjustDutyCycle+0x4d8>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	3301      	adds	r3, #1
 8000a78:	4a20      	ldr	r2, [pc, #128]	; (8000afc <adjustDutyCycle+0x4d8>)
 8000a7a:	6013      	str	r3, [r2, #0]
	}
	av_du_G2 = dutyCycle_G2_total / dutyCycle_G2_count; // Bereken de gemiddelde duty cycle
 8000a7c:	4b1c      	ldr	r3, [pc, #112]	; (8000af0 <adjustDutyCycle+0x4cc>)
 8000a7e:	681a      	ldr	r2, [r3, #0]
 8000a80:	4b1e      	ldr	r3, [pc, #120]	; (8000afc <adjustDutyCycle+0x4d8>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a88:	4a1d      	ldr	r2, [pc, #116]	; (8000b00 <adjustDutyCycle+0x4dc>)
 8000a8a:	6013      	str	r3, [r2, #0]
	if (av_du_G2 < 3600) // De waarden limiteren tot hun max/minimum
 8000a8c:	4b1c      	ldr	r3, [pc, #112]	; (8000b00 <adjustDutyCycle+0x4dc>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8000a94:	d203      	bcs.n	8000a9e <adjustDutyCycle+0x47a>
	{
		av_du_G2 = 3600;
 8000a96:	4b1a      	ldr	r3, [pc, #104]	; (8000b00 <adjustDutyCycle+0x4dc>)
 8000a98:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8000a9c:	601a      	str	r2, [r3, #0]
	}
	if (av_du_G2 > 5200)
 8000a9e:	4b18      	ldr	r3, [pc, #96]	; (8000b00 <adjustDutyCycle+0x4dc>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	f241 4250 	movw	r2, #5200	; 0x1450
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d930      	bls.n	8000b0c <adjustDutyCycle+0x4e8>
 8000aaa:	e02b      	b.n	8000b04 <adjustDutyCycle+0x4e0>
 8000aac:	20000314 	.word	0x20000314
 8000ab0:	20000310 	.word	0x20000310
 8000ab4:	20000305 	.word	0x20000305
 8000ab8:	51eb851f 	.word	0x51eb851f
 8000abc:	2000017c 	.word	0x2000017c
 8000ac0:	200001dc 	.word	0x200001dc
 8000ac4:	00100101 	.word	0x00100101
 8000ac8:	20000204 	.word	0x20000204
 8000acc:	2000020c 	.word	0x2000020c
 8000ad0:	20000208 	.word	0x20000208
 8000ad4:	20000214 	.word	0x20000214
 8000ad8:	cccccccd 	.word	0xcccccccd
 8000adc:	20000210 	.word	0x20000210
 8000ae0:	2000023c 	.word	0x2000023c
 8000ae4:	20000240 	.word	0x20000240
 8000ae8:	200000e4 	.word	0x200000e4
 8000aec:	20000244 	.word	0x20000244
 8000af0:	2000024c 	.word	0x2000024c
 8000af4:	20000248 	.word	0x20000248
 8000af8:	20000254 	.word	0x20000254
 8000afc:	20000250 	.word	0x20000250
 8000b00:	2000027c 	.word	0x2000027c
	{
		av_du_G2 = 5200;
 8000b04:	4ba3      	ldr	r3, [pc, #652]	; (8000d94 <adjustDutyCycle+0x770>)
 8000b06:	f241 4250 	movw	r2, #5200	; 0x1450
 8000b0a:	601a      	str	r2, [r3, #0]
	}
	if (av_du_G2 > Last_av_du_G2)
 8000b0c:	4ba1      	ldr	r3, [pc, #644]	; (8000d94 <adjustDutyCycle+0x770>)
 8000b0e:	681a      	ldr	r2, [r3, #0]
 8000b10:	4ba1      	ldr	r3, [pc, #644]	; (8000d98 <adjustDutyCycle+0x774>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	429a      	cmp	r2, r3
 8000b16:	d926      	bls.n	8000b66 <adjustDutyCycle+0x542>
	{
		if ((av_du_G2 - Last_av_du_G2) > 150) // er mag pas bewogen worden van zodra er een verschil is van meer dan 100 eenheiden tegen over vorige waarde.
 8000b18:	4b9e      	ldr	r3, [pc, #632]	; (8000d94 <adjustDutyCycle+0x770>)
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	4b9e      	ldr	r3, [pc, #632]	; (8000d98 <adjustDutyCycle+0x774>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	1ad3      	subs	r3, r2, r3
 8000b22:	2b96      	cmp	r3, #150	; 0x96
 8000b24:	d91f      	bls.n	8000b66 <adjustDutyCycle+0x542>
		{
			Last_av_du_G2 = av_du_G2;
 8000b26:	4b9b      	ldr	r3, [pc, #620]	; (8000d94 <adjustDutyCycle+0x770>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4a9b      	ldr	r2, [pc, #620]	; (8000d98 <adjustDutyCycle+0x774>)
 8000b2c:	6013      	str	r3, [r2, #0]
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8000b2e:	2100      	movs	r1, #0
 8000b30:	489a      	ldr	r0, [pc, #616]	; (8000d9c <adjustDutyCycle+0x778>)
 8000b32:	f004 fe93 	bl	800585c <HAL_TIM_PWM_Stop>
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8000b36:	2108      	movs	r1, #8
 8000b38:	4898      	ldr	r0, [pc, #608]	; (8000d9c <adjustDutyCycle+0x778>)
 8000b3a:	f004 fe8f 	bl	800585c <HAL_TIM_PWM_Stop>
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_4);
 8000b3e:	210c      	movs	r1, #12
 8000b40:	4896      	ldr	r0, [pc, #600]	; (8000d9c <adjustDutyCycle+0x778>)
 8000b42:	f004 fe8b 	bl	800585c <HAL_TIM_PWM_Stop>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,av_du_G2); // gebruik de gevonde duty cycle
 8000b46:	4b95      	ldr	r3, [pc, #596]	; (8000d9c <adjustDutyCycle+0x778>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a92      	ldr	r2, [pc, #584]	; (8000d94 <adjustDutyCycle+0x770>)
 8000b4c:	6812      	ldr	r2, [r2, #0]
 8000b4e:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000b50:	2104      	movs	r1, #4
 8000b52:	4892      	ldr	r0, [pc, #584]	; (8000d9c <adjustDutyCycle+0x778>)
 8000b54:	f004 fd9c 	bl	8005690 <HAL_TIM_PWM_Start>
			HAL_Delay(20);
 8000b58:	2014      	movs	r0, #20
 8000b5a:	f001 f889 	bl	8001c70 <HAL_Delay>
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8000b5e:	2104      	movs	r1, #4
 8000b60:	488e      	ldr	r0, [pc, #568]	; (8000d9c <adjustDutyCycle+0x778>)
 8000b62:	f004 fe7b 	bl	800585c <HAL_TIM_PWM_Stop>
		}
	}
	if (av_du_G2 < Last_av_du_G2)
 8000b66:	4b8b      	ldr	r3, [pc, #556]	; (8000d94 <adjustDutyCycle+0x770>)
 8000b68:	681a      	ldr	r2, [r3, #0]
 8000b6a:	4b8b      	ldr	r3, [pc, #556]	; (8000d98 <adjustDutyCycle+0x774>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	429a      	cmp	r2, r3
 8000b70:	d226      	bcs.n	8000bc0 <adjustDutyCycle+0x59c>
	{
		if ((Last_av_du_G2 - av_du_G2) > 150) // er mag pas bewogen worden van zodra er een verschil is van meer dan 100 eenheiden tegen over vorige waarde.
 8000b72:	4b89      	ldr	r3, [pc, #548]	; (8000d98 <adjustDutyCycle+0x774>)
 8000b74:	681a      	ldr	r2, [r3, #0]
 8000b76:	4b87      	ldr	r3, [pc, #540]	; (8000d94 <adjustDutyCycle+0x770>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	1ad3      	subs	r3, r2, r3
 8000b7c:	2b96      	cmp	r3, #150	; 0x96
 8000b7e:	d91f      	bls.n	8000bc0 <adjustDutyCycle+0x59c>
		{
			Last_av_du_G2 = av_du_G2;
 8000b80:	4b84      	ldr	r3, [pc, #528]	; (8000d94 <adjustDutyCycle+0x770>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a84      	ldr	r2, [pc, #528]	; (8000d98 <adjustDutyCycle+0x774>)
 8000b86:	6013      	str	r3, [r2, #0]
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8000b88:	2100      	movs	r1, #0
 8000b8a:	4884      	ldr	r0, [pc, #528]	; (8000d9c <adjustDutyCycle+0x778>)
 8000b8c:	f004 fe66 	bl	800585c <HAL_TIM_PWM_Stop>
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8000b90:	2108      	movs	r1, #8
 8000b92:	4882      	ldr	r0, [pc, #520]	; (8000d9c <adjustDutyCycle+0x778>)
 8000b94:	f004 fe62 	bl	800585c <HAL_TIM_PWM_Stop>
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_4);
 8000b98:	210c      	movs	r1, #12
 8000b9a:	4880      	ldr	r0, [pc, #512]	; (8000d9c <adjustDutyCycle+0x778>)
 8000b9c:	f004 fe5e 	bl	800585c <HAL_TIM_PWM_Stop>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,av_du_G2); // gebruik de gevonde duty cycle
 8000ba0:	4b7e      	ldr	r3, [pc, #504]	; (8000d9c <adjustDutyCycle+0x778>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a7b      	ldr	r2, [pc, #492]	; (8000d94 <adjustDutyCycle+0x770>)
 8000ba6:	6812      	ldr	r2, [r2, #0]
 8000ba8:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000baa:	2104      	movs	r1, #4
 8000bac:	487b      	ldr	r0, [pc, #492]	; (8000d9c <adjustDutyCycle+0x778>)
 8000bae:	f004 fd6f 	bl	8005690 <HAL_TIM_PWM_Start>
			HAL_Delay(40);
 8000bb2:	2028      	movs	r0, #40	; 0x28
 8000bb4:	f001 f85c 	bl	8001c70 <HAL_Delay>
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8000bb8:	2104      	movs	r1, #4
 8000bba:	4878      	ldr	r0, [pc, #480]	; (8000d9c <adjustDutyCycle+0x778>)
 8000bbc:	f004 fe4e 	bl	800585c <HAL_TIM_PWM_Stop>

	///////////////////////////////////////////////////////
	//////////////////// Kanonentoren servo 1 /////////////
	///////////////////////////////////////////////////////

	dutyCycle_T1 = 3000 + ((ADC_Values[4] * (6000 - 3000)) / 4095); // the duty cycly = min value * % * (Max vcalue - Min Value) (20ms = 60khz)
 8000bc0:	4b77      	ldr	r3, [pc, #476]	; (8000da0 <adjustDutyCycle+0x77c>)
 8000bc2:	691b      	ldr	r3, [r3, #16]
 8000bc4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000bc8:	fb03 f202 	mul.w	r2, r3, r2
 8000bcc:	4b75      	ldr	r3, [pc, #468]	; (8000da4 <adjustDutyCycle+0x780>)
 8000bce:	fba3 1302 	umull	r1, r3, r3, r2
 8000bd2:	1ad2      	subs	r2, r2, r3
 8000bd4:	0852      	lsrs	r2, r2, #1
 8000bd6:	4413      	add	r3, r2
 8000bd8:	0adb      	lsrs	r3, r3, #11
 8000bda:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8000bde:	4a72      	ldr	r2, [pc, #456]	; (8000da8 <adjustDutyCycle+0x784>)
 8000be0:	6013      	str	r3, [r2, #0]
	if (dutyCycle_T1 < 3000) // De waarden limiteren tot hun max/minimum
 8000be2:	4b71      	ldr	r3, [pc, #452]	; (8000da8 <adjustDutyCycle+0x784>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d803      	bhi.n	8000bf6 <adjustDutyCycle+0x5d2>
	{
		dutyCycle_T1 = 3000;
 8000bee:	4b6e      	ldr	r3, [pc, #440]	; (8000da8 <adjustDutyCycle+0x784>)
 8000bf0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000bf4:	601a      	str	r2, [r3, #0]
	}
	if (dutyCycle_T1 > 6000)
 8000bf6:	4b6c      	ldr	r3, [pc, #432]	; (8000da8 <adjustDutyCycle+0x784>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f241 7270 	movw	r2, #6000	; 0x1770
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d903      	bls.n	8000c0a <adjustDutyCycle+0x5e6>
	{
		dutyCycle_T1 = 6000;
 8000c02:	4b69      	ldr	r3, [pc, #420]	; (8000da8 <adjustDutyCycle+0x784>)
 8000c04:	f241 7270 	movw	r2, #6000	; 0x1770
 8000c08:	601a      	str	r2, [r3, #0]
	}
	dutyCycle_T1_total = dutyCycle_T1_total - values_T1[index_T1] + dutyCycle_T1; // de totaalsom van het rollent gemiddelde = De som - de oudste waar + de nieuwste waarde
 8000c0a:	4b68      	ldr	r3, [pc, #416]	; (8000dac <adjustDutyCycle+0x788>)
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	4b68      	ldr	r3, [pc, #416]	; (8000db0 <adjustDutyCycle+0x78c>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4968      	ldr	r1, [pc, #416]	; (8000db4 <adjustDutyCycle+0x790>)
 8000c14:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000c18:	1ad2      	subs	r2, r2, r3
 8000c1a:	4b63      	ldr	r3, [pc, #396]	; (8000da8 <adjustDutyCycle+0x784>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4413      	add	r3, r2
 8000c20:	4a62      	ldr	r2, [pc, #392]	; (8000dac <adjustDutyCycle+0x788>)
 8000c22:	6013      	str	r3, [r2, #0]
	values_T1[index_T1] = dutyCycle_T1;
 8000c24:	4b62      	ldr	r3, [pc, #392]	; (8000db0 <adjustDutyCycle+0x78c>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a5f      	ldr	r2, [pc, #380]	; (8000da8 <adjustDutyCycle+0x784>)
 8000c2a:	6812      	ldr	r2, [r2, #0]
 8000c2c:	4961      	ldr	r1, [pc, #388]	; (8000db4 <adjustDutyCycle+0x790>)
 8000c2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	index_T1 = (index_T1 + 1) % 10;
 8000c32:	4b5f      	ldr	r3, [pc, #380]	; (8000db0 <adjustDutyCycle+0x78c>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	1c59      	adds	r1, r3, #1
 8000c38:	4b5f      	ldr	r3, [pc, #380]	; (8000db8 <adjustDutyCycle+0x794>)
 8000c3a:	fba3 2301 	umull	r2, r3, r3, r1
 8000c3e:	08da      	lsrs	r2, r3, #3
 8000c40:	4613      	mov	r3, r2
 8000c42:	009b      	lsls	r3, r3, #2
 8000c44:	4413      	add	r3, r2
 8000c46:	005b      	lsls	r3, r3, #1
 8000c48:	1aca      	subs	r2, r1, r3
 8000c4a:	4b59      	ldr	r3, [pc, #356]	; (8000db0 <adjustDutyCycle+0x78c>)
 8000c4c:	601a      	str	r2, [r3, #0]
	if (dutyCycle_T1_count < 10) { // Het rollend gemiddelde moet eerst tot 10 waarden stijgen nadien blijft deze hier.
 8000c4e:	4b5b      	ldr	r3, [pc, #364]	; (8000dbc <adjustDutyCycle+0x798>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	2b09      	cmp	r3, #9
 8000c54:	d804      	bhi.n	8000c60 <adjustDutyCycle+0x63c>
		dutyCycle_T1_count++;
 8000c56:	4b59      	ldr	r3, [pc, #356]	; (8000dbc <adjustDutyCycle+0x798>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	4a57      	ldr	r2, [pc, #348]	; (8000dbc <adjustDutyCycle+0x798>)
 8000c5e:	6013      	str	r3, [r2, #0]
	}
	av_du_T1 = dutyCycle_T1_total / dutyCycle_T1_count; // Bereken de gemiddelde duty cycle
 8000c60:	4b52      	ldr	r3, [pc, #328]	; (8000dac <adjustDutyCycle+0x788>)
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	4b55      	ldr	r3, [pc, #340]	; (8000dbc <adjustDutyCycle+0x798>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c6c:	4a54      	ldr	r2, [pc, #336]	; (8000dc0 <adjustDutyCycle+0x79c>)
 8000c6e:	6013      	str	r3, [r2, #0]
	if (av_du_T1 < 3000) // De waarden limiteren tot hun max/minimum
 8000c70:	4b53      	ldr	r3, [pc, #332]	; (8000dc0 <adjustDutyCycle+0x79c>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d803      	bhi.n	8000c84 <adjustDutyCycle+0x660>
	{
		av_du_T1 = 3000;
 8000c7c:	4b50      	ldr	r3, [pc, #320]	; (8000dc0 <adjustDutyCycle+0x79c>)
 8000c7e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000c82:	601a      	str	r2, [r3, #0]
	}
	if (av_du_T1 > 6000)
 8000c84:	4b4e      	ldr	r3, [pc, #312]	; (8000dc0 <adjustDutyCycle+0x79c>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	f241 7270 	movw	r2, #6000	; 0x1770
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d903      	bls.n	8000c98 <adjustDutyCycle+0x674>
	{
		av_du_T1 = 6000;
 8000c90:	4b4b      	ldr	r3, [pc, #300]	; (8000dc0 <adjustDutyCycle+0x79c>)
 8000c92:	f241 7270 	movw	r2, #6000	; 0x1770
 8000c96:	601a      	str	r2, [r3, #0]
	}
	if (av_du_T1 > Last_av_du_T1)
 8000c98:	4b49      	ldr	r3, [pc, #292]	; (8000dc0 <adjustDutyCycle+0x79c>)
 8000c9a:	681a      	ldr	r2, [r3, #0]
 8000c9c:	4b49      	ldr	r3, [pc, #292]	; (8000dc4 <adjustDutyCycle+0x7a0>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	d927      	bls.n	8000cf4 <adjustDutyCycle+0x6d0>
	{
		if ((av_du_T1 - Last_av_du_T1) > 500) // er mag pas bewogen worden van zodra er een verschil is van meer dan 100 eenheiden tegen over vorige waarde.
 8000ca4:	4b46      	ldr	r3, [pc, #280]	; (8000dc0 <adjustDutyCycle+0x79c>)
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	4b46      	ldr	r3, [pc, #280]	; (8000dc4 <adjustDutyCycle+0x7a0>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	1ad3      	subs	r3, r2, r3
 8000cae:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000cb2:	d91f      	bls.n	8000cf4 <adjustDutyCycle+0x6d0>
		{
			Last_av_du_T1 = av_du_T1;
 8000cb4:	4b42      	ldr	r3, [pc, #264]	; (8000dc0 <adjustDutyCycle+0x79c>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a42      	ldr	r2, [pc, #264]	; (8000dc4 <adjustDutyCycle+0x7a0>)
 8000cba:	6013      	str	r3, [r2, #0]
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4837      	ldr	r0, [pc, #220]	; (8000d9c <adjustDutyCycle+0x778>)
 8000cc0:	f004 fdcc 	bl	800585c <HAL_TIM_PWM_Stop>
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8000cc4:	2104      	movs	r1, #4
 8000cc6:	4835      	ldr	r0, [pc, #212]	; (8000d9c <adjustDutyCycle+0x778>)
 8000cc8:	f004 fdc8 	bl	800585c <HAL_TIM_PWM_Stop>
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8000ccc:	2108      	movs	r1, #8
 8000cce:	4833      	ldr	r0, [pc, #204]	; (8000d9c <adjustDutyCycle+0x778>)
 8000cd0:	f004 fdc4 	bl	800585c <HAL_TIM_PWM_Stop>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,av_du_T1); // gebruik de gevonde duty cycle
 8000cd4:	4b31      	ldr	r3, [pc, #196]	; (8000d9c <adjustDutyCycle+0x778>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a39      	ldr	r2, [pc, #228]	; (8000dc0 <adjustDutyCycle+0x79c>)
 8000cda:	6812      	ldr	r2, [r2, #0]
 8000cdc:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000cde:	210c      	movs	r1, #12
 8000ce0:	482e      	ldr	r0, [pc, #184]	; (8000d9c <adjustDutyCycle+0x778>)
 8000ce2:	f004 fcd5 	bl	8005690 <HAL_TIM_PWM_Start>
			HAL_Delay(20);
 8000ce6:	2014      	movs	r0, #20
 8000ce8:	f000 ffc2 	bl	8001c70 <HAL_Delay>
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_4);
 8000cec:	210c      	movs	r1, #12
 8000cee:	482b      	ldr	r0, [pc, #172]	; (8000d9c <adjustDutyCycle+0x778>)
 8000cf0:	f004 fdb4 	bl	800585c <HAL_TIM_PWM_Stop>
		}
	}
	if (av_du_T1 < Last_av_du_T1)
 8000cf4:	4b32      	ldr	r3, [pc, #200]	; (8000dc0 <adjustDutyCycle+0x79c>)
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	4b32      	ldr	r3, [pc, #200]	; (8000dc4 <adjustDutyCycle+0x7a0>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d227      	bcs.n	8000d50 <adjustDutyCycle+0x72c>
	{
		if ((Last_av_du_T1 - av_du_T1) > 500) // er mag pas bewogen worden van zodra er een verschil is van meer dan 100 eenheiden tegen over vorige waarde.
 8000d00:	4b30      	ldr	r3, [pc, #192]	; (8000dc4 <adjustDutyCycle+0x7a0>)
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	4b2e      	ldr	r3, [pc, #184]	; (8000dc0 <adjustDutyCycle+0x79c>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	1ad3      	subs	r3, r2, r3
 8000d0a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000d0e:	d91f      	bls.n	8000d50 <adjustDutyCycle+0x72c>
		{
			Last_av_du_T1 = av_du_T1;
 8000d10:	4b2b      	ldr	r3, [pc, #172]	; (8000dc0 <adjustDutyCycle+0x79c>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a2b      	ldr	r2, [pc, #172]	; (8000dc4 <adjustDutyCycle+0x7a0>)
 8000d16:	6013      	str	r3, [r2, #0]
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8000d18:	2100      	movs	r1, #0
 8000d1a:	4820      	ldr	r0, [pc, #128]	; (8000d9c <adjustDutyCycle+0x778>)
 8000d1c:	f004 fd9e 	bl	800585c <HAL_TIM_PWM_Stop>
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8000d20:	2104      	movs	r1, #4
 8000d22:	481e      	ldr	r0, [pc, #120]	; (8000d9c <adjustDutyCycle+0x778>)
 8000d24:	f004 fd9a 	bl	800585c <HAL_TIM_PWM_Stop>
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8000d28:	2108      	movs	r1, #8
 8000d2a:	481c      	ldr	r0, [pc, #112]	; (8000d9c <adjustDutyCycle+0x778>)
 8000d2c:	f004 fd96 	bl	800585c <HAL_TIM_PWM_Stop>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4,av_du_T1); // gebruik de gevonde duty cycle
 8000d30:	4b1a      	ldr	r3, [pc, #104]	; (8000d9c <adjustDutyCycle+0x778>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a22      	ldr	r2, [pc, #136]	; (8000dc0 <adjustDutyCycle+0x79c>)
 8000d36:	6812      	ldr	r2, [r2, #0]
 8000d38:	641a      	str	r2, [r3, #64]	; 0x40
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000d3a:	210c      	movs	r1, #12
 8000d3c:	4817      	ldr	r0, [pc, #92]	; (8000d9c <adjustDutyCycle+0x778>)
 8000d3e:	f004 fca7 	bl	8005690 <HAL_TIM_PWM_Start>
			HAL_Delay(40);
 8000d42:	2028      	movs	r0, #40	; 0x28
 8000d44:	f000 ff94 	bl	8001c70 <HAL_Delay>
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_4);
 8000d48:	210c      	movs	r1, #12
 8000d4a:	4814      	ldr	r0, [pc, #80]	; (8000d9c <adjustDutyCycle+0x778>)
 8000d4c:	f004 fd86 	bl	800585c <HAL_TIM_PWM_Stop>

	///////////////////////////////////////////////////////
	//////////////////// Kanonentoren servo 2 /////////////
	///////////////////////////////////////////////////////

	dutyCycle_T2 = 3000 + ((ADC_Values[3] * (6000 - 3000)) / 4095); // the duty cycly = min value * % * (Max vcalue - Min Value) (20ms = 60khz)
 8000d50:	4b13      	ldr	r3, [pc, #76]	; (8000da0 <adjustDutyCycle+0x77c>)
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000d58:	fb03 f202 	mul.w	r2, r3, r2
 8000d5c:	4b11      	ldr	r3, [pc, #68]	; (8000da4 <adjustDutyCycle+0x780>)
 8000d5e:	fba3 1302 	umull	r1, r3, r3, r2
 8000d62:	1ad2      	subs	r2, r2, r3
 8000d64:	0852      	lsrs	r2, r2, #1
 8000d66:	4413      	add	r3, r2
 8000d68:	0adb      	lsrs	r3, r3, #11
 8000d6a:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8000d6e:	4a16      	ldr	r2, [pc, #88]	; (8000dc8 <adjustDutyCycle+0x7a4>)
 8000d70:	6013      	str	r3, [r2, #0]
	if (dutyCycle_T2 < 3000) // De waarden limiteren tot hun max/minimum
 8000d72:	4b15      	ldr	r3, [pc, #84]	; (8000dc8 <adjustDutyCycle+0x7a4>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d803      	bhi.n	8000d86 <adjustDutyCycle+0x762>
	{
		dutyCycle_T2 = 3000;
 8000d7e:	4b12      	ldr	r3, [pc, #72]	; (8000dc8 <adjustDutyCycle+0x7a4>)
 8000d80:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000d84:	601a      	str	r2, [r3, #0]
	}
	if (dutyCycle_T2 > 6000)
 8000d86:	4b10      	ldr	r3, [pc, #64]	; (8000dc8 <adjustDutyCycle+0x7a4>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f241 7270 	movw	r2, #6000	; 0x1770
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	e01c      	b.n	8000dcc <adjustDutyCycle+0x7a8>
 8000d92:	bf00      	nop
 8000d94:	2000027c 	.word	0x2000027c
 8000d98:	20000280 	.word	0x20000280
 8000d9c:	200000e4 	.word	0x200000e4
 8000da0:	200001dc 	.word	0x200001dc
 8000da4:	00100101 	.word	0x00100101
 8000da8:	20000284 	.word	0x20000284
 8000dac:	2000028c 	.word	0x2000028c
 8000db0:	20000288 	.word	0x20000288
 8000db4:	20000294 	.word	0x20000294
 8000db8:	cccccccd 	.word	0xcccccccd
 8000dbc:	20000290 	.word	0x20000290
 8000dc0:	200002bc 	.word	0x200002bc
 8000dc4:	200002c0 	.word	0x200002c0
 8000dc8:	200002c4 	.word	0x200002c4
 8000dcc:	d903      	bls.n	8000dd6 <adjustDutyCycle+0x7b2>
	{
		dutyCycle_T2 = 6000;
 8000dce:	4b53      	ldr	r3, [pc, #332]	; (8000f1c <adjustDutyCycle+0x8f8>)
 8000dd0:	f241 7270 	movw	r2, #6000	; 0x1770
 8000dd4:	601a      	str	r2, [r3, #0]
	}
	dutyCycle_T2_total = dutyCycle_T2_total - values_T2[index_T2] + dutyCycle_T2; // de totaalsom van het rollent gemiddelde = De som - de oudste waar + de nieuwste waarde
 8000dd6:	4b52      	ldr	r3, [pc, #328]	; (8000f20 <adjustDutyCycle+0x8fc>)
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	4b52      	ldr	r3, [pc, #328]	; (8000f24 <adjustDutyCycle+0x900>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4952      	ldr	r1, [pc, #328]	; (8000f28 <adjustDutyCycle+0x904>)
 8000de0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000de4:	1ad2      	subs	r2, r2, r3
 8000de6:	4b4d      	ldr	r3, [pc, #308]	; (8000f1c <adjustDutyCycle+0x8f8>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4413      	add	r3, r2
 8000dec:	4a4c      	ldr	r2, [pc, #304]	; (8000f20 <adjustDutyCycle+0x8fc>)
 8000dee:	6013      	str	r3, [r2, #0]
	values_T2[index_T2] = dutyCycle_T2;
 8000df0:	4b4c      	ldr	r3, [pc, #304]	; (8000f24 <adjustDutyCycle+0x900>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a49      	ldr	r2, [pc, #292]	; (8000f1c <adjustDutyCycle+0x8f8>)
 8000df6:	6812      	ldr	r2, [r2, #0]
 8000df8:	494b      	ldr	r1, [pc, #300]	; (8000f28 <adjustDutyCycle+0x904>)
 8000dfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	index_T2 = (index_T2 + 1) % 10;
 8000dfe:	4b49      	ldr	r3, [pc, #292]	; (8000f24 <adjustDutyCycle+0x900>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	1c59      	adds	r1, r3, #1
 8000e04:	4b49      	ldr	r3, [pc, #292]	; (8000f2c <adjustDutyCycle+0x908>)
 8000e06:	fba3 2301 	umull	r2, r3, r3, r1
 8000e0a:	08da      	lsrs	r2, r3, #3
 8000e0c:	4613      	mov	r3, r2
 8000e0e:	009b      	lsls	r3, r3, #2
 8000e10:	4413      	add	r3, r2
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	1aca      	subs	r2, r1, r3
 8000e16:	4b43      	ldr	r3, [pc, #268]	; (8000f24 <adjustDutyCycle+0x900>)
 8000e18:	601a      	str	r2, [r3, #0]
	if (dutyCycle_T2_count < 10) { // Het rollend gemiddelde moet eerst tot 10 waarden stijgen nadien blijft deze hier.
 8000e1a:	4b45      	ldr	r3, [pc, #276]	; (8000f30 <adjustDutyCycle+0x90c>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	2b09      	cmp	r3, #9
 8000e20:	d804      	bhi.n	8000e2c <adjustDutyCycle+0x808>
		dutyCycle_T2_count++;
 8000e22:	4b43      	ldr	r3, [pc, #268]	; (8000f30 <adjustDutyCycle+0x90c>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	3301      	adds	r3, #1
 8000e28:	4a41      	ldr	r2, [pc, #260]	; (8000f30 <adjustDutyCycle+0x90c>)
 8000e2a:	6013      	str	r3, [r2, #0]
	}
	av_du_T2 = dutyCycle_T2_total / dutyCycle_T2_count; // Bereken de gemiddelde duty cycle
 8000e2c:	4b3c      	ldr	r3, [pc, #240]	; (8000f20 <adjustDutyCycle+0x8fc>)
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	4b3f      	ldr	r3, [pc, #252]	; (8000f30 <adjustDutyCycle+0x90c>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e38:	4a3e      	ldr	r2, [pc, #248]	; (8000f34 <adjustDutyCycle+0x910>)
 8000e3a:	6013      	str	r3, [r2, #0]
	if (av_du_T2 < 3000) // De waarden limiteren tot hun max/minimum
 8000e3c:	4b3d      	ldr	r3, [pc, #244]	; (8000f34 <adjustDutyCycle+0x910>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d803      	bhi.n	8000e50 <adjustDutyCycle+0x82c>
	{
		av_du_T2 = 3000;
 8000e48:	4b3a      	ldr	r3, [pc, #232]	; (8000f34 <adjustDutyCycle+0x910>)
 8000e4a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000e4e:	601a      	str	r2, [r3, #0]
	}
	if (av_du_T2 > 6000)
 8000e50:	4b38      	ldr	r3, [pc, #224]	; (8000f34 <adjustDutyCycle+0x910>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f241 7270 	movw	r2, #6000	; 0x1770
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d903      	bls.n	8000e64 <adjustDutyCycle+0x840>
	{
		av_du_T2 = 6000;
 8000e5c:	4b35      	ldr	r3, [pc, #212]	; (8000f34 <adjustDutyCycle+0x910>)
 8000e5e:	f241 7270 	movw	r2, #6000	; 0x1770
 8000e62:	601a      	str	r2, [r3, #0]
	}
	if (av_du_T2 > Last_av_du_T2)
 8000e64:	4b33      	ldr	r3, [pc, #204]	; (8000f34 <adjustDutyCycle+0x910>)
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	4b33      	ldr	r3, [pc, #204]	; (8000f38 <adjustDutyCycle+0x914>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	429a      	cmp	r2, r3
 8000e6e:	d926      	bls.n	8000ebe <adjustDutyCycle+0x89a>
	{
		if ((av_du_T2 - Last_av_du_T2) > 150) // er mag pas bewogen worden van zodra er een verschil is van meer dan 100 eenheiden tegen over vorige waarde.
 8000e70:	4b30      	ldr	r3, [pc, #192]	; (8000f34 <adjustDutyCycle+0x910>)
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	4b30      	ldr	r3, [pc, #192]	; (8000f38 <adjustDutyCycle+0x914>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	1ad3      	subs	r3, r2, r3
 8000e7a:	2b96      	cmp	r3, #150	; 0x96
 8000e7c:	d91f      	bls.n	8000ebe <adjustDutyCycle+0x89a>
		{
			Last_av_du_T2 = av_du_T2;
 8000e7e:	4b2d      	ldr	r3, [pc, #180]	; (8000f34 <adjustDutyCycle+0x910>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a2d      	ldr	r2, [pc, #180]	; (8000f38 <adjustDutyCycle+0x914>)
 8000e84:	6013      	str	r3, [r2, #0]
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_4);
 8000e86:	210c      	movs	r1, #12
 8000e88:	482c      	ldr	r0, [pc, #176]	; (8000f3c <adjustDutyCycle+0x918>)
 8000e8a:	f004 fce7 	bl	800585c <HAL_TIM_PWM_Stop>
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8000e8e:	2104      	movs	r1, #4
 8000e90:	482a      	ldr	r0, [pc, #168]	; (8000f3c <adjustDutyCycle+0x918>)
 8000e92:	f004 fce3 	bl	800585c <HAL_TIM_PWM_Stop>
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8000e96:	2108      	movs	r1, #8
 8000e98:	4828      	ldr	r0, [pc, #160]	; (8000f3c <adjustDutyCycle+0x918>)
 8000e9a:	f004 fcdf 	bl	800585c <HAL_TIM_PWM_Stop>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,av_du_T2); // gebruik de gevonde duty cycle
 8000e9e:	4b27      	ldr	r3, [pc, #156]	; (8000f3c <adjustDutyCycle+0x918>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4a24      	ldr	r2, [pc, #144]	; (8000f34 <adjustDutyCycle+0x910>)
 8000ea4:	6812      	ldr	r2, [r2, #0]
 8000ea6:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	4824      	ldr	r0, [pc, #144]	; (8000f3c <adjustDutyCycle+0x918>)
 8000eac:	f004 fbf0 	bl	8005690 <HAL_TIM_PWM_Start>
			HAL_Delay(20);
 8000eb0:	2014      	movs	r0, #20
 8000eb2:	f000 fedd 	bl	8001c70 <HAL_Delay>
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	4820      	ldr	r0, [pc, #128]	; (8000f3c <adjustDutyCycle+0x918>)
 8000eba:	f004 fccf 	bl	800585c <HAL_TIM_PWM_Stop>
		}
	}
	if (av_du_T2 < Last_av_du_T2)
 8000ebe:	4b1d      	ldr	r3, [pc, #116]	; (8000f34 <adjustDutyCycle+0x910>)
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	4b1d      	ldr	r3, [pc, #116]	; (8000f38 <adjustDutyCycle+0x914>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	429a      	cmp	r2, r3
 8000ec8:	d226      	bcs.n	8000f18 <adjustDutyCycle+0x8f4>
	{
		if ((Last_av_du_T2 - av_du_T2) > 150) // er mag pas bewogen worden van zodra er een verschil is van meer dan 100 eenheiden tegen over vorige waarde.
 8000eca:	4b1b      	ldr	r3, [pc, #108]	; (8000f38 <adjustDutyCycle+0x914>)
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	4b19      	ldr	r3, [pc, #100]	; (8000f34 <adjustDutyCycle+0x910>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	1ad3      	subs	r3, r2, r3
 8000ed4:	2b96      	cmp	r3, #150	; 0x96
 8000ed6:	d91f      	bls.n	8000f18 <adjustDutyCycle+0x8f4>
		{
			Last_av_du_T2 = av_du_T2;
 8000ed8:	4b16      	ldr	r3, [pc, #88]	; (8000f34 <adjustDutyCycle+0x910>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a16      	ldr	r2, [pc, #88]	; (8000f38 <adjustDutyCycle+0x914>)
 8000ede:	6013      	str	r3, [r2, #0]
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_4);
 8000ee0:	210c      	movs	r1, #12
 8000ee2:	4816      	ldr	r0, [pc, #88]	; (8000f3c <adjustDutyCycle+0x918>)
 8000ee4:	f004 fcba 	bl	800585c <HAL_TIM_PWM_Stop>
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8000ee8:	2104      	movs	r1, #4
 8000eea:	4814      	ldr	r0, [pc, #80]	; (8000f3c <adjustDutyCycle+0x918>)
 8000eec:	f004 fcb6 	bl	800585c <HAL_TIM_PWM_Stop>
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8000ef0:	2108      	movs	r1, #8
 8000ef2:	4812      	ldr	r0, [pc, #72]	; (8000f3c <adjustDutyCycle+0x918>)
 8000ef4:	f004 fcb2 	bl	800585c <HAL_TIM_PWM_Stop>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,av_du_T2); // gebruik de gevonde duty cycle
 8000ef8:	4b10      	ldr	r3, [pc, #64]	; (8000f3c <adjustDutyCycle+0x918>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a0d      	ldr	r2, [pc, #52]	; (8000f34 <adjustDutyCycle+0x910>)
 8000efe:	6812      	ldr	r2, [r2, #0]
 8000f00:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000f02:	2100      	movs	r1, #0
 8000f04:	480d      	ldr	r0, [pc, #52]	; (8000f3c <adjustDutyCycle+0x918>)
 8000f06:	f004 fbc3 	bl	8005690 <HAL_TIM_PWM_Start>
			HAL_Delay(40);
 8000f0a:	2028      	movs	r0, #40	; 0x28
 8000f0c:	f000 feb0 	bl	8001c70 <HAL_Delay>
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8000f10:	2100      	movs	r1, #0
 8000f12:	480a      	ldr	r0, [pc, #40]	; (8000f3c <adjustDutyCycle+0x918>)
 8000f14:	f004 fca2 	bl	800585c <HAL_TIM_PWM_Stop>
		}
	}
}
 8000f18:	bf00      	nop
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	200002c4 	.word	0x200002c4
 8000f20:	200002cc 	.word	0x200002cc
 8000f24:	200002c8 	.word	0x200002c8
 8000f28:	200002d4 	.word	0x200002d4
 8000f2c:	cccccccd 	.word	0xcccccccd
 8000f30:	200002d0 	.word	0x200002d0
 8000f34:	200002fc 	.word	0x200002fc
 8000f38:	20000300 	.word	0x20000300
 8000f3c:	200000e4 	.word	0x200000e4

08000f40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f44:	f000 fe2e 	bl	8001ba4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f48:	f000 f886 	bl	8001058 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f4c:	f000 fb74 	bl	8001638 <MX_GPIO_Init>
  MX_SPI3_Init();
 8000f50:	f000 f93e 	bl	80011d0 <MX_SPI3_Init>
  MX_TIM1_Init();
 8000f54:	f000 f97a 	bl	800124c <MX_TIM1_Init>
  MX_ADC1_Init();
 8000f58:	f000 f8dc 	bl	8001114 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000f5c:	f000 fa46 	bl	80013ec <MX_TIM2_Init>
  MX_TIM15_Init();
 8000f60:	f000 faba 	bl	80014d8 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */

  NRF24_Init();	// Initialiseert de NRF24L01+ module.
 8000f64:	f7ff fa82 	bl	800046c <NRF24_Init>
  NRF24_RXMode(RxAddress, 10); // Configureert de NRF24L01+ module in Receive mode.
 8000f68:	210a      	movs	r1, #10
 8000f6a:	4833      	ldr	r0, [pc, #204]	; (8001038 <main+0xf8>)
 8000f6c:	f7ff faa5 	bl	80004ba <NRF24_RXMode>
  HAL_TIM_Base_Start_IT(&htim1); //Start timer 1 gebruikt voor de servo motoren.
 8000f70:	4832      	ldr	r0, [pc, #200]	; (800103c <main+0xfc>)
 8000f72:	f004 fad7 	bl	8005524 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim15); //Start timer 2 gebruikt voor de DC motoren.
 8000f76:	4832      	ldr	r0, [pc, #200]	; (8001040 <main+0x100>)
 8000f78:	f004 fad4 	bl	8005524 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1); //Start de PWM voor DC motor 1.
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	4830      	ldr	r0, [pc, #192]	; (8001040 <main+0x100>)
 8000f80:	f004 fb86 	bl	8005690 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);  //Start de PWM voor DC motor 2.
 8000f84:	2104      	movs	r1, #4
 8000f86:	482e      	ldr	r0, [pc, #184]	; (8001040 <main+0x100>)
 8000f88:	f004 fb82 	bl	8005690 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, 0); // Initialisert de counter op 0 van DC motor 1 zodat deze niet automatisch start met rijden.
 8000f8c:	4b2c      	ldr	r3, [pc, #176]	; (8001040 <main+0x100>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2200      	movs	r2, #0
 8000f92:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_2, 0); // Initialisert de counter op 0 van DC motor 2 zodat deze niet automatisch start met rijden.
 8000f94:	4b2a      	ldr	r3, [pc, #168]	; (8001040 <main+0x100>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2200      	movs	r2, #0
 8000f9a:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_ADC_Start(&hadc1); // Start de ADC voor het batterij niveau.
 8000f9c:	4829      	ldr	r0, [pc, #164]	; (8001044 <main+0x104>)
 8000f9e:	f001 f811 	bl	8001fc4 <HAL_ADC_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  current_Tick = HAL_GetTick();
 8000fa2:	f000 fe59 	bl	8001c58 <HAL_GetTick>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	4a27      	ldr	r2, [pc, #156]	; (8001048 <main+0x108>)
 8000faa:	6013      	str	r3, [r2, #0]
	  if (HAL_ADC_PollForConversion(&hadc1, 1000000) == HAL_OK)
 8000fac:	4927      	ldr	r1, [pc, #156]	; (800104c <main+0x10c>)
 8000fae:	4825      	ldr	r0, [pc, #148]	; (8001044 <main+0x104>)
 8000fb0:	f001 f876 	bl	80020a0 <HAL_ADC_PollForConversion>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d105      	bne.n	8000fc6 <main+0x86>
	  {
		  ADC = HAL_ADC_GetValue(&hadc1);
 8000fba:	4822      	ldr	r0, [pc, #136]	; (8001044 <main+0x104>)
 8000fbc:	f001 f92e 	bl	800221c <HAL_ADC_GetValue>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	4a23      	ldr	r2, [pc, #140]	; (8001050 <main+0x110>)
 8000fc4:	6013      	str	r3, [r2, #0]
	  }
	  if(ADC > 3020) //kijkt na of het batterij niveau nog boven 11.8V is.
 8000fc6:	4b22      	ldr	r3, [pc, #136]	; (8001050 <main+0x110>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f640 32cc 	movw	r2, #3020	; 0xbcc
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d90c      	bls.n	8000fec <main+0xac>
	  {
		  if (isDataAvailable(1) == 1) // Kijkt na of er data beschikbaar is.
 8000fd2:	2001      	movs	r0, #1
 8000fd4:	f7ff faa9 	bl	800052a <isDataAvailable>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d106      	bne.n	8000fec <main+0xac>
		  {
			  prev_Tick = HAL_GetTick();
 8000fde:	f000 fe3b 	bl	8001c58 <HAL_GetTick>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	4a1b      	ldr	r2, [pc, #108]	; (8001054 <main+0x114>)
 8000fe6:	6013      	str	r3, [r2, #0]
			  processData(); //Als data beschikbaar is gaan we deze data verwerken.
 8000fe8:	f7ff fae8 	bl	80005bc <processData>
		  }
	  }
	  if (prev_Tick + 500 < current_Tick)
 8000fec:	4b19      	ldr	r3, [pc, #100]	; (8001054 <main+0x114>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f503 72fa 	add.w	r2, r3, #500	; 0x1f4
 8000ff4:	4b14      	ldr	r3, [pc, #80]	; (8001048 <main+0x108>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d2d2      	bcs.n	8000fa2 <main+0x62>
	  {
		  prev_Tick = HAL_GetTick();
 8000ffc:	f000 fe2c 	bl	8001c58 <HAL_GetTick>
 8001000:	4603      	mov	r3, r0
 8001002:	4a14      	ldr	r2, [pc, #80]	; (8001054 <main+0x114>)
 8001004:	6013      	str	r3, [r2, #0]
		  HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_1);
 8001006:	2100      	movs	r1, #0
 8001008:	480d      	ldr	r0, [pc, #52]	; (8001040 <main+0x100>)
 800100a:	f004 fc27 	bl	800585c <HAL_TIM_PWM_Stop>
		  HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_2);
 800100e:	2104      	movs	r1, #4
 8001010:	480b      	ldr	r0, [pc, #44]	; (8001040 <main+0x100>)
 8001012:	f004 fc23 	bl	800585c <HAL_TIM_PWM_Stop>
		  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001016:	2100      	movs	r1, #0
 8001018:	4808      	ldr	r0, [pc, #32]	; (800103c <main+0xfc>)
 800101a:	f004 fc1f 	bl	800585c <HAL_TIM_PWM_Stop>
		  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 800101e:	2104      	movs	r1, #4
 8001020:	4806      	ldr	r0, [pc, #24]	; (800103c <main+0xfc>)
 8001022:	f004 fc1b 	bl	800585c <HAL_TIM_PWM_Stop>
		  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8001026:	2108      	movs	r1, #8
 8001028:	4804      	ldr	r0, [pc, #16]	; (800103c <main+0xfc>)
 800102a:	f004 fc17 	bl	800585c <HAL_TIM_PWM_Stop>
		  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_4);
 800102e:	210c      	movs	r1, #12
 8001030:	4802      	ldr	r0, [pc, #8]	; (800103c <main+0xfc>)
 8001032:	f004 fc13 	bl	800585c <HAL_TIM_PWM_Stop>
	  current_Tick = HAL_GetTick();
 8001036:	e7b4      	b.n	8000fa2 <main+0x62>
 8001038:	20000000 	.word	0x20000000
 800103c:	200000e4 	.word	0x200000e4
 8001040:	2000017c 	.word	0x2000017c
 8001044:	20000030 	.word	0x20000030
 8001048:	2000031c 	.word	0x2000031c
 800104c:	000f4240 	.word	0x000f4240
 8001050:	20000318 	.word	0x20000318
 8001054:	20000320 	.word	0x20000320

08001058 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b09c      	sub	sp, #112	; 0x70
 800105c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800105e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001062:	2228      	movs	r2, #40	; 0x28
 8001064:	2100      	movs	r1, #0
 8001066:	4618      	mov	r0, r3
 8001068:	f005 fcaa 	bl	80069c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800106c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
 800107a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800107c:	1d3b      	adds	r3, r7, #4
 800107e:	2230      	movs	r2, #48	; 0x30
 8001080:	2100      	movs	r1, #0
 8001082:	4618      	mov	r0, r3
 8001084:	f005 fc9c 	bl	80069c0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001088:	2301      	movs	r3, #1
 800108a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800108c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001090:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8001092:	2301      	movs	r3, #1
 8001094:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001096:	2301      	movs	r3, #1
 8001098:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800109a:	2302      	movs	r3, #2
 800109c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800109e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010a2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL15;
 80010a4:	f44f 1350 	mov.w	r3, #3407872	; 0x340000
 80010a8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010aa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80010ae:	4618      	mov	r0, r3
 80010b0:	f001 ff02 	bl	8002eb8 <HAL_RCC_OscConfig>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <SystemClock_Config+0x66>
  {
    Error_Handler();
 80010ba:	f000 fb4f 	bl	800175c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010be:	230f      	movs	r3, #15
 80010c0:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010c2:	2302      	movs	r3, #2
 80010c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010c6:	2300      	movs	r3, #0
 80010c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010d0:	2300      	movs	r3, #0
 80010d2:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010d4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80010d8:	2102      	movs	r1, #2
 80010da:	4618      	mov	r0, r3
 80010dc:	f002 ff2a 	bl	8003f34 <HAL_RCC_ClockConfig>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <SystemClock_Config+0x92>
  {
    Error_Handler();
 80010e6:	f000 fb39 	bl	800175c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM15;
 80010ea:	f44f 2382 	mov.w	r3, #266240	; 0x41000
 80010ee:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80010f0:	2300      	movs	r3, #0
 80010f2:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLK_HCLK;
 80010f4:	2300      	movs	r3, #0
 80010f6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010f8:	1d3b      	adds	r3, r7, #4
 80010fa:	4618      	mov	r0, r3
 80010fc:	f003 f900 	bl	8004300 <HAL_RCCEx_PeriphCLKConfig>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001106:	f000 fb29 	bl	800175c <Error_Handler>
  }
}
 800110a:	bf00      	nop
 800110c:	3770      	adds	r7, #112	; 0x70
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
	...

08001114 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b086      	sub	sp, #24
 8001118:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800111a:	463b      	mov	r3, r7
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]
 8001124:	60da      	str	r2, [r3, #12]
 8001126:	611a      	str	r2, [r3, #16]
 8001128:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800112a:	4b28      	ldr	r3, [pc, #160]	; (80011cc <MX_ADC1_Init+0xb8>)
 800112c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001130:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001132:	4b26      	ldr	r3, [pc, #152]	; (80011cc <MX_ADC1_Init+0xb8>)
 8001134:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001138:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800113a:	4b24      	ldr	r3, [pc, #144]	; (80011cc <MX_ADC1_Init+0xb8>)
 800113c:	2200      	movs	r2, #0
 800113e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001140:	4b22      	ldr	r3, [pc, #136]	; (80011cc <MX_ADC1_Init+0xb8>)
 8001142:	2200      	movs	r2, #0
 8001144:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001146:	4b21      	ldr	r3, [pc, #132]	; (80011cc <MX_ADC1_Init+0xb8>)
 8001148:	2201      	movs	r2, #1
 800114a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800114c:	4b1f      	ldr	r3, [pc, #124]	; (80011cc <MX_ADC1_Init+0xb8>)
 800114e:	2200      	movs	r2, #0
 8001150:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001154:	4b1d      	ldr	r3, [pc, #116]	; (80011cc <MX_ADC1_Init+0xb8>)
 8001156:	2200      	movs	r2, #0
 8001158:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800115a:	4b1c      	ldr	r3, [pc, #112]	; (80011cc <MX_ADC1_Init+0xb8>)
 800115c:	2201      	movs	r2, #1
 800115e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001160:	4b1a      	ldr	r3, [pc, #104]	; (80011cc <MX_ADC1_Init+0xb8>)
 8001162:	2200      	movs	r2, #0
 8001164:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001166:	4b19      	ldr	r3, [pc, #100]	; (80011cc <MX_ADC1_Init+0xb8>)
 8001168:	2201      	movs	r2, #1
 800116a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800116c:	4b17      	ldr	r3, [pc, #92]	; (80011cc <MX_ADC1_Init+0xb8>)
 800116e:	2200      	movs	r2, #0
 8001170:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001174:	4b15      	ldr	r3, [pc, #84]	; (80011cc <MX_ADC1_Init+0xb8>)
 8001176:	2208      	movs	r2, #8
 8001178:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800117a:	4b14      	ldr	r3, [pc, #80]	; (80011cc <MX_ADC1_Init+0xb8>)
 800117c:	2200      	movs	r2, #0
 800117e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001180:	4b12      	ldr	r3, [pc, #72]	; (80011cc <MX_ADC1_Init+0xb8>)
 8001182:	2200      	movs	r2, #0
 8001184:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001186:	4811      	ldr	r0, [pc, #68]	; (80011cc <MX_ADC1_Init+0xb8>)
 8001188:	f000 fd96 	bl	8001cb8 <HAL_ADC_Init>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_ADC1_Init+0x82>
  {
    Error_Handler();
 8001192:	f000 fae3 	bl	800175c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001196:	230e      	movs	r3, #14
 8001198:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800119a:	2301      	movs	r3, #1
 800119c:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800119e:	2300      	movs	r3, #0
 80011a0:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 80011a2:	2304      	movs	r3, #4
 80011a4:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011a6:	2300      	movs	r3, #0
 80011a8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80011aa:	2300      	movs	r3, #0
 80011ac:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011ae:	463b      	mov	r3, r7
 80011b0:	4619      	mov	r1, r3
 80011b2:	4806      	ldr	r0, [pc, #24]	; (80011cc <MX_ADC1_Init+0xb8>)
 80011b4:	f001 f840 	bl	8002238 <HAL_ADC_ConfigChannel>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80011be:	f000 facd 	bl	800175c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011c2:	bf00      	nop
 80011c4:	3718      	adds	r7, #24
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20000030 	.word	0x20000030

080011d0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80011d4:	4b1b      	ldr	r3, [pc, #108]	; (8001244 <MX_SPI3_Init+0x74>)
 80011d6:	4a1c      	ldr	r2, [pc, #112]	; (8001248 <MX_SPI3_Init+0x78>)
 80011d8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80011da:	4b1a      	ldr	r3, [pc, #104]	; (8001244 <MX_SPI3_Init+0x74>)
 80011dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011e0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80011e2:	4b18      	ldr	r3, [pc, #96]	; (8001244 <MX_SPI3_Init+0x74>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80011e8:	4b16      	ldr	r3, [pc, #88]	; (8001244 <MX_SPI3_Init+0x74>)
 80011ea:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80011ee:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011f0:	4b14      	ldr	r3, [pc, #80]	; (8001244 <MX_SPI3_Init+0x74>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011f6:	4b13      	ldr	r3, [pc, #76]	; (8001244 <MX_SPI3_Init+0x74>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80011fc:	4b11      	ldr	r3, [pc, #68]	; (8001244 <MX_SPI3_Init+0x74>)
 80011fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001202:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001204:	4b0f      	ldr	r3, [pc, #60]	; (8001244 <MX_SPI3_Init+0x74>)
 8001206:	2200      	movs	r2, #0
 8001208:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800120a:	4b0e      	ldr	r3, [pc, #56]	; (8001244 <MX_SPI3_Init+0x74>)
 800120c:	2200      	movs	r2, #0
 800120e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001210:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <MX_SPI3_Init+0x74>)
 8001212:	2200      	movs	r2, #0
 8001214:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001216:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <MX_SPI3_Init+0x74>)
 8001218:	2200      	movs	r2, #0
 800121a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800121c:	4b09      	ldr	r3, [pc, #36]	; (8001244 <MX_SPI3_Init+0x74>)
 800121e:	2207      	movs	r2, #7
 8001220:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001222:	4b08      	ldr	r3, [pc, #32]	; (8001244 <MX_SPI3_Init+0x74>)
 8001224:	2200      	movs	r2, #0
 8001226:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001228:	4b06      	ldr	r3, [pc, #24]	; (8001244 <MX_SPI3_Init+0x74>)
 800122a:	2208      	movs	r2, #8
 800122c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800122e:	4805      	ldr	r0, [pc, #20]	; (8001244 <MX_SPI3_Init+0x74>)
 8001230:	f003 f9ea 	bl	8004608 <HAL_SPI_Init>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800123a:	f000 fa8f 	bl	800175c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	20000080 	.word	0x20000080
 8001248:	40003c00 	.word	0x40003c00

0800124c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b09a      	sub	sp, #104	; 0x68
 8001250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001252:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	605a      	str	r2, [r3, #4]
 800125c:	609a      	str	r2, [r3, #8]
 800125e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001260:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800126c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	605a      	str	r2, [r3, #4]
 8001276:	609a      	str	r2, [r3, #8]
 8001278:	60da      	str	r2, [r3, #12]
 800127a:	611a      	str	r2, [r3, #16]
 800127c:	615a      	str	r2, [r3, #20]
 800127e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001280:	1d3b      	adds	r3, r7, #4
 8001282:	222c      	movs	r2, #44	; 0x2c
 8001284:	2100      	movs	r1, #0
 8001286:	4618      	mov	r0, r3
 8001288:	f005 fb9a 	bl	80069c0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800128c:	4b55      	ldr	r3, [pc, #340]	; (80013e4 <MX_TIM1_Init+0x198>)
 800128e:	4a56      	ldr	r2, [pc, #344]	; (80013e8 <MX_TIM1_Init+0x19c>)
 8001290:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 19;
 8001292:	4b54      	ldr	r3, [pc, #336]	; (80013e4 <MX_TIM1_Init+0x198>)
 8001294:	2213      	movs	r2, #19
 8001296:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001298:	4b52      	ldr	r3, [pc, #328]	; (80013e4 <MX_TIM1_Init+0x198>)
 800129a:	2200      	movs	r2, #0
 800129c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 59999;
 800129e:	4b51      	ldr	r3, [pc, #324]	; (80013e4 <MX_TIM1_Init+0x198>)
 80012a0:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80012a4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012a6:	4b4f      	ldr	r3, [pc, #316]	; (80013e4 <MX_TIM1_Init+0x198>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012ac:	4b4d      	ldr	r3, [pc, #308]	; (80013e4 <MX_TIM1_Init+0x198>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012b2:	4b4c      	ldr	r3, [pc, #304]	; (80013e4 <MX_TIM1_Init+0x198>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012b8:	484a      	ldr	r0, [pc, #296]	; (80013e4 <MX_TIM1_Init+0x198>)
 80012ba:	f004 f8db 	bl	8005474 <HAL_TIM_Base_Init>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80012c4:	f000 fa4a 	bl	800175c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012cc:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012ce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80012d2:	4619      	mov	r1, r3
 80012d4:	4843      	ldr	r0, [pc, #268]	; (80013e4 <MX_TIM1_Init+0x198>)
 80012d6:	f004 fd83 	bl	8005de0 <HAL_TIM_ConfigClockSource>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80012e0:	f000 fa3c 	bl	800175c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80012e4:	483f      	ldr	r0, [pc, #252]	; (80013e4 <MX_TIM1_Init+0x198>)
 80012e6:	f004 f971 	bl	80055cc <HAL_TIM_PWM_Init>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80012f0:	f000 fa34 	bl	800175c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012f4:	2300      	movs	r3, #0
 80012f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80012f8:	2300      	movs	r3, #0
 80012fa:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012fc:	2300      	movs	r3, #0
 80012fe:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001300:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001304:	4619      	mov	r1, r3
 8001306:	4837      	ldr	r0, [pc, #220]	; (80013e4 <MX_TIM1_Init+0x198>)
 8001308:	f005 fa3a 	bl	8006780 <HAL_TIMEx_MasterConfigSynchronization>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001312:	f000 fa23 	bl	800175c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001316:	2360      	movs	r3, #96	; 0x60
 8001318:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800131a:	2300      	movs	r3, #0
 800131c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800131e:	2302      	movs	r3, #2
 8001320:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001322:	2300      	movs	r3, #0
 8001324:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001326:	2304      	movs	r3, #4
 8001328:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800132a:	2300      	movs	r3, #0
 800132c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800132e:	2300      	movs	r3, #0
 8001330:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001332:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001336:	2200      	movs	r2, #0
 8001338:	4619      	mov	r1, r3
 800133a:	482a      	ldr	r0, [pc, #168]	; (80013e4 <MX_TIM1_Init+0x198>)
 800133c:	f004 fc3c 	bl	8005bb8 <HAL_TIM_PWM_ConfigChannel>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001346:	f000 fa09 	bl	800175c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800134a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800134e:	2204      	movs	r2, #4
 8001350:	4619      	mov	r1, r3
 8001352:	4824      	ldr	r0, [pc, #144]	; (80013e4 <MX_TIM1_Init+0x198>)
 8001354:	f004 fc30 	bl	8005bb8 <HAL_TIM_PWM_ConfigChannel>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800135e:	f000 f9fd 	bl	800175c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001362:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001366:	2208      	movs	r2, #8
 8001368:	4619      	mov	r1, r3
 800136a:	481e      	ldr	r0, [pc, #120]	; (80013e4 <MX_TIM1_Init+0x198>)
 800136c:	f004 fc24 	bl	8005bb8 <HAL_TIM_PWM_ConfigChannel>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8001376:	f000 f9f1 	bl	800175c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800137a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800137e:	220c      	movs	r2, #12
 8001380:	4619      	mov	r1, r3
 8001382:	4818      	ldr	r0, [pc, #96]	; (80013e4 <MX_TIM1_Init+0x198>)
 8001384:	f004 fc18 	bl	8005bb8 <HAL_TIM_PWM_ConfigChannel>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 800138e:	f000 f9e5 	bl	800175c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001392:	2300      	movs	r3, #0
 8001394:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001396:	2300      	movs	r3, #0
 8001398:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800139a:	2300      	movs	r3, #0
 800139c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800139e:	2300      	movs	r3, #0
 80013a0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013a2:	2300      	movs	r3, #0
 80013a4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013aa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80013ac:	2300      	movs	r3, #0
 80013ae:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80013b0:	2300      	movs	r3, #0
 80013b2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80013b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80013b8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80013ba:	2300      	movs	r3, #0
 80013bc:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013be:	2300      	movs	r3, #0
 80013c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80013c2:	1d3b      	adds	r3, r7, #4
 80013c4:	4619      	mov	r1, r3
 80013c6:	4807      	ldr	r0, [pc, #28]	; (80013e4 <MX_TIM1_Init+0x198>)
 80013c8:	f005 fa40 	bl	800684c <HAL_TIMEx_ConfigBreakDeadTime>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 80013d2:	f000 f9c3 	bl	800175c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80013d6:	4803      	ldr	r0, [pc, #12]	; (80013e4 <MX_TIM1_Init+0x198>)
 80013d8:	f000 fac8 	bl	800196c <HAL_TIM_MspPostInit>

}
 80013dc:	bf00      	nop
 80013de:	3768      	adds	r7, #104	; 0x68
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	200000e4 	.word	0x200000e4
 80013e8:	40012c00 	.word	0x40012c00

080013ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b08e      	sub	sp, #56	; 0x38
 80013f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	605a      	str	r2, [r3, #4]
 80013fc:	609a      	str	r2, [r3, #8]
 80013fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001400:	f107 031c 	add.w	r3, r7, #28
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800140c:	463b      	mov	r3, r7
 800140e:	2200      	movs	r2, #0
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	605a      	str	r2, [r3, #4]
 8001414:	609a      	str	r2, [r3, #8]
 8001416:	60da      	str	r2, [r3, #12]
 8001418:	611a      	str	r2, [r3, #16]
 800141a:	615a      	str	r2, [r3, #20]
 800141c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800141e:	4b2d      	ldr	r3, [pc, #180]	; (80014d4 <MX_TIM2_Init+0xe8>)
 8001420:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001424:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001426:	4b2b      	ldr	r3, [pc, #172]	; (80014d4 <MX_TIM2_Init+0xe8>)
 8001428:	2200      	movs	r2, #0
 800142a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800142c:	4b29      	ldr	r3, [pc, #164]	; (80014d4 <MX_TIM2_Init+0xe8>)
 800142e:	2200      	movs	r2, #0
 8001430:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 599;
 8001432:	4b28      	ldr	r3, [pc, #160]	; (80014d4 <MX_TIM2_Init+0xe8>)
 8001434:	f240 2257 	movw	r2, #599	; 0x257
 8001438:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800143a:	4b26      	ldr	r3, [pc, #152]	; (80014d4 <MX_TIM2_Init+0xe8>)
 800143c:	2200      	movs	r2, #0
 800143e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001440:	4b24      	ldr	r3, [pc, #144]	; (80014d4 <MX_TIM2_Init+0xe8>)
 8001442:	2200      	movs	r2, #0
 8001444:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001446:	4823      	ldr	r0, [pc, #140]	; (80014d4 <MX_TIM2_Init+0xe8>)
 8001448:	f004 f814 	bl	8005474 <HAL_TIM_Base_Init>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001452:	f000 f983 	bl	800175c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001456:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800145a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800145c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001460:	4619      	mov	r1, r3
 8001462:	481c      	ldr	r0, [pc, #112]	; (80014d4 <MX_TIM2_Init+0xe8>)
 8001464:	f004 fcbc 	bl	8005de0 <HAL_TIM_ConfigClockSource>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800146e:	f000 f975 	bl	800175c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001472:	4818      	ldr	r0, [pc, #96]	; (80014d4 <MX_TIM2_Init+0xe8>)
 8001474:	f004 f8aa 	bl	80055cc <HAL_TIM_PWM_Init>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800147e:	f000 f96d 	bl	800175c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001482:	2300      	movs	r3, #0
 8001484:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001486:	2300      	movs	r3, #0
 8001488:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800148a:	f107 031c 	add.w	r3, r7, #28
 800148e:	4619      	mov	r1, r3
 8001490:	4810      	ldr	r0, [pc, #64]	; (80014d4 <MX_TIM2_Init+0xe8>)
 8001492:	f005 f975 	bl	8006780 <HAL_TIMEx_MasterConfigSynchronization>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800149c:	f000 f95e 	bl	800175c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014a0:	2360      	movs	r3, #96	; 0x60
 80014a2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80014a4:	2300      	movs	r3, #0
 80014a6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80014a8:	2302      	movs	r3, #2
 80014aa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014ac:	2300      	movs	r3, #0
 80014ae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014b0:	463b      	mov	r3, r7
 80014b2:	2200      	movs	r2, #0
 80014b4:	4619      	mov	r1, r3
 80014b6:	4807      	ldr	r0, [pc, #28]	; (80014d4 <MX_TIM2_Init+0xe8>)
 80014b8:	f004 fb7e 	bl	8005bb8 <HAL_TIM_PWM_ConfigChannel>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80014c2:	f000 f94b 	bl	800175c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80014c6:	4803      	ldr	r0, [pc, #12]	; (80014d4 <MX_TIM2_Init+0xe8>)
 80014c8:	f000 fa50 	bl	800196c <HAL_TIM_MspPostInit>

}
 80014cc:	bf00      	nop
 80014ce:	3738      	adds	r7, #56	; 0x38
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	20000130 	.word	0x20000130

080014d8 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b09a      	sub	sp, #104	; 0x68
 80014dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014de:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]
 80014e6:	605a      	str	r2, [r3, #4]
 80014e8:	609a      	str	r2, [r3, #8]
 80014ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014ec:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	605a      	str	r2, [r3, #4]
 80014f6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014f8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	60da      	str	r2, [r3, #12]
 8001506:	611a      	str	r2, [r3, #16]
 8001508:	615a      	str	r2, [r3, #20]
 800150a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800150c:	1d3b      	adds	r3, r7, #4
 800150e:	222c      	movs	r2, #44	; 0x2c
 8001510:	2100      	movs	r1, #0
 8001512:	4618      	mov	r0, r3
 8001514:	f005 fa54 	bl	80069c0 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001518:	4b45      	ldr	r3, [pc, #276]	; (8001630 <MX_TIM15_Init+0x158>)
 800151a:	4a46      	ldr	r2, [pc, #280]	; (8001634 <MX_TIM15_Init+0x15c>)
 800151c:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 800151e:	4b44      	ldr	r3, [pc, #272]	; (8001630 <MX_TIM15_Init+0x158>)
 8001520:	2200      	movs	r2, #0
 8001522:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001524:	4b42      	ldr	r3, [pc, #264]	; (8001630 <MX_TIM15_Init+0x158>)
 8001526:	2200      	movs	r2, #0
 8001528:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 2999;
 800152a:	4b41      	ldr	r3, [pc, #260]	; (8001630 <MX_TIM15_Init+0x158>)
 800152c:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001530:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001532:	4b3f      	ldr	r3, [pc, #252]	; (8001630 <MX_TIM15_Init+0x158>)
 8001534:	2200      	movs	r2, #0
 8001536:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001538:	4b3d      	ldr	r3, [pc, #244]	; (8001630 <MX_TIM15_Init+0x158>)
 800153a:	2200      	movs	r2, #0
 800153c:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800153e:	4b3c      	ldr	r3, [pc, #240]	; (8001630 <MX_TIM15_Init+0x158>)
 8001540:	2200      	movs	r2, #0
 8001542:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001544:	483a      	ldr	r0, [pc, #232]	; (8001630 <MX_TIM15_Init+0x158>)
 8001546:	f003 ff95 	bl	8005474 <HAL_TIM_Base_Init>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8001550:	f000 f904 	bl	800175c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001554:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001558:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800155a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800155e:	4619      	mov	r1, r3
 8001560:	4833      	ldr	r0, [pc, #204]	; (8001630 <MX_TIM15_Init+0x158>)
 8001562:	f004 fc3d 	bl	8005de0 <HAL_TIM_ConfigClockSource>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 800156c:	f000 f8f6 	bl	800175c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001570:	482f      	ldr	r0, [pc, #188]	; (8001630 <MX_TIM15_Init+0x158>)
 8001572:	f004 f82b 	bl	80055cc <HAL_TIM_PWM_Init>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d001      	beq.n	8001580 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 800157c:	f000 f8ee 	bl	800175c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001580:	2300      	movs	r3, #0
 8001582:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001584:	2300      	movs	r3, #0
 8001586:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001588:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800158c:	4619      	mov	r1, r3
 800158e:	4828      	ldr	r0, [pc, #160]	; (8001630 <MX_TIM15_Init+0x158>)
 8001590:	f005 f8f6 	bl	8006780 <HAL_TIMEx_MasterConfigSynchronization>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 800159a:	f000 f8df 	bl	800175c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800159e:	2360      	movs	r3, #96	; 0x60
 80015a0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80015a2:	2300      	movs	r3, #0
 80015a4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015a6:	2300      	movs	r3, #0
 80015a8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015aa:	2300      	movs	r3, #0
 80015ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80015ae:	2304      	movs	r3, #4
 80015b0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015b2:	2300      	movs	r3, #0
 80015b4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015b6:	2300      	movs	r3, #0
 80015b8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015be:	2200      	movs	r2, #0
 80015c0:	4619      	mov	r1, r3
 80015c2:	481b      	ldr	r0, [pc, #108]	; (8001630 <MX_TIM15_Init+0x158>)
 80015c4:	f004 faf8 	bl	8005bb8 <HAL_TIM_PWM_ConfigChannel>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_TIM15_Init+0xfa>
  {
    Error_Handler();
 80015ce:	f000 f8c5 	bl	800175c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015d6:	2204      	movs	r2, #4
 80015d8:	4619      	mov	r1, r3
 80015da:	4815      	ldr	r0, [pc, #84]	; (8001630 <MX_TIM15_Init+0x158>)
 80015dc:	f004 faec 	bl	8005bb8 <HAL_TIM_PWM_ConfigChannel>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_TIM15_Init+0x112>
  {
    Error_Handler();
 80015e6:	f000 f8b9 	bl	800175c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015ea:	2300      	movs	r3, #0
 80015ec:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015ee:	2300      	movs	r3, #0
 80015f0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015f2:	2300      	movs	r3, #0
 80015f4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015f6:	2300      	movs	r3, #0
 80015f8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015fa:	2300      	movs	r3, #0
 80015fc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001602:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001604:	2300      	movs	r3, #0
 8001606:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001608:	2300      	movs	r3, #0
 800160a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800160c:	1d3b      	adds	r3, r7, #4
 800160e:	4619      	mov	r1, r3
 8001610:	4807      	ldr	r0, [pc, #28]	; (8001630 <MX_TIM15_Init+0x158>)
 8001612:	f005 f91b 	bl	800684c <HAL_TIMEx_ConfigBreakDeadTime>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <MX_TIM15_Init+0x148>
  {
    Error_Handler();
 800161c:	f000 f89e 	bl	800175c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001620:	4803      	ldr	r0, [pc, #12]	; (8001630 <MX_TIM15_Init+0x158>)
 8001622:	f000 f9a3 	bl	800196c <HAL_TIM_MspPostInit>

}
 8001626:	bf00      	nop
 8001628:	3768      	adds	r7, #104	; 0x68
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	2000017c 	.word	0x2000017c
 8001634:	40014000 	.word	0x40014000

08001638 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b08a      	sub	sp, #40	; 0x28
 800163c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163e:	f107 0314 	add.w	r3, r7, #20
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	605a      	str	r2, [r3, #4]
 8001648:	609a      	str	r2, [r3, #8]
 800164a:	60da      	str	r2, [r3, #12]
 800164c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800164e:	4b40      	ldr	r3, [pc, #256]	; (8001750 <MX_GPIO_Init+0x118>)
 8001650:	695b      	ldr	r3, [r3, #20]
 8001652:	4a3f      	ldr	r2, [pc, #252]	; (8001750 <MX_GPIO_Init+0x118>)
 8001654:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001658:	6153      	str	r3, [r2, #20]
 800165a:	4b3d      	ldr	r3, [pc, #244]	; (8001750 <MX_GPIO_Init+0x118>)
 800165c:	695b      	ldr	r3, [r3, #20]
 800165e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001662:	613b      	str	r3, [r7, #16]
 8001664:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001666:	4b3a      	ldr	r3, [pc, #232]	; (8001750 <MX_GPIO_Init+0x118>)
 8001668:	695b      	ldr	r3, [r3, #20]
 800166a:	4a39      	ldr	r2, [pc, #228]	; (8001750 <MX_GPIO_Init+0x118>)
 800166c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001670:	6153      	str	r3, [r2, #20]
 8001672:	4b37      	ldr	r3, [pc, #220]	; (8001750 <MX_GPIO_Init+0x118>)
 8001674:	695b      	ldr	r3, [r3, #20]
 8001676:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800167e:	4b34      	ldr	r3, [pc, #208]	; (8001750 <MX_GPIO_Init+0x118>)
 8001680:	695b      	ldr	r3, [r3, #20]
 8001682:	4a33      	ldr	r2, [pc, #204]	; (8001750 <MX_GPIO_Init+0x118>)
 8001684:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001688:	6153      	str	r3, [r2, #20]
 800168a:	4b31      	ldr	r3, [pc, #196]	; (8001750 <MX_GPIO_Init+0x118>)
 800168c:	695b      	ldr	r3, [r3, #20]
 800168e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001692:	60bb      	str	r3, [r7, #8]
 8001694:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001696:	4b2e      	ldr	r3, [pc, #184]	; (8001750 <MX_GPIO_Init+0x118>)
 8001698:	695b      	ldr	r3, [r3, #20]
 800169a:	4a2d      	ldr	r2, [pc, #180]	; (8001750 <MX_GPIO_Init+0x118>)
 800169c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016a0:	6153      	str	r3, [r2, #20]
 80016a2:	4b2b      	ldr	r3, [pc, #172]	; (8001750 <MX_GPIO_Init+0x118>)
 80016a4:	695b      	ldr	r3, [r3, #20]
 80016a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016aa:	607b      	str	r3, [r7, #4]
 80016ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IN10_Pin|IN20_Pin, GPIO_PIN_RESET);
 80016ae:	2200      	movs	r2, #0
 80016b0:	2150      	movs	r1, #80	; 0x50
 80016b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016b6:	f001 fbc3 	bl	8002e40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IN11_Pin|IN21_Pin|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80016ba:	2200      	movs	r2, #0
 80016bc:	21c5      	movs	r1, #197	; 0xc5
 80016be:	4825      	ldr	r0, [pc, #148]	; (8001754 <MX_GPIO_Init+0x11c>)
 80016c0:	f001 fbbe 	bl	8002e40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80016c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016ca:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80016ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d0:	2300      	movs	r3, #0
 80016d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016d4:	f107 0314 	add.w	r3, r7, #20
 80016d8:	4619      	mov	r1, r3
 80016da:	481f      	ldr	r0, [pc, #124]	; (8001758 <MX_GPIO_Init+0x120>)
 80016dc:	f001 fa3e 	bl	8002b5c <HAL_GPIO_Init>

  /*Configure GPIO pins : IN10_Pin IN20_Pin */
  GPIO_InitStruct.Pin = IN10_Pin|IN20_Pin;
 80016e0:	2350      	movs	r3, #80	; 0x50
 80016e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e4:	2301      	movs	r3, #1
 80016e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e8:	2300      	movs	r3, #0
 80016ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ec:	2300      	movs	r3, #0
 80016ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f0:	f107 0314 	add.w	r3, r7, #20
 80016f4:	4619      	mov	r1, r3
 80016f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016fa:	f001 fa2f 	bl	8002b5c <HAL_GPIO_Init>

  /*Configure GPIO pins : IN11_Pin IN21_Pin PB6 PB7 */
  GPIO_InitStruct.Pin = IN11_Pin|IN21_Pin|GPIO_PIN_6|GPIO_PIN_7;
 80016fe:	23c5      	movs	r3, #197	; 0xc5
 8001700:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001702:	2301      	movs	r3, #1
 8001704:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001706:	2300      	movs	r3, #0
 8001708:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170a:	2300      	movs	r3, #0
 800170c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800170e:	f107 0314 	add.w	r3, r7, #20
 8001712:	4619      	mov	r1, r3
 8001714:	480f      	ldr	r0, [pc, #60]	; (8001754 <MX_GPIO_Init+0x11c>)
 8001716:	f001 fa21 	bl	8002b5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800171a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800171e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001720:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001724:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001726:	2300      	movs	r3, #0
 8001728:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800172a:	f107 0314 	add.w	r3, r7, #20
 800172e:	4619      	mov	r1, r3
 8001730:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001734:	f001 fa12 	bl	8002b5c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001738:	2200      	movs	r2, #0
 800173a:	2100      	movs	r1, #0
 800173c:	2028      	movs	r0, #40	; 0x28
 800173e:	f001 f9d6 	bl	8002aee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001742:	2028      	movs	r0, #40	; 0x28
 8001744:	f001 f9ef 	bl	8002b26 <HAL_NVIC_EnableIRQ>

}
 8001748:	bf00      	nop
 800174a:	3728      	adds	r7, #40	; 0x28
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	40021000 	.word	0x40021000
 8001754:	48000400 	.word	0x48000400
 8001758:	48000800 	.word	0x48000800

0800175c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001760:	b672      	cpsid	i
}
 8001762:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001764:	e7fe      	b.n	8001764 <Error_Handler+0x8>
	...

08001768 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800176e:	4b0f      	ldr	r3, [pc, #60]	; (80017ac <HAL_MspInit+0x44>)
 8001770:	699b      	ldr	r3, [r3, #24]
 8001772:	4a0e      	ldr	r2, [pc, #56]	; (80017ac <HAL_MspInit+0x44>)
 8001774:	f043 0301 	orr.w	r3, r3, #1
 8001778:	6193      	str	r3, [r2, #24]
 800177a:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <HAL_MspInit+0x44>)
 800177c:	699b      	ldr	r3, [r3, #24]
 800177e:	f003 0301 	and.w	r3, r3, #1
 8001782:	607b      	str	r3, [r7, #4]
 8001784:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001786:	4b09      	ldr	r3, [pc, #36]	; (80017ac <HAL_MspInit+0x44>)
 8001788:	69db      	ldr	r3, [r3, #28]
 800178a:	4a08      	ldr	r2, [pc, #32]	; (80017ac <HAL_MspInit+0x44>)
 800178c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001790:	61d3      	str	r3, [r2, #28]
 8001792:	4b06      	ldr	r3, [pc, #24]	; (80017ac <HAL_MspInit+0x44>)
 8001794:	69db      	ldr	r3, [r3, #28]
 8001796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800179a:	603b      	str	r3, [r7, #0]
 800179c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800179e:	bf00      	nop
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	40021000 	.word	0x40021000

080017b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b08a      	sub	sp, #40	; 0x28
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b8:	f107 0314 	add.w	r3, r7, #20
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	605a      	str	r2, [r3, #4]
 80017c2:	609a      	str	r2, [r3, #8]
 80017c4:	60da      	str	r2, [r3, #12]
 80017c6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017d0:	d124      	bne.n	800181c <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80017d2:	4b14      	ldr	r3, [pc, #80]	; (8001824 <HAL_ADC_MspInit+0x74>)
 80017d4:	695b      	ldr	r3, [r3, #20]
 80017d6:	4a13      	ldr	r2, [pc, #76]	; (8001824 <HAL_ADC_MspInit+0x74>)
 80017d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017dc:	6153      	str	r3, [r2, #20]
 80017de:	4b11      	ldr	r3, [pc, #68]	; (8001824 <HAL_ADC_MspInit+0x74>)
 80017e0:	695b      	ldr	r3, [r3, #20]
 80017e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e6:	613b      	str	r3, [r7, #16]
 80017e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ea:	4b0e      	ldr	r3, [pc, #56]	; (8001824 <HAL_ADC_MspInit+0x74>)
 80017ec:	695b      	ldr	r3, [r3, #20]
 80017ee:	4a0d      	ldr	r2, [pc, #52]	; (8001824 <HAL_ADC_MspInit+0x74>)
 80017f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017f4:	6153      	str	r3, [r2, #20]
 80017f6:	4b0b      	ldr	r3, [pc, #44]	; (8001824 <HAL_ADC_MspInit+0x74>)
 80017f8:	695b      	ldr	r3, [r3, #20]
 80017fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB11     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = Battery_Pin;
 8001802:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001806:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001808:	2303      	movs	r3, #3
 800180a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180c:	2300      	movs	r3, #0
 800180e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Battery_GPIO_Port, &GPIO_InitStruct);
 8001810:	f107 0314 	add.w	r3, r7, #20
 8001814:	4619      	mov	r1, r3
 8001816:	4804      	ldr	r0, [pc, #16]	; (8001828 <HAL_ADC_MspInit+0x78>)
 8001818:	f001 f9a0 	bl	8002b5c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800181c:	bf00      	nop
 800181e:	3728      	adds	r7, #40	; 0x28
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	40021000 	.word	0x40021000
 8001828:	48000400 	.word	0x48000400

0800182c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b08a      	sub	sp, #40	; 0x28
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001834:	f107 0314 	add.w	r3, r7, #20
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	605a      	str	r2, [r3, #4]
 800183e:	609a      	str	r2, [r3, #8]
 8001840:	60da      	str	r2, [r3, #12]
 8001842:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a17      	ldr	r2, [pc, #92]	; (80018a8 <HAL_SPI_MspInit+0x7c>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d127      	bne.n	800189e <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800184e:	4b17      	ldr	r3, [pc, #92]	; (80018ac <HAL_SPI_MspInit+0x80>)
 8001850:	69db      	ldr	r3, [r3, #28]
 8001852:	4a16      	ldr	r2, [pc, #88]	; (80018ac <HAL_SPI_MspInit+0x80>)
 8001854:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001858:	61d3      	str	r3, [r2, #28]
 800185a:	4b14      	ldr	r3, [pc, #80]	; (80018ac <HAL_SPI_MspInit+0x80>)
 800185c:	69db      	ldr	r3, [r3, #28]
 800185e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001862:	613b      	str	r3, [r7, #16]
 8001864:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001866:	4b11      	ldr	r3, [pc, #68]	; (80018ac <HAL_SPI_MspInit+0x80>)
 8001868:	695b      	ldr	r3, [r3, #20]
 800186a:	4a10      	ldr	r2, [pc, #64]	; (80018ac <HAL_SPI_MspInit+0x80>)
 800186c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001870:	6153      	str	r3, [r2, #20]
 8001872:	4b0e      	ldr	r3, [pc, #56]	; (80018ac <HAL_SPI_MspInit+0x80>)
 8001874:	695b      	ldr	r3, [r3, #20]
 8001876:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800187a:	60fb      	str	r3, [r7, #12]
 800187c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800187e:	2338      	movs	r3, #56	; 0x38
 8001880:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001882:	2302      	movs	r3, #2
 8001884:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001886:	2300      	movs	r3, #0
 8001888:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800188a:	2303      	movs	r3, #3
 800188c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800188e:	2306      	movs	r3, #6
 8001890:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001892:	f107 0314 	add.w	r3, r7, #20
 8001896:	4619      	mov	r1, r3
 8001898:	4805      	ldr	r0, [pc, #20]	; (80018b0 <HAL_SPI_MspInit+0x84>)
 800189a:	f001 f95f 	bl	8002b5c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800189e:	bf00      	nop
 80018a0:	3728      	adds	r7, #40	; 0x28
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	40003c00 	.word	0x40003c00
 80018ac:	40021000 	.word	0x40021000
 80018b0:	48000400 	.word	0x48000400

080018b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b086      	sub	sp, #24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a27      	ldr	r2, [pc, #156]	; (8001960 <HAL_TIM_Base_MspInit+0xac>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d114      	bne.n	80018f0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018c6:	4b27      	ldr	r3, [pc, #156]	; (8001964 <HAL_TIM_Base_MspInit+0xb0>)
 80018c8:	699b      	ldr	r3, [r3, #24]
 80018ca:	4a26      	ldr	r2, [pc, #152]	; (8001964 <HAL_TIM_Base_MspInit+0xb0>)
 80018cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80018d0:	6193      	str	r3, [r2, #24]
 80018d2:	4b24      	ldr	r3, [pc, #144]	; (8001964 <HAL_TIM_Base_MspInit+0xb0>)
 80018d4:	699b      	ldr	r3, [r3, #24]
 80018d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018da:	617b      	str	r3, [r7, #20]
 80018dc:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80018de:	2200      	movs	r2, #0
 80018e0:	2100      	movs	r1, #0
 80018e2:	2018      	movs	r0, #24
 80018e4:	f001 f903 	bl	8002aee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80018e8:	2018      	movs	r0, #24
 80018ea:	f001 f91c 	bl	8002b26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80018ee:	e032      	b.n	8001956 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM2)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018f8:	d114      	bne.n	8001924 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018fa:	4b1a      	ldr	r3, [pc, #104]	; (8001964 <HAL_TIM_Base_MspInit+0xb0>)
 80018fc:	69db      	ldr	r3, [r3, #28]
 80018fe:	4a19      	ldr	r2, [pc, #100]	; (8001964 <HAL_TIM_Base_MspInit+0xb0>)
 8001900:	f043 0301 	orr.w	r3, r3, #1
 8001904:	61d3      	str	r3, [r2, #28]
 8001906:	4b17      	ldr	r3, [pc, #92]	; (8001964 <HAL_TIM_Base_MspInit+0xb0>)
 8001908:	69db      	ldr	r3, [r3, #28]
 800190a:	f003 0301 	and.w	r3, r3, #1
 800190e:	613b      	str	r3, [r7, #16]
 8001910:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001912:	2200      	movs	r2, #0
 8001914:	2100      	movs	r1, #0
 8001916:	201c      	movs	r0, #28
 8001918:	f001 f8e9 	bl	8002aee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800191c:	201c      	movs	r0, #28
 800191e:	f001 f902 	bl	8002b26 <HAL_NVIC_EnableIRQ>
}
 8001922:	e018      	b.n	8001956 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM15)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a0f      	ldr	r2, [pc, #60]	; (8001968 <HAL_TIM_Base_MspInit+0xb4>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d113      	bne.n	8001956 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800192e:	4b0d      	ldr	r3, [pc, #52]	; (8001964 <HAL_TIM_Base_MspInit+0xb0>)
 8001930:	699b      	ldr	r3, [r3, #24]
 8001932:	4a0c      	ldr	r2, [pc, #48]	; (8001964 <HAL_TIM_Base_MspInit+0xb0>)
 8001934:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001938:	6193      	str	r3, [r2, #24]
 800193a:	4b0a      	ldr	r3, [pc, #40]	; (8001964 <HAL_TIM_Base_MspInit+0xb0>)
 800193c:	699b      	ldr	r3, [r3, #24]
 800193e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001942:	60fb      	str	r3, [r7, #12]
 8001944:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8001946:	2200      	movs	r2, #0
 8001948:	2100      	movs	r1, #0
 800194a:	2018      	movs	r0, #24
 800194c:	f001 f8cf 	bl	8002aee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001950:	2018      	movs	r0, #24
 8001952:	f001 f8e8 	bl	8002b26 <HAL_NVIC_EnableIRQ>
}
 8001956:	bf00      	nop
 8001958:	3718      	adds	r7, #24
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	40012c00 	.word	0x40012c00
 8001964:	40021000 	.word	0x40021000
 8001968:	40014000 	.word	0x40014000

0800196c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b08a      	sub	sp, #40	; 0x28
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001974:	f107 0314 	add.w	r3, r7, #20
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	605a      	str	r2, [r3, #4]
 800197e:	609a      	str	r2, [r3, #8]
 8001980:	60da      	str	r2, [r3, #12]
 8001982:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a3e      	ldr	r2, [pc, #248]	; (8001a84 <HAL_TIM_MspPostInit+0x118>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d130      	bne.n	80019f0 <HAL_TIM_MspPostInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800198e:	4b3e      	ldr	r3, [pc, #248]	; (8001a88 <HAL_TIM_MspPostInit+0x11c>)
 8001990:	695b      	ldr	r3, [r3, #20]
 8001992:	4a3d      	ldr	r2, [pc, #244]	; (8001a88 <HAL_TIM_MspPostInit+0x11c>)
 8001994:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001998:	6153      	str	r3, [r2, #20]
 800199a:	4b3b      	ldr	r3, [pc, #236]	; (8001a88 <HAL_TIM_MspPostInit+0x11c>)
 800199c:	695b      	ldr	r3, [r3, #20]
 800199e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a2:	613b      	str	r3, [r7, #16]
 80019a4:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = PWM10_Pin|PWM11_Pin|PWM21_Pin;
 80019a6:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80019aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ac:	2302      	movs	r3, #2
 80019ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b0:	2300      	movs	r3, #0
 80019b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b4:	2300      	movs	r3, #0
 80019b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80019b8:	2306      	movs	r3, #6
 80019ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019bc:	f107 0314 	add.w	r3, r7, #20
 80019c0:	4619      	mov	r1, r3
 80019c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019c6:	f001 f8c9 	bl	8002b5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PWM20_Pin;
 80019ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80019ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d0:	2302      	movs	r3, #2
 80019d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d4:	2300      	movs	r3, #0
 80019d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d8:	2300      	movs	r3, #0
 80019da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_TIM1;
 80019dc:	230b      	movs	r3, #11
 80019de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM20_GPIO_Port, &GPIO_InitStruct);
 80019e0:	f107 0314 	add.w	r3, r7, #20
 80019e4:	4619      	mov	r1, r3
 80019e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019ea:	f001 f8b7 	bl	8002b5c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80019ee:	e044      	b.n	8001a7a <HAL_TIM_MspPostInit+0x10e>
  else if(htim->Instance==TIM2)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019f8:	d11d      	bne.n	8001a36 <HAL_TIM_MspPostInit+0xca>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019fa:	4b23      	ldr	r3, [pc, #140]	; (8001a88 <HAL_TIM_MspPostInit+0x11c>)
 80019fc:	695b      	ldr	r3, [r3, #20]
 80019fe:	4a22      	ldr	r2, [pc, #136]	; (8001a88 <HAL_TIM_MspPostInit+0x11c>)
 8001a00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a04:	6153      	str	r3, [r2, #20]
 8001a06:	4b20      	ldr	r3, [pc, #128]	; (8001a88 <HAL_TIM_MspPostInit+0x11c>)
 8001a08:	695b      	ldr	r3, [r3, #20]
 8001a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a0e:	60fb      	str	r3, [r7, #12]
 8001a10:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a12:	2301      	movs	r3, #1
 8001a14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a16:	2302      	movs	r3, #2
 8001a18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a22:	2301      	movs	r3, #1
 8001a24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a26:	f107 0314 	add.w	r3, r7, #20
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a30:	f001 f894 	bl	8002b5c <HAL_GPIO_Init>
}
 8001a34:	e021      	b.n	8001a7a <HAL_TIM_MspPostInit+0x10e>
  else if(htim->Instance==TIM15)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a14      	ldr	r2, [pc, #80]	; (8001a8c <HAL_TIM_MspPostInit+0x120>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d11c      	bne.n	8001a7a <HAL_TIM_MspPostInit+0x10e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a40:	4b11      	ldr	r3, [pc, #68]	; (8001a88 <HAL_TIM_MspPostInit+0x11c>)
 8001a42:	695b      	ldr	r3, [r3, #20]
 8001a44:	4a10      	ldr	r2, [pc, #64]	; (8001a88 <HAL_TIM_MspPostInit+0x11c>)
 8001a46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a4a:	6153      	str	r3, [r2, #20]
 8001a4c:	4b0e      	ldr	r3, [pc, #56]	; (8001a88 <HAL_TIM_MspPostInit+0x11c>)
 8001a4e:	695b      	ldr	r3, [r3, #20]
 8001a50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a54:	60bb      	str	r3, [r7, #8]
 8001a56:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a58:	230c      	movs	r3, #12
 8001a5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a60:	2300      	movs	r3, #0
 8001a62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a64:	2300      	movs	r3, #0
 8001a66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 8001a68:	2309      	movs	r3, #9
 8001a6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a6c:	f107 0314 	add.w	r3, r7, #20
 8001a70:	4619      	mov	r1, r3
 8001a72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a76:	f001 f871 	bl	8002b5c <HAL_GPIO_Init>
}
 8001a7a:	bf00      	nop
 8001a7c:	3728      	adds	r7, #40	; 0x28
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	40012c00 	.word	0x40012c00
 8001a88:	40021000 	.word	0x40021000
 8001a8c:	40014000 	.word	0x40014000

08001a90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a94:	e7fe      	b.n	8001a94 <NMI_Handler+0x4>

08001a96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a96:	b480      	push	{r7}
 8001a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a9a:	e7fe      	b.n	8001a9a <HardFault_Handler+0x4>

08001a9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001aa0:	e7fe      	b.n	8001aa0 <MemManage_Handler+0x4>

08001aa2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aa6:	e7fe      	b.n	8001aa6 <BusFault_Handler+0x4>

08001aa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001aac:	e7fe      	b.n	8001aac <UsageFault_Handler+0x4>

08001aae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ac0:	bf00      	nop
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr

08001aca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001aca:	b480      	push	{r7}
 8001acc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ace:	bf00      	nop
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001adc:	f000 f8a8 	bl	8001c30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ae0:	bf00      	nop
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ae8:	4803      	ldr	r0, [pc, #12]	; (8001af8 <TIM1_BRK_TIM15_IRQHandler+0x14>)
 8001aea:	f003 ff45 	bl	8005978 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8001aee:	4803      	ldr	r0, [pc, #12]	; (8001afc <TIM1_BRK_TIM15_IRQHandler+0x18>)
 8001af0:	f003 ff42 	bl	8005978 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8001af4:	bf00      	nop
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	200000e4 	.word	0x200000e4
 8001afc:	2000017c 	.word	0x2000017c

08001b00 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b04:	4802      	ldr	r0, [pc, #8]	; (8001b10 <TIM2_IRQHandler+0x10>)
 8001b06:	f003 ff37 	bl	8005978 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b0a:	bf00      	nop
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	20000130 	.word	0x20000130

08001b14 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
//	if (__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_13)) {
//		adjustDutyCycle(-1); // Decrease by 10%
//		HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
//	}
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001b18:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001b1c:	f001 f9a8 	bl	8002e70 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001b20:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001b24:	f001 f9a4 	bl	8002e70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b28:	bf00      	nop
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b30:	4b06      	ldr	r3, [pc, #24]	; (8001b4c <SystemInit+0x20>)
 8001b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b36:	4a05      	ldr	r2, [pc, #20]	; (8001b4c <SystemInit+0x20>)
 8001b38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b40:	bf00      	nop
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	e000ed00 	.word	0xe000ed00

08001b50 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001b50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b88 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b54:	f7ff ffea 	bl	8001b2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b58:	480c      	ldr	r0, [pc, #48]	; (8001b8c <LoopForever+0x6>)
  ldr r1, =_edata
 8001b5a:	490d      	ldr	r1, [pc, #52]	; (8001b90 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b5c:	4a0d      	ldr	r2, [pc, #52]	; (8001b94 <LoopForever+0xe>)
  movs r3, #0
 8001b5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b60:	e002      	b.n	8001b68 <LoopCopyDataInit>

08001b62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b66:	3304      	adds	r3, #4

08001b68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b6c:	d3f9      	bcc.n	8001b62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b6e:	4a0a      	ldr	r2, [pc, #40]	; (8001b98 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b70:	4c0a      	ldr	r4, [pc, #40]	; (8001b9c <LoopForever+0x16>)
  movs r3, #0
 8001b72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b74:	e001      	b.n	8001b7a <LoopFillZerobss>

08001b76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b78:	3204      	adds	r2, #4

08001b7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b7c:	d3fb      	bcc.n	8001b76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b7e:	f004 fefb 	bl	8006978 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b82:	f7ff f9dd 	bl	8000f40 <main>

08001b86 <LoopForever>:

LoopForever:
    b LoopForever
 8001b86:	e7fe      	b.n	8001b86 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001b88:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001b8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b90:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001b94:	08006a30 	.word	0x08006a30
  ldr r2, =_sbss
 8001b98:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001b9c:	20000328 	.word	0x20000328

08001ba0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ba0:	e7fe      	b.n	8001ba0 <ADC1_IRQHandler>
	...

08001ba4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ba8:	4b08      	ldr	r3, [pc, #32]	; (8001bcc <HAL_Init+0x28>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a07      	ldr	r2, [pc, #28]	; (8001bcc <HAL_Init+0x28>)
 8001bae:	f043 0310 	orr.w	r3, r3, #16
 8001bb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bb4:	2003      	movs	r0, #3
 8001bb6:	f000 ff8f 	bl	8002ad8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bba:	200f      	movs	r0, #15
 8001bbc:	f000 f808 	bl	8001bd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bc0:	f7ff fdd2 	bl	8001768 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	40022000 	.word	0x40022000

08001bd0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bd8:	4b12      	ldr	r3, [pc, #72]	; (8001c24 <HAL_InitTick+0x54>)
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	4b12      	ldr	r3, [pc, #72]	; (8001c28 <HAL_InitTick+0x58>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	4619      	mov	r1, r3
 8001be2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001be6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f000 ffa7 	bl	8002b42 <HAL_SYSTICK_Config>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e00e      	b.n	8001c1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2b0f      	cmp	r3, #15
 8001c02:	d80a      	bhi.n	8001c1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c04:	2200      	movs	r2, #0
 8001c06:	6879      	ldr	r1, [r7, #4]
 8001c08:	f04f 30ff 	mov.w	r0, #4294967295
 8001c0c:	f000 ff6f 	bl	8002aee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c10:	4a06      	ldr	r2, [pc, #24]	; (8001c2c <HAL_InitTick+0x5c>)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001c16:	2300      	movs	r3, #0
 8001c18:	e000      	b.n	8001c1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3708      	adds	r7, #8
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	20000008 	.word	0x20000008
 8001c28:	20000010 	.word	0x20000010
 8001c2c:	2000000c 	.word	0x2000000c

08001c30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c34:	4b06      	ldr	r3, [pc, #24]	; (8001c50 <HAL_IncTick+0x20>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	461a      	mov	r2, r3
 8001c3a:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <HAL_IncTick+0x24>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4413      	add	r3, r2
 8001c40:	4a04      	ldr	r2, [pc, #16]	; (8001c54 <HAL_IncTick+0x24>)
 8001c42:	6013      	str	r3, [r2, #0]
}
 8001c44:	bf00      	nop
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	20000010 	.word	0x20000010
 8001c54:	20000324 	.word	0x20000324

08001c58 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  return uwTick;  
 8001c5c:	4b03      	ldr	r3, [pc, #12]	; (8001c6c <HAL_GetTick+0x14>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	20000324 	.word	0x20000324

08001c70 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c78:	f7ff ffee 	bl	8001c58 <HAL_GetTick>
 8001c7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c88:	d005      	beq.n	8001c96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c8a:	4b0a      	ldr	r3, [pc, #40]	; (8001cb4 <HAL_Delay+0x44>)
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	461a      	mov	r2, r3
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	4413      	add	r3, r2
 8001c94:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001c96:	bf00      	nop
 8001c98:	f7ff ffde 	bl	8001c58 <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	68fa      	ldr	r2, [r7, #12]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d8f7      	bhi.n	8001c98 <HAL_Delay+0x28>
  {
  }
}
 8001ca8:	bf00      	nop
 8001caa:	bf00      	nop
 8001cac:	3710      	adds	r7, #16
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	20000010 	.word	0x20000010

08001cb8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b09a      	sub	sp, #104	; 0x68
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d101      	bne.n	8001cd8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e169      	b.n	8001fac <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	691b      	ldr	r3, [r3, #16]
 8001cdc:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce2:	f003 0310 	and.w	r3, r3, #16
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d176      	bne.n	8001dd8 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d152      	bne.n	8001d98 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f7ff fd4f 	bl	80017b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d13b      	bne.n	8001d98 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f000 fda3 	bl	800286c <ADC_Disable>
 8001d26:	4603      	mov	r3, r0
 8001d28:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d30:	f003 0310 	and.w	r3, r3, #16
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d12f      	bne.n	8001d98 <HAL_ADC_Init+0xe0>
 8001d38:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d12b      	bne.n	8001d98 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d44:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d48:	f023 0302 	bic.w	r3, r3, #2
 8001d4c:	f043 0202 	orr.w	r2, r3, #2
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	689a      	ldr	r2, [r3, #8]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d62:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	689a      	ldr	r2, [r3, #8]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001d72:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d74:	4b8f      	ldr	r3, [pc, #572]	; (8001fb4 <HAL_ADC_Init+0x2fc>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a8f      	ldr	r2, [pc, #572]	; (8001fb8 <HAL_ADC_Init+0x300>)
 8001d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d7e:	0c9a      	lsrs	r2, r3, #18
 8001d80:	4613      	mov	r3, r2
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	4413      	add	r3, r2
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d8a:	e002      	b.n	8001d92 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d1f9      	bne.n	8001d8c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d007      	beq.n	8001db6 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001db0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001db4:	d110      	bne.n	8001dd8 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dba:	f023 0312 	bic.w	r3, r3, #18
 8001dbe:	f043 0210 	orr.w	r2, r3, #16
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dca:	f043 0201 	orr.w	r2, r3, #1
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ddc:	f003 0310 	and.w	r3, r3, #16
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	f040 80d6 	bne.w	8001f92 <HAL_ADC_Init+0x2da>
 8001de6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	f040 80d1 	bne.w	8001f92 <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	f040 80c9 	bne.w	8001f92 <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e04:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001e08:	f043 0202 	orr.w	r2, r3, #2
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e10:	4b6a      	ldr	r3, [pc, #424]	; (8001fbc <HAL_ADC_Init+0x304>)
 8001e12:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001e14:	2300      	movs	r3, #0
 8001e16:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	f003 0303 	and.w	r3, r3, #3
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d108      	bne.n	8001e38 <HAL_ADC_Init+0x180>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0301 	and.w	r3, r3, #1
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d101      	bne.n	8001e38 <HAL_ADC_Init+0x180>
 8001e34:	2301      	movs	r3, #1
 8001e36:	e000      	b.n	8001e3a <HAL_ADC_Init+0x182>
 8001e38:	2300      	movs	r3, #0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d11c      	bne.n	8001e78 <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001e3e:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d010      	beq.n	8001e66 <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f003 0303 	and.w	r3, r3, #3
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d107      	bne.n	8001e60 <HAL_ADC_Init+0x1a8>
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0301 	and.w	r3, r3, #1
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d101      	bne.n	8001e60 <HAL_ADC_Init+0x1a8>
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e000      	b.n	8001e62 <HAL_ADC_Init+0x1aa>
 8001e60:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d108      	bne.n	8001e78 <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001e66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	431a      	orrs	r2, r3
 8001e74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e76:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	7e5b      	ldrb	r3, [r3, #25]
 8001e7c:	035b      	lsls	r3, r3, #13
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e82:	2a01      	cmp	r2, #1
 8001e84:	d002      	beq.n	8001e8c <HAL_ADC_Init+0x1d4>
 8001e86:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e8a:	e000      	b.n	8001e8e <HAL_ADC_Init+0x1d6>
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	431a      	orrs	r2, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	431a      	orrs	r2, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d11b      	bne.n	8001ee4 <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	7e5b      	ldrb	r3, [r3, #25]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d109      	bne.n	8001ec8 <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb8:	3b01      	subs	r3, #1
 8001eba:	045a      	lsls	r2, r3, #17
 8001ebc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ec4:	663b      	str	r3, [r7, #96]	; 0x60
 8001ec6:	e00d      	b.n	8001ee4 <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ecc:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001ed0:	f043 0220 	orr.w	r2, r3, #32
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001edc:	f043 0201 	orr.w	r2, r3, #1
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d007      	beq.n	8001efc <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	f003 030c 	and.w	r3, r3, #12
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d114      	bne.n	8001f34 <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	6812      	ldr	r2, [r2, #0]
 8001f14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f18:	f023 0302 	bic.w	r3, r3, #2
 8001f1c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	7e1b      	ldrb	r3, [r3, #24]
 8001f22:	039a      	lsls	r2, r3, #14
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001f30:	4313      	orrs	r3, r2
 8001f32:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	68da      	ldr	r2, [r3, #12]
 8001f3a:	4b21      	ldr	r3, [pc, #132]	; (8001fc0 <HAL_ADC_Init+0x308>)
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	6812      	ldr	r2, [r2, #0]
 8001f42:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001f44:	430b      	orrs	r3, r1
 8001f46:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	691b      	ldr	r3, [r3, #16]
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d10c      	bne.n	8001f6a <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f56:	f023 010f 	bic.w	r1, r3, #15
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	69db      	ldr	r3, [r3, #28]
 8001f5e:	1e5a      	subs	r2, r3, #1
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	430a      	orrs	r2, r1
 8001f66:	631a      	str	r2, [r3, #48]	; 0x30
 8001f68:	e007      	b.n	8001f7a <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f022 020f 	bic.w	r2, r2, #15
 8001f78:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f84:	f023 0303 	bic.w	r3, r3, #3
 8001f88:	f043 0201 	orr.w	r2, r3, #1
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	641a      	str	r2, [r3, #64]	; 0x40
 8001f90:	e00a      	b.n	8001fa8 <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f96:	f023 0312 	bic.w	r3, r3, #18
 8001f9a:	f043 0210 	orr.w	r2, r3, #16
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001fa8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3768      	adds	r7, #104	; 0x68
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	20000008 	.word	0x20000008
 8001fb8:	431bde83 	.word	0x431bde83
 8001fbc:	50000300 	.word	0x50000300
 8001fc0:	fff0c007 	.word	0xfff0c007

08001fc4 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	f003 0304 	and.w	r3, r3, #4
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d158      	bne.n	8002090 <HAL_ADC_Start+0xcc>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d101      	bne.n	8001fec <HAL_ADC_Start+0x28>
 8001fe8:	2302      	movs	r3, #2
 8001fea:	e054      	b.n	8002096 <HAL_ADC_Start+0xd2>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f000 fbd5 	bl	80027a4 <ADC_Enable>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001ffe:	7bfb      	ldrb	r3, [r7, #15]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d140      	bne.n	8002086 <HAL_ADC_Start+0xc2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002008:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800200c:	f023 0301 	bic.w	r3, r3, #1
 8002010:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	641a      	str	r2, [r3, #64]	; 0x40
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d007      	beq.n	8002042 <HAL_ADC_Start+0x7e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002036:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800203a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	641a      	str	r2, [r3, #64]	; 0x40
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002046:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800204a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800204e:	d106      	bne.n	800205e <HAL_ADC_Start+0x9a>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002054:	f023 0206 	bic.w	r2, r3, #6
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	645a      	str	r2, [r3, #68]	; 0x44
 800205c:	e002      	b.n	8002064 <HAL_ADC_Start+0xa0>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	221c      	movs	r2, #28
 8002072:	601a      	str	r2, [r3, #0]
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	689a      	ldr	r2, [r3, #8]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f042 0204 	orr.w	r2, r2, #4
 8002082:	609a      	str	r2, [r3, #8]
 8002084:	e006      	b.n	8002094 <HAL_ADC_Start+0xd0>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800208e:	e001      	b.n	8002094 <HAL_ADC_Start+0xd0>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002090:	2302      	movs	r3, #2
 8002092:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002094:	7bfb      	ldrb	r3, [r7, #15]
}
 8002096:	4618      	mov	r0, r3
 8002098:	3710      	adds	r7, #16
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
	...

080020a0 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b086      	sub	sp, #24
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80020aa:	2300      	movs	r3, #0
 80020ac:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	695b      	ldr	r3, [r3, #20]
 80020b2:	2b08      	cmp	r3, #8
 80020b4:	d102      	bne.n	80020bc <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80020b6:	2308      	movs	r3, #8
 80020b8:	617b      	str	r3, [r7, #20]
 80020ba:	e02e      	b.n	800211a <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020bc:	4b56      	ldr	r3, [pc, #344]	; (8002218 <HAL_ADC_PollForConversion+0x178>)
 80020be:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f003 031f 	and.w	r3, r3, #31
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d112      	bne.n	80020f2 <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d11d      	bne.n	8002116 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020de:	f043 0220 	orr.w	r2, r3, #32
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e08d      	b.n	800220e <HAL_ADC_PollForConversion+0x16e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d00b      	beq.n	8002116 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002102:	f043 0220 	orr.w	r2, r3, #32
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e07b      	b.n	800220e <HAL_ADC_PollForConversion+0x16e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8002116:	230c      	movs	r3, #12
 8002118:	617b      	str	r3, [r7, #20]
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	613b      	str	r3, [r7, #16]
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8002122:	f7ff fd99 	bl	8001c58 <HAL_GetTick>
 8002126:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002128:	e021      	b.n	800216e <HAL_ADC_PollForConversion+0xce>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002130:	d01d      	beq.n	800216e <HAL_ADC_PollForConversion+0xce>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d007      	beq.n	8002148 <HAL_ADC_PollForConversion+0xa8>
 8002138:	f7ff fd8e 	bl	8001c58 <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	683a      	ldr	r2, [r7, #0]
 8002144:	429a      	cmp	r2, r3
 8002146:	d212      	bcs.n	800216e <HAL_ADC_PollForConversion+0xce>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	4013      	ands	r3, r2
 8002152:	2b00      	cmp	r3, #0
 8002154:	d10b      	bne.n	800216e <HAL_ADC_PollForConversion+0xce>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215a:	f043 0204 	orr.w	r2, r3, #4
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e04f      	b.n	800220e <HAL_ADC_PollForConversion+0x16e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	4013      	ands	r3, r2
 8002178:	2b00      	cmp	r3, #0
 800217a:	d0d6      	beq.n	800212a <HAL_ADC_PollForConversion+0x8a>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002180:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002192:	2b00      	cmp	r3, #0
 8002194:	d131      	bne.n	80021fa <HAL_ADC_PollForConversion+0x15a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 800219c:	2b00      	cmp	r3, #0
 800219e:	d12c      	bne.n	80021fa <HAL_ADC_PollForConversion+0x15a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0308 	and.w	r3, r3, #8
 80021aa:	2b08      	cmp	r3, #8
 80021ac:	d125      	bne.n	80021fa <HAL_ADC_PollForConversion+0x15a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f003 0304 	and.w	r3, r3, #4
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d112      	bne.n	80021e2 <HAL_ADC_PollForConversion+0x142>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d112      	bne.n	80021fa <HAL_ADC_PollForConversion+0x15a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d8:	f043 0201 	orr.w	r2, r3, #1
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	641a      	str	r2, [r3, #64]	; 0x40
 80021e0:	e00b      	b.n	80021fa <HAL_ADC_PollForConversion+0x15a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e6:	f043 0220 	orr.w	r2, r3, #32
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f2:	f043 0201 	orr.w	r2, r3, #1
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d103      	bne.n	800220c <HAL_ADC_PollForConversion+0x16c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	697a      	ldr	r2, [r7, #20]
 800220a:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	3718      	adds	r7, #24
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	50000300 	.word	0x50000300

0800221c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800222a:	4618      	mov	r0, r3
 800222c:	370c      	adds	r7, #12
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
	...

08002238 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002238:	b480      	push	{r7}
 800223a:	b09b      	sub	sp, #108	; 0x6c
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002242:	2300      	movs	r3, #0
 8002244:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002248:	2300      	movs	r3, #0
 800224a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002252:	2b01      	cmp	r3, #1
 8002254:	d101      	bne.n	800225a <HAL_ADC_ConfigChannel+0x22>
 8002256:	2302      	movs	r3, #2
 8002258:	e299      	b.n	800278e <HAL_ADC_ConfigChannel+0x556>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2201      	movs	r2, #1
 800225e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	f003 0304 	and.w	r3, r3, #4
 800226c:	2b00      	cmp	r3, #0
 800226e:	f040 827d 	bne.w	800276c <HAL_ADC_ConfigChannel+0x534>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	2b04      	cmp	r3, #4
 8002278:	d81c      	bhi.n	80022b4 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685a      	ldr	r2, [r3, #4]
 8002284:	4613      	mov	r3, r2
 8002286:	005b      	lsls	r3, r3, #1
 8002288:	4413      	add	r3, r2
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	461a      	mov	r2, r3
 800228e:	231f      	movs	r3, #31
 8002290:	4093      	lsls	r3, r2
 8002292:	43db      	mvns	r3, r3
 8002294:	4019      	ands	r1, r3
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	6818      	ldr	r0, [r3, #0]
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685a      	ldr	r2, [r3, #4]
 800229e:	4613      	mov	r3, r2
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	4413      	add	r3, r2
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	fa00 f203 	lsl.w	r2, r0, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	430a      	orrs	r2, r1
 80022b0:	631a      	str	r2, [r3, #48]	; 0x30
 80022b2:	e063      	b.n	800237c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	2b09      	cmp	r3, #9
 80022ba:	d81e      	bhi.n	80022fa <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	685a      	ldr	r2, [r3, #4]
 80022c6:	4613      	mov	r3, r2
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	4413      	add	r3, r2
 80022cc:	005b      	lsls	r3, r3, #1
 80022ce:	3b1e      	subs	r3, #30
 80022d0:	221f      	movs	r2, #31
 80022d2:	fa02 f303 	lsl.w	r3, r2, r3
 80022d6:	43db      	mvns	r3, r3
 80022d8:	4019      	ands	r1, r3
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	6818      	ldr	r0, [r3, #0]
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	685a      	ldr	r2, [r3, #4]
 80022e2:	4613      	mov	r3, r2
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	4413      	add	r3, r2
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	3b1e      	subs	r3, #30
 80022ec:	fa00 f203 	lsl.w	r2, r0, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	430a      	orrs	r2, r1
 80022f6:	635a      	str	r2, [r3, #52]	; 0x34
 80022f8:	e040      	b.n	800237c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	2b0e      	cmp	r3, #14
 8002300:	d81e      	bhi.n	8002340 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685a      	ldr	r2, [r3, #4]
 800230c:	4613      	mov	r3, r2
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	4413      	add	r3, r2
 8002312:	005b      	lsls	r3, r3, #1
 8002314:	3b3c      	subs	r3, #60	; 0x3c
 8002316:	221f      	movs	r2, #31
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	43db      	mvns	r3, r3
 800231e:	4019      	ands	r1, r3
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	6818      	ldr	r0, [r3, #0]
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685a      	ldr	r2, [r3, #4]
 8002328:	4613      	mov	r3, r2
 800232a:	005b      	lsls	r3, r3, #1
 800232c:	4413      	add	r3, r2
 800232e:	005b      	lsls	r3, r3, #1
 8002330:	3b3c      	subs	r3, #60	; 0x3c
 8002332:	fa00 f203 	lsl.w	r2, r0, r3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	430a      	orrs	r2, r1
 800233c:	639a      	str	r2, [r3, #56]	; 0x38
 800233e:	e01d      	b.n	800237c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685a      	ldr	r2, [r3, #4]
 800234a:	4613      	mov	r3, r2
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	4413      	add	r3, r2
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	3b5a      	subs	r3, #90	; 0x5a
 8002354:	221f      	movs	r2, #31
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	43db      	mvns	r3, r3
 800235c:	4019      	ands	r1, r3
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	6818      	ldr	r0, [r3, #0]
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	685a      	ldr	r2, [r3, #4]
 8002366:	4613      	mov	r3, r2
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	4413      	add	r3, r2
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	3b5a      	subs	r3, #90	; 0x5a
 8002370:	fa00 f203 	lsl.w	r2, r0, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	430a      	orrs	r2, r1
 800237a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	f003 030c 	and.w	r3, r3, #12
 8002386:	2b00      	cmp	r3, #0
 8002388:	f040 80e5 	bne.w	8002556 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2b09      	cmp	r3, #9
 8002392:	d91c      	bls.n	80023ce <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	6999      	ldr	r1, [r3, #24]
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	4613      	mov	r3, r2
 80023a0:	005b      	lsls	r3, r3, #1
 80023a2:	4413      	add	r3, r2
 80023a4:	3b1e      	subs	r3, #30
 80023a6:	2207      	movs	r2, #7
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	43db      	mvns	r3, r3
 80023ae:	4019      	ands	r1, r3
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	6898      	ldr	r0, [r3, #8]
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	4613      	mov	r3, r2
 80023ba:	005b      	lsls	r3, r3, #1
 80023bc:	4413      	add	r3, r2
 80023be:	3b1e      	subs	r3, #30
 80023c0:	fa00 f203 	lsl.w	r2, r0, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	430a      	orrs	r2, r1
 80023ca:	619a      	str	r2, [r3, #24]
 80023cc:	e019      	b.n	8002402 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	6959      	ldr	r1, [r3, #20]
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	4613      	mov	r3, r2
 80023da:	005b      	lsls	r3, r3, #1
 80023dc:	4413      	add	r3, r2
 80023de:	2207      	movs	r2, #7
 80023e0:	fa02 f303 	lsl.w	r3, r2, r3
 80023e4:	43db      	mvns	r3, r3
 80023e6:	4019      	ands	r1, r3
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	6898      	ldr	r0, [r3, #8]
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	4613      	mov	r3, r2
 80023f2:	005b      	lsls	r3, r3, #1
 80023f4:	4413      	add	r3, r2
 80023f6:	fa00 f203 	lsl.w	r2, r0, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	430a      	orrs	r2, r1
 8002400:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	695a      	ldr	r2, [r3, #20]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	08db      	lsrs	r3, r3, #3
 800240e:	f003 0303 	and.w	r3, r3, #3
 8002412:	005b      	lsls	r3, r3, #1
 8002414:	fa02 f303 	lsl.w	r3, r2, r3
 8002418:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	691b      	ldr	r3, [r3, #16]
 800241e:	3b01      	subs	r3, #1
 8002420:	2b03      	cmp	r3, #3
 8002422:	d84f      	bhi.n	80024c4 <HAL_ADC_ConfigChannel+0x28c>
 8002424:	a201      	add	r2, pc, #4	; (adr r2, 800242c <HAL_ADC_ConfigChannel+0x1f4>)
 8002426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800242a:	bf00      	nop
 800242c:	0800243d 	.word	0x0800243d
 8002430:	0800245f 	.word	0x0800245f
 8002434:	08002481 	.word	0x08002481
 8002438:	080024a3 	.word	0x080024a3
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002442:	4b99      	ldr	r3, [pc, #612]	; (80026a8 <HAL_ADC_ConfigChannel+0x470>)
 8002444:	4013      	ands	r3, r2
 8002446:	683a      	ldr	r2, [r7, #0]
 8002448:	6812      	ldr	r2, [r2, #0]
 800244a:	0691      	lsls	r1, r2, #26
 800244c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800244e:	430a      	orrs	r2, r1
 8002450:	431a      	orrs	r2, r3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800245a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800245c:	e07e      	b.n	800255c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002464:	4b90      	ldr	r3, [pc, #576]	; (80026a8 <HAL_ADC_ConfigChannel+0x470>)
 8002466:	4013      	ands	r3, r2
 8002468:	683a      	ldr	r2, [r7, #0]
 800246a:	6812      	ldr	r2, [r2, #0]
 800246c:	0691      	lsls	r1, r2, #26
 800246e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002470:	430a      	orrs	r2, r1
 8002472:	431a      	orrs	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800247c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800247e:	e06d      	b.n	800255c <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002486:	4b88      	ldr	r3, [pc, #544]	; (80026a8 <HAL_ADC_ConfigChannel+0x470>)
 8002488:	4013      	ands	r3, r2
 800248a:	683a      	ldr	r2, [r7, #0]
 800248c:	6812      	ldr	r2, [r2, #0]
 800248e:	0691      	lsls	r1, r2, #26
 8002490:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002492:	430a      	orrs	r2, r1
 8002494:	431a      	orrs	r2, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800249e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80024a0:	e05c      	b.n	800255c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80024a8:	4b7f      	ldr	r3, [pc, #508]	; (80026a8 <HAL_ADC_ConfigChannel+0x470>)
 80024aa:	4013      	ands	r3, r2
 80024ac:	683a      	ldr	r2, [r7, #0]
 80024ae:	6812      	ldr	r2, [r2, #0]
 80024b0:	0691      	lsls	r1, r2, #26
 80024b2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80024b4:	430a      	orrs	r2, r1
 80024b6:	431a      	orrs	r2, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80024c0:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80024c2:	e04b      	b.n	800255c <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	069b      	lsls	r3, r3, #26
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d107      	bne.n	80024e8 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80024e6:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	069b      	lsls	r3, r3, #26
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d107      	bne.n	800250c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800250a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002512:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	069b      	lsls	r3, r3, #26
 800251c:	429a      	cmp	r2, r3
 800251e:	d107      	bne.n	8002530 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800252e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002536:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	069b      	lsls	r3, r3, #26
 8002540:	429a      	cmp	r2, r3
 8002542:	d10a      	bne.n	800255a <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002552:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002554:	e001      	b.n	800255a <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8002556:	bf00      	nop
 8002558:	e000      	b.n	800255c <HAL_ADC_ConfigChannel+0x324>
      break;
 800255a:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f003 0303 	and.w	r3, r3, #3
 8002566:	2b01      	cmp	r3, #1
 8002568:	d108      	bne.n	800257c <HAL_ADC_ConfigChannel+0x344>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0301 	and.w	r3, r3, #1
 8002574:	2b01      	cmp	r3, #1
 8002576:	d101      	bne.n	800257c <HAL_ADC_ConfigChannel+0x344>
 8002578:	2301      	movs	r3, #1
 800257a:	e000      	b.n	800257e <HAL_ADC_ConfigChannel+0x346>
 800257c:	2300      	movs	r3, #0
 800257e:	2b00      	cmp	r3, #0
 8002580:	f040 80ff 	bne.w	8002782 <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	2b01      	cmp	r3, #1
 800258a:	d00f      	beq.n	80025ac <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2201      	movs	r2, #1
 800259a:	fa02 f303 	lsl.w	r3, r2, r3
 800259e:	43da      	mvns	r2, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	400a      	ands	r2, r1
 80025a6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80025aa:	e049      	b.n	8002640 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2201      	movs	r2, #1
 80025ba:	409a      	lsls	r2, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	430a      	orrs	r2, r1
 80025c2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	2b09      	cmp	r3, #9
 80025cc:	d91c      	bls.n	8002608 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	6999      	ldr	r1, [r3, #24]
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	4613      	mov	r3, r2
 80025da:	005b      	lsls	r3, r3, #1
 80025dc:	4413      	add	r3, r2
 80025de:	3b1b      	subs	r3, #27
 80025e0:	2207      	movs	r2, #7
 80025e2:	fa02 f303 	lsl.w	r3, r2, r3
 80025e6:	43db      	mvns	r3, r3
 80025e8:	4019      	ands	r1, r3
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	6898      	ldr	r0, [r3, #8]
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	4613      	mov	r3, r2
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	4413      	add	r3, r2
 80025f8:	3b1b      	subs	r3, #27
 80025fa:	fa00 f203 	lsl.w	r2, r0, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	430a      	orrs	r2, r1
 8002604:	619a      	str	r2, [r3, #24]
 8002606:	e01b      	b.n	8002640 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	6959      	ldr	r1, [r3, #20]
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	1c5a      	adds	r2, r3, #1
 8002614:	4613      	mov	r3, r2
 8002616:	005b      	lsls	r3, r3, #1
 8002618:	4413      	add	r3, r2
 800261a:	2207      	movs	r2, #7
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	43db      	mvns	r3, r3
 8002622:	4019      	ands	r1, r3
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	6898      	ldr	r0, [r3, #8]
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	1c5a      	adds	r2, r3, #1
 800262e:	4613      	mov	r3, r2
 8002630:	005b      	lsls	r3, r3, #1
 8002632:	4413      	add	r3, r2
 8002634:	fa00 f203 	lsl.w	r2, r0, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	430a      	orrs	r2, r1
 800263e:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002640:	4b1a      	ldr	r3, [pc, #104]	; (80026ac <HAL_ADC_ConfigChannel+0x474>)
 8002642:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2b10      	cmp	r3, #16
 800264a:	d105      	bne.n	8002658 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800264c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002654:	2b00      	cmp	r3, #0
 8002656:	d014      	beq.n	8002682 <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800265c:	2b11      	cmp	r3, #17
 800265e:	d105      	bne.n	800266c <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002660:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002668:	2b00      	cmp	r3, #0
 800266a:	d00a      	beq.n	8002682 <HAL_ADC_ConfigChannel+0x44a>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002670:	2b12      	cmp	r3, #18
 8002672:	f040 8086 	bne.w	8002782 <HAL_ADC_ConfigChannel+0x54a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002676:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800267e:	2b00      	cmp	r3, #0
 8002680:	d17f      	bne.n	8002782 <HAL_ADC_ConfigChannel+0x54a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002682:	2300      	movs	r3, #0
 8002684:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	f003 0303 	and.w	r3, r3, #3
 8002690:	2b01      	cmp	r3, #1
 8002692:	d10d      	bne.n	80026b0 <HAL_ADC_ConfigChannel+0x478>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d106      	bne.n	80026b0 <HAL_ADC_ConfigChannel+0x478>
 80026a2:	2301      	movs	r3, #1
 80026a4:	e005      	b.n	80026b2 <HAL_ADC_ConfigChannel+0x47a>
 80026a6:	bf00      	nop
 80026a8:	83fff000 	.word	0x83fff000
 80026ac:	50000300 	.word	0x50000300
 80026b0:	2300      	movs	r3, #0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d150      	bne.n	8002758 <HAL_ADC_ConfigChannel+0x520>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80026b6:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d010      	beq.n	80026de <HAL_ADC_ConfigChannel+0x4a6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	f003 0303 	and.w	r3, r3, #3
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d107      	bne.n	80026d8 <HAL_ADC_ConfigChannel+0x4a0>
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0301 	and.w	r3, r3, #1
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d101      	bne.n	80026d8 <HAL_ADC_ConfigChannel+0x4a0>
 80026d4:	2301      	movs	r3, #1
 80026d6:	e000      	b.n	80026da <HAL_ADC_ConfigChannel+0x4a2>
 80026d8:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d13c      	bne.n	8002758 <HAL_ADC_ConfigChannel+0x520>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2b10      	cmp	r3, #16
 80026e4:	d11d      	bne.n	8002722 <HAL_ADC_ConfigChannel+0x4ea>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026ee:	d118      	bne.n	8002722 <HAL_ADC_ConfigChannel+0x4ea>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80026f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80026f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026fa:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80026fc:	4b27      	ldr	r3, [pc, #156]	; (800279c <HAL_ADC_ConfigChannel+0x564>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a27      	ldr	r2, [pc, #156]	; (80027a0 <HAL_ADC_ConfigChannel+0x568>)
 8002702:	fba2 2303 	umull	r2, r3, r2, r3
 8002706:	0c9a      	lsrs	r2, r3, #18
 8002708:	4613      	mov	r3, r2
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	4413      	add	r3, r2
 800270e:	005b      	lsls	r3, r3, #1
 8002710:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002712:	e002      	b.n	800271a <HAL_ADC_ConfigChannel+0x4e2>
          {
            wait_loop_index--;
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	3b01      	subs	r3, #1
 8002718:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d1f9      	bne.n	8002714 <HAL_ADC_ConfigChannel+0x4dc>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002720:	e02e      	b.n	8002780 <HAL_ADC_ConfigChannel+0x548>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2b11      	cmp	r3, #17
 8002728:	d10b      	bne.n	8002742 <HAL_ADC_ConfigChannel+0x50a>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002732:	d106      	bne.n	8002742 <HAL_ADC_ConfigChannel+0x50a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002734:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800273c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800273e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002740:	e01e      	b.n	8002780 <HAL_ADC_ConfigChannel+0x548>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2b12      	cmp	r3, #18
 8002748:	d11a      	bne.n	8002780 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800274a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002752:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002754:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002756:	e013      	b.n	8002780 <HAL_ADC_ConfigChannel+0x548>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275c:	f043 0220 	orr.w	r2, r3, #32
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800276a:	e00a      	b.n	8002782 <HAL_ADC_ConfigChannel+0x54a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002770:	f043 0220 	orr.w	r2, r3, #32
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800277e:	e000      	b.n	8002782 <HAL_ADC_ConfigChannel+0x54a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002780:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800278a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800278e:	4618      	mov	r0, r3
 8002790:	376c      	adds	r7, #108	; 0x6c
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	20000008 	.word	0x20000008
 80027a0:	431bde83 	.word	0x431bde83

080027a4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80027ac:	2300      	movs	r3, #0
 80027ae:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	f003 0303 	and.w	r3, r3, #3
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d108      	bne.n	80027d0 <ADC_Enable+0x2c>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0301 	and.w	r3, r3, #1
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d101      	bne.n	80027d0 <ADC_Enable+0x2c>
 80027cc:	2301      	movs	r3, #1
 80027ce:	e000      	b.n	80027d2 <ADC_Enable+0x2e>
 80027d0:	2300      	movs	r3, #0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d143      	bne.n	800285e <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	689a      	ldr	r2, [r3, #8]
 80027dc:	4b22      	ldr	r3, [pc, #136]	; (8002868 <ADC_Enable+0xc4>)
 80027de:	4013      	ands	r3, r2
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d00d      	beq.n	8002800 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e8:	f043 0210 	orr.w	r2, r3, #16
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f4:	f043 0201 	orr.w	r2, r3, #1
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e02f      	b.n	8002860 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	689a      	ldr	r2, [r3, #8]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f042 0201 	orr.w	r2, r2, #1
 800280e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002810:	f7ff fa22 	bl	8001c58 <HAL_GetTick>
 8002814:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002816:	e01b      	b.n	8002850 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002818:	f7ff fa1e 	bl	8001c58 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	2b02      	cmp	r3, #2
 8002824:	d914      	bls.n	8002850 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0301 	and.w	r3, r3, #1
 8002830:	2b01      	cmp	r3, #1
 8002832:	d00d      	beq.n	8002850 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002838:	f043 0210 	orr.w	r2, r3, #16
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002844:	f043 0201 	orr.w	r2, r3, #1
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e007      	b.n	8002860 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0301 	and.w	r3, r3, #1
 800285a:	2b01      	cmp	r3, #1
 800285c:	d1dc      	bne.n	8002818 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800285e:	2300      	movs	r3, #0
}
 8002860:	4618      	mov	r0, r3
 8002862:	3710      	adds	r7, #16
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	8000003f 	.word	0x8000003f

0800286c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002874:	2300      	movs	r3, #0
 8002876:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	f003 0303 	and.w	r3, r3, #3
 8002882:	2b01      	cmp	r3, #1
 8002884:	d108      	bne.n	8002898 <ADC_Disable+0x2c>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0301 	and.w	r3, r3, #1
 8002890:	2b01      	cmp	r3, #1
 8002892:	d101      	bne.n	8002898 <ADC_Disable+0x2c>
 8002894:	2301      	movs	r3, #1
 8002896:	e000      	b.n	800289a <ADC_Disable+0x2e>
 8002898:	2300      	movs	r3, #0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d047      	beq.n	800292e <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f003 030d 	and.w	r3, r3, #13
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d10f      	bne.n	80028cc <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	689a      	ldr	r2, [r3, #8]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f042 0202 	orr.w	r2, r2, #2
 80028ba:	609a      	str	r2, [r3, #8]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2203      	movs	r2, #3
 80028c2:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80028c4:	f7ff f9c8 	bl	8001c58 <HAL_GetTick>
 80028c8:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80028ca:	e029      	b.n	8002920 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d0:	f043 0210 	orr.w	r2, r3, #16
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028dc:	f043 0201 	orr.w	r2, r3, #1
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e023      	b.n	8002930 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80028e8:	f7ff f9b6 	bl	8001c58 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d914      	bls.n	8002920 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	f003 0301 	and.w	r3, r3, #1
 8002900:	2b01      	cmp	r3, #1
 8002902:	d10d      	bne.n	8002920 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002908:	f043 0210 	orr.w	r2, r3, #16
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002914:	f043 0201 	orr.w	r2, r3, #1
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e007      	b.n	8002930 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	2b01      	cmp	r3, #1
 800292c:	d0dc      	beq.n	80028e8 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800292e:	2300      	movs	r3, #0
}
 8002930:	4618      	mov	r0, r3
 8002932:	3710      	adds	r7, #16
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f003 0307 	and.w	r3, r3, #7
 8002946:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002948:	4b0c      	ldr	r3, [pc, #48]	; (800297c <__NVIC_SetPriorityGrouping+0x44>)
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800294e:	68ba      	ldr	r2, [r7, #8]
 8002950:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002954:	4013      	ands	r3, r2
 8002956:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002960:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002964:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002968:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800296a:	4a04      	ldr	r2, [pc, #16]	; (800297c <__NVIC_SetPriorityGrouping+0x44>)
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	60d3      	str	r3, [r2, #12]
}
 8002970:	bf00      	nop
 8002972:	3714      	adds	r7, #20
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr
 800297c:	e000ed00 	.word	0xe000ed00

08002980 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002984:	4b04      	ldr	r3, [pc, #16]	; (8002998 <__NVIC_GetPriorityGrouping+0x18>)
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	0a1b      	lsrs	r3, r3, #8
 800298a:	f003 0307 	and.w	r3, r3, #7
}
 800298e:	4618      	mov	r0, r3
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr
 8002998:	e000ed00 	.word	0xe000ed00

0800299c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	4603      	mov	r3, r0
 80029a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	db0b      	blt.n	80029c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029ae:	79fb      	ldrb	r3, [r7, #7]
 80029b0:	f003 021f 	and.w	r2, r3, #31
 80029b4:	4907      	ldr	r1, [pc, #28]	; (80029d4 <__NVIC_EnableIRQ+0x38>)
 80029b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ba:	095b      	lsrs	r3, r3, #5
 80029bc:	2001      	movs	r0, #1
 80029be:	fa00 f202 	lsl.w	r2, r0, r2
 80029c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029c6:	bf00      	nop
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	e000e100 	.word	0xe000e100

080029d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	4603      	mov	r3, r0
 80029e0:	6039      	str	r1, [r7, #0]
 80029e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	db0a      	blt.n	8002a02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	b2da      	uxtb	r2, r3
 80029f0:	490c      	ldr	r1, [pc, #48]	; (8002a24 <__NVIC_SetPriority+0x4c>)
 80029f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f6:	0112      	lsls	r2, r2, #4
 80029f8:	b2d2      	uxtb	r2, r2
 80029fa:	440b      	add	r3, r1
 80029fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a00:	e00a      	b.n	8002a18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	b2da      	uxtb	r2, r3
 8002a06:	4908      	ldr	r1, [pc, #32]	; (8002a28 <__NVIC_SetPriority+0x50>)
 8002a08:	79fb      	ldrb	r3, [r7, #7]
 8002a0a:	f003 030f 	and.w	r3, r3, #15
 8002a0e:	3b04      	subs	r3, #4
 8002a10:	0112      	lsls	r2, r2, #4
 8002a12:	b2d2      	uxtb	r2, r2
 8002a14:	440b      	add	r3, r1
 8002a16:	761a      	strb	r2, [r3, #24]
}
 8002a18:	bf00      	nop
 8002a1a:	370c      	adds	r7, #12
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr
 8002a24:	e000e100 	.word	0xe000e100
 8002a28:	e000ed00 	.word	0xe000ed00

08002a2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b089      	sub	sp, #36	; 0x24
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f003 0307 	and.w	r3, r3, #7
 8002a3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	f1c3 0307 	rsb	r3, r3, #7
 8002a46:	2b04      	cmp	r3, #4
 8002a48:	bf28      	it	cs
 8002a4a:	2304      	movcs	r3, #4
 8002a4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	3304      	adds	r3, #4
 8002a52:	2b06      	cmp	r3, #6
 8002a54:	d902      	bls.n	8002a5c <NVIC_EncodePriority+0x30>
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	3b03      	subs	r3, #3
 8002a5a:	e000      	b.n	8002a5e <NVIC_EncodePriority+0x32>
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a60:	f04f 32ff 	mov.w	r2, #4294967295
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6a:	43da      	mvns	r2, r3
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	401a      	ands	r2, r3
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a74:	f04f 31ff 	mov.w	r1, #4294967295
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a7e:	43d9      	mvns	r1, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a84:	4313      	orrs	r3, r2
         );
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3724      	adds	r7, #36	; 0x24
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
	...

08002a94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002aa4:	d301      	bcc.n	8002aaa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e00f      	b.n	8002aca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002aaa:	4a0a      	ldr	r2, [pc, #40]	; (8002ad4 <SysTick_Config+0x40>)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	3b01      	subs	r3, #1
 8002ab0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ab2:	210f      	movs	r1, #15
 8002ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ab8:	f7ff ff8e 	bl	80029d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002abc:	4b05      	ldr	r3, [pc, #20]	; (8002ad4 <SysTick_Config+0x40>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ac2:	4b04      	ldr	r3, [pc, #16]	; (8002ad4 <SysTick_Config+0x40>)
 8002ac4:	2207      	movs	r2, #7
 8002ac6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3708      	adds	r7, #8
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	e000e010 	.word	0xe000e010

08002ad8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ae0:	6878      	ldr	r0, [r7, #4]
 8002ae2:	f7ff ff29 	bl	8002938 <__NVIC_SetPriorityGrouping>
}
 8002ae6:	bf00      	nop
 8002ae8:	3708      	adds	r7, #8
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}

08002aee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002aee:	b580      	push	{r7, lr}
 8002af0:	b086      	sub	sp, #24
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	4603      	mov	r3, r0
 8002af6:	60b9      	str	r1, [r7, #8]
 8002af8:	607a      	str	r2, [r7, #4]
 8002afa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002afc:	2300      	movs	r3, #0
 8002afe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b00:	f7ff ff3e 	bl	8002980 <__NVIC_GetPriorityGrouping>
 8002b04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	68b9      	ldr	r1, [r7, #8]
 8002b0a:	6978      	ldr	r0, [r7, #20]
 8002b0c:	f7ff ff8e 	bl	8002a2c <NVIC_EncodePriority>
 8002b10:	4602      	mov	r2, r0
 8002b12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b16:	4611      	mov	r1, r2
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f7ff ff5d 	bl	80029d8 <__NVIC_SetPriority>
}
 8002b1e:	bf00      	nop
 8002b20:	3718      	adds	r7, #24
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}

08002b26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b26:	b580      	push	{r7, lr}
 8002b28:	b082      	sub	sp, #8
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b34:	4618      	mov	r0, r3
 8002b36:	f7ff ff31 	bl	800299c <__NVIC_EnableIRQ>
}
 8002b3a:	bf00      	nop
 8002b3c:	3708      	adds	r7, #8
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}

08002b42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b42:	b580      	push	{r7, lr}
 8002b44:	b082      	sub	sp, #8
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f7ff ffa2 	bl	8002a94 <SysTick_Config>
 8002b50:	4603      	mov	r3, r0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3708      	adds	r7, #8
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
	...

08002b5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b087      	sub	sp, #28
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b66:	2300      	movs	r3, #0
 8002b68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b6a:	e14e      	b.n	8002e0a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	2101      	movs	r1, #1
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	fa01 f303 	lsl.w	r3, r1, r3
 8002b78:	4013      	ands	r3, r2
 8002b7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	f000 8140 	beq.w	8002e04 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f003 0303 	and.w	r3, r3, #3
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d005      	beq.n	8002b9c <HAL_GPIO_Init+0x40>
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f003 0303 	and.w	r3, r3, #3
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d130      	bne.n	8002bfe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	005b      	lsls	r3, r3, #1
 8002ba6:	2203      	movs	r2, #3
 8002ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bac:	43db      	mvns	r3, r3
 8002bae:	693a      	ldr	r2, [r7, #16]
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	68da      	ldr	r2, [r3, #12]
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	005b      	lsls	r3, r3, #1
 8002bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc0:	693a      	ldr	r2, [r7, #16]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	693a      	ldr	r2, [r7, #16]
 8002bca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bda:	43db      	mvns	r3, r3
 8002bdc:	693a      	ldr	r2, [r7, #16]
 8002bde:	4013      	ands	r3, r2
 8002be0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	091b      	lsrs	r3, r3, #4
 8002be8:	f003 0201 	and.w	r2, r3, #1
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf2:	693a      	ldr	r2, [r7, #16]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	693a      	ldr	r2, [r7, #16]
 8002bfc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f003 0303 	and.w	r3, r3, #3
 8002c06:	2b03      	cmp	r3, #3
 8002c08:	d017      	beq.n	8002c3a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	005b      	lsls	r3, r3, #1
 8002c14:	2203      	movs	r2, #3
 8002c16:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1a:	43db      	mvns	r3, r3
 8002c1c:	693a      	ldr	r2, [r7, #16]
 8002c1e:	4013      	ands	r3, r2
 8002c20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	689a      	ldr	r2, [r3, #8]
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	005b      	lsls	r3, r3, #1
 8002c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2e:	693a      	ldr	r2, [r7, #16]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	693a      	ldr	r2, [r7, #16]
 8002c38:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f003 0303 	and.w	r3, r3, #3
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d123      	bne.n	8002c8e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	08da      	lsrs	r2, r3, #3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	3208      	adds	r2, #8
 8002c4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c52:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	f003 0307 	and.w	r3, r3, #7
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	220f      	movs	r2, #15
 8002c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c62:	43db      	mvns	r3, r3
 8002c64:	693a      	ldr	r2, [r7, #16]
 8002c66:	4013      	ands	r3, r2
 8002c68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	691a      	ldr	r2, [r3, #16]
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	f003 0307 	and.w	r3, r3, #7
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7a:	693a      	ldr	r2, [r7, #16]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	08da      	lsrs	r2, r3, #3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	3208      	adds	r2, #8
 8002c88:	6939      	ldr	r1, [r7, #16]
 8002c8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	005b      	lsls	r3, r3, #1
 8002c98:	2203      	movs	r2, #3
 8002c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9e:	43db      	mvns	r3, r3
 8002ca0:	693a      	ldr	r2, [r7, #16]
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	f003 0203 	and.w	r2, r3, #3
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	005b      	lsls	r3, r3, #1
 8002cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb6:	693a      	ldr	r2, [r7, #16]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	693a      	ldr	r2, [r7, #16]
 8002cc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	f000 809a 	beq.w	8002e04 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cd0:	4b55      	ldr	r3, [pc, #340]	; (8002e28 <HAL_GPIO_Init+0x2cc>)
 8002cd2:	699b      	ldr	r3, [r3, #24]
 8002cd4:	4a54      	ldr	r2, [pc, #336]	; (8002e28 <HAL_GPIO_Init+0x2cc>)
 8002cd6:	f043 0301 	orr.w	r3, r3, #1
 8002cda:	6193      	str	r3, [r2, #24]
 8002cdc:	4b52      	ldr	r3, [pc, #328]	; (8002e28 <HAL_GPIO_Init+0x2cc>)
 8002cde:	699b      	ldr	r3, [r3, #24]
 8002ce0:	f003 0301 	and.w	r3, r3, #1
 8002ce4:	60bb      	str	r3, [r7, #8]
 8002ce6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002ce8:	4a50      	ldr	r2, [pc, #320]	; (8002e2c <HAL_GPIO_Init+0x2d0>)
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	089b      	lsrs	r3, r3, #2
 8002cee:	3302      	adds	r3, #2
 8002cf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cf4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	f003 0303 	and.w	r3, r3, #3
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	220f      	movs	r2, #15
 8002d00:	fa02 f303 	lsl.w	r3, r2, r3
 8002d04:	43db      	mvns	r3, r3
 8002d06:	693a      	ldr	r2, [r7, #16]
 8002d08:	4013      	ands	r3, r2
 8002d0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002d12:	d013      	beq.n	8002d3c <HAL_GPIO_Init+0x1e0>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	4a46      	ldr	r2, [pc, #280]	; (8002e30 <HAL_GPIO_Init+0x2d4>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d00d      	beq.n	8002d38 <HAL_GPIO_Init+0x1dc>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	4a45      	ldr	r2, [pc, #276]	; (8002e34 <HAL_GPIO_Init+0x2d8>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d007      	beq.n	8002d34 <HAL_GPIO_Init+0x1d8>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	4a44      	ldr	r2, [pc, #272]	; (8002e38 <HAL_GPIO_Init+0x2dc>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d101      	bne.n	8002d30 <HAL_GPIO_Init+0x1d4>
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	e006      	b.n	8002d3e <HAL_GPIO_Init+0x1e2>
 8002d30:	2305      	movs	r3, #5
 8002d32:	e004      	b.n	8002d3e <HAL_GPIO_Init+0x1e2>
 8002d34:	2302      	movs	r3, #2
 8002d36:	e002      	b.n	8002d3e <HAL_GPIO_Init+0x1e2>
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e000      	b.n	8002d3e <HAL_GPIO_Init+0x1e2>
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	697a      	ldr	r2, [r7, #20]
 8002d40:	f002 0203 	and.w	r2, r2, #3
 8002d44:	0092      	lsls	r2, r2, #2
 8002d46:	4093      	lsls	r3, r2
 8002d48:	693a      	ldr	r2, [r7, #16]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002d4e:	4937      	ldr	r1, [pc, #220]	; (8002e2c <HAL_GPIO_Init+0x2d0>)
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	089b      	lsrs	r3, r3, #2
 8002d54:	3302      	adds	r3, #2
 8002d56:	693a      	ldr	r2, [r7, #16]
 8002d58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d5c:	4b37      	ldr	r3, [pc, #220]	; (8002e3c <HAL_GPIO_Init+0x2e0>)
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	43db      	mvns	r3, r3
 8002d66:	693a      	ldr	r2, [r7, #16]
 8002d68:	4013      	ands	r3, r2
 8002d6a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d003      	beq.n	8002d80 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002d78:	693a      	ldr	r2, [r7, #16]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002d80:	4a2e      	ldr	r2, [pc, #184]	; (8002e3c <HAL_GPIO_Init+0x2e0>)
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d86:	4b2d      	ldr	r3, [pc, #180]	; (8002e3c <HAL_GPIO_Init+0x2e0>)
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	43db      	mvns	r3, r3
 8002d90:	693a      	ldr	r2, [r7, #16]
 8002d92:	4013      	ands	r3, r2
 8002d94:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d003      	beq.n	8002daa <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002da2:	693a      	ldr	r2, [r7, #16]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002daa:	4a24      	ldr	r2, [pc, #144]	; (8002e3c <HAL_GPIO_Init+0x2e0>)
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002db0:	4b22      	ldr	r3, [pc, #136]	; (8002e3c <HAL_GPIO_Init+0x2e0>)
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	43db      	mvns	r3, r3
 8002dba:	693a      	ldr	r2, [r7, #16]
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d003      	beq.n	8002dd4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002dcc:	693a      	ldr	r2, [r7, #16]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002dd4:	4a19      	ldr	r2, [pc, #100]	; (8002e3c <HAL_GPIO_Init+0x2e0>)
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002dda:	4b18      	ldr	r3, [pc, #96]	; (8002e3c <HAL_GPIO_Init+0x2e0>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	43db      	mvns	r3, r3
 8002de4:	693a      	ldr	r2, [r7, #16]
 8002de6:	4013      	ands	r3, r2
 8002de8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d003      	beq.n	8002dfe <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002df6:	693a      	ldr	r2, [r7, #16]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002dfe:	4a0f      	ldr	r2, [pc, #60]	; (8002e3c <HAL_GPIO_Init+0x2e0>)
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	3301      	adds	r3, #1
 8002e08:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	fa22 f303 	lsr.w	r3, r2, r3
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	f47f aea9 	bne.w	8002b6c <HAL_GPIO_Init+0x10>
  }
}
 8002e1a:	bf00      	nop
 8002e1c:	bf00      	nop
 8002e1e:	371c      	adds	r7, #28
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr
 8002e28:	40021000 	.word	0x40021000
 8002e2c:	40010000 	.word	0x40010000
 8002e30:	48000400 	.word	0x48000400
 8002e34:	48000800 	.word	0x48000800
 8002e38:	48000c00 	.word	0x48000c00
 8002e3c:	40010400 	.word	0x40010400

08002e40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	460b      	mov	r3, r1
 8002e4a:	807b      	strh	r3, [r7, #2]
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e50:	787b      	ldrb	r3, [r7, #1]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d003      	beq.n	8002e5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e56:	887a      	ldrh	r2, [r7, #2]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e5c:	e002      	b.n	8002e64 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e5e:	887a      	ldrh	r2, [r7, #2]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002e64:	bf00      	nop
 8002e66:	370c      	adds	r7, #12
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr

08002e70 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	4603      	mov	r3, r0
 8002e78:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002e7a:	4b08      	ldr	r3, [pc, #32]	; (8002e9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e7c:	695a      	ldr	r2, [r3, #20]
 8002e7e:	88fb      	ldrh	r3, [r7, #6]
 8002e80:	4013      	ands	r3, r2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d006      	beq.n	8002e94 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e86:	4a05      	ldr	r2, [pc, #20]	; (8002e9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e88:	88fb      	ldrh	r3, [r7, #6]
 8002e8a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e8c:	88fb      	ldrh	r3, [r7, #6]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f000 f806 	bl	8002ea0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002e94:	bf00      	nop
 8002e96:	3708      	adds	r7, #8
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	40010400 	.word	0x40010400

08002ea0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002eaa:	bf00      	nop
 8002eac:	370c      	adds	r7, #12
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
	...

08002eb8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ec4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ec8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002eca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ece:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d102      	bne.n	8002ede <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	f001 b823 	b.w	8003f24 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ede:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ee2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0301 	and.w	r3, r3, #1
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	f000 817d 	beq.w	80031ee <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002ef4:	4bbc      	ldr	r3, [pc, #752]	; (80031e8 <HAL_RCC_OscConfig+0x330>)
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f003 030c 	and.w	r3, r3, #12
 8002efc:	2b04      	cmp	r3, #4
 8002efe:	d00c      	beq.n	8002f1a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f00:	4bb9      	ldr	r3, [pc, #740]	; (80031e8 <HAL_RCC_OscConfig+0x330>)
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f003 030c 	and.w	r3, r3, #12
 8002f08:	2b08      	cmp	r3, #8
 8002f0a:	d15c      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x10e>
 8002f0c:	4bb6      	ldr	r3, [pc, #728]	; (80031e8 <HAL_RCC_OscConfig+0x330>)
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f18:	d155      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x10e>
 8002f1a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f1e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f22:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002f26:	fa93 f3a3 	rbit	r3, r3
 8002f2a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002f2e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f32:	fab3 f383 	clz	r3, r3
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	095b      	lsrs	r3, r3, #5
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	f043 0301 	orr.w	r3, r3, #1
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d102      	bne.n	8002f4c <HAL_RCC_OscConfig+0x94>
 8002f46:	4ba8      	ldr	r3, [pc, #672]	; (80031e8 <HAL_RCC_OscConfig+0x330>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	e015      	b.n	8002f78 <HAL_RCC_OscConfig+0xc0>
 8002f4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f50:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f54:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002f58:	fa93 f3a3 	rbit	r3, r3
 8002f5c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002f60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f64:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002f68:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002f6c:	fa93 f3a3 	rbit	r3, r3
 8002f70:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002f74:	4b9c      	ldr	r3, [pc, #624]	; (80031e8 <HAL_RCC_OscConfig+0x330>)
 8002f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f78:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002f7c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002f80:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002f84:	fa92 f2a2 	rbit	r2, r2
 8002f88:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002f8c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002f90:	fab2 f282 	clz	r2, r2
 8002f94:	b2d2      	uxtb	r2, r2
 8002f96:	f042 0220 	orr.w	r2, r2, #32
 8002f9a:	b2d2      	uxtb	r2, r2
 8002f9c:	f002 021f 	and.w	r2, r2, #31
 8002fa0:	2101      	movs	r1, #1
 8002fa2:	fa01 f202 	lsl.w	r2, r1, r2
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	f000 811f 	beq.w	80031ec <HAL_RCC_OscConfig+0x334>
 8002fae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fb2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	f040 8116 	bne.w	80031ec <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	f000 bfaf 	b.w	8003f24 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fd6:	d106      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x12e>
 8002fd8:	4b83      	ldr	r3, [pc, #524]	; (80031e8 <HAL_RCC_OscConfig+0x330>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a82      	ldr	r2, [pc, #520]	; (80031e8 <HAL_RCC_OscConfig+0x330>)
 8002fde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fe2:	6013      	str	r3, [r2, #0]
 8002fe4:	e036      	b.n	8003054 <HAL_RCC_OscConfig+0x19c>
 8002fe6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d10c      	bne.n	8003010 <HAL_RCC_OscConfig+0x158>
 8002ff6:	4b7c      	ldr	r3, [pc, #496]	; (80031e8 <HAL_RCC_OscConfig+0x330>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a7b      	ldr	r2, [pc, #492]	; (80031e8 <HAL_RCC_OscConfig+0x330>)
 8002ffc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003000:	6013      	str	r3, [r2, #0]
 8003002:	4b79      	ldr	r3, [pc, #484]	; (80031e8 <HAL_RCC_OscConfig+0x330>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a78      	ldr	r2, [pc, #480]	; (80031e8 <HAL_RCC_OscConfig+0x330>)
 8003008:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800300c:	6013      	str	r3, [r2, #0]
 800300e:	e021      	b.n	8003054 <HAL_RCC_OscConfig+0x19c>
 8003010:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003014:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003020:	d10c      	bne.n	800303c <HAL_RCC_OscConfig+0x184>
 8003022:	4b71      	ldr	r3, [pc, #452]	; (80031e8 <HAL_RCC_OscConfig+0x330>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a70      	ldr	r2, [pc, #448]	; (80031e8 <HAL_RCC_OscConfig+0x330>)
 8003028:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800302c:	6013      	str	r3, [r2, #0]
 800302e:	4b6e      	ldr	r3, [pc, #440]	; (80031e8 <HAL_RCC_OscConfig+0x330>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a6d      	ldr	r2, [pc, #436]	; (80031e8 <HAL_RCC_OscConfig+0x330>)
 8003034:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003038:	6013      	str	r3, [r2, #0]
 800303a:	e00b      	b.n	8003054 <HAL_RCC_OscConfig+0x19c>
 800303c:	4b6a      	ldr	r3, [pc, #424]	; (80031e8 <HAL_RCC_OscConfig+0x330>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a69      	ldr	r2, [pc, #420]	; (80031e8 <HAL_RCC_OscConfig+0x330>)
 8003042:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003046:	6013      	str	r3, [r2, #0]
 8003048:	4b67      	ldr	r3, [pc, #412]	; (80031e8 <HAL_RCC_OscConfig+0x330>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a66      	ldr	r2, [pc, #408]	; (80031e8 <HAL_RCC_OscConfig+0x330>)
 800304e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003052:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003054:	4b64      	ldr	r3, [pc, #400]	; (80031e8 <HAL_RCC_OscConfig+0x330>)
 8003056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003058:	f023 020f 	bic.w	r2, r3, #15
 800305c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003060:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	495f      	ldr	r1, [pc, #380]	; (80031e8 <HAL_RCC_OscConfig+0x330>)
 800306a:	4313      	orrs	r3, r2
 800306c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800306e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003072:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d059      	beq.n	8003132 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800307e:	f7fe fdeb 	bl	8001c58 <HAL_GetTick>
 8003082:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003086:	e00a      	b.n	800309e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003088:	f7fe fde6 	bl	8001c58 <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	2b64      	cmp	r3, #100	; 0x64
 8003096:	d902      	bls.n	800309e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003098:	2303      	movs	r3, #3
 800309a:	f000 bf43 	b.w	8003f24 <HAL_RCC_OscConfig+0x106c>
 800309e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030a2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80030aa:	fa93 f3a3 	rbit	r3, r3
 80030ae:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80030b2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030b6:	fab3 f383 	clz	r3, r3
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	095b      	lsrs	r3, r3, #5
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	f043 0301 	orr.w	r3, r3, #1
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d102      	bne.n	80030d0 <HAL_RCC_OscConfig+0x218>
 80030ca:	4b47      	ldr	r3, [pc, #284]	; (80031e8 <HAL_RCC_OscConfig+0x330>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	e015      	b.n	80030fc <HAL_RCC_OscConfig+0x244>
 80030d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030d4:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80030dc:	fa93 f3a3 	rbit	r3, r3
 80030e0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80030e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030e8:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80030ec:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80030f0:	fa93 f3a3 	rbit	r3, r3
 80030f4:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80030f8:	4b3b      	ldr	r3, [pc, #236]	; (80031e8 <HAL_RCC_OscConfig+0x330>)
 80030fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003100:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003104:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003108:	fa92 f2a2 	rbit	r2, r2
 800310c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003110:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003114:	fab2 f282 	clz	r2, r2
 8003118:	b2d2      	uxtb	r2, r2
 800311a:	f042 0220 	orr.w	r2, r2, #32
 800311e:	b2d2      	uxtb	r2, r2
 8003120:	f002 021f 	and.w	r2, r2, #31
 8003124:	2101      	movs	r1, #1
 8003126:	fa01 f202 	lsl.w	r2, r1, r2
 800312a:	4013      	ands	r3, r2
 800312c:	2b00      	cmp	r3, #0
 800312e:	d0ab      	beq.n	8003088 <HAL_RCC_OscConfig+0x1d0>
 8003130:	e05d      	b.n	80031ee <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003132:	f7fe fd91 	bl	8001c58 <HAL_GetTick>
 8003136:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800313a:	e00a      	b.n	8003152 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800313c:	f7fe fd8c 	bl	8001c58 <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	2b64      	cmp	r3, #100	; 0x64
 800314a:	d902      	bls.n	8003152 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	f000 bee9 	b.w	8003f24 <HAL_RCC_OscConfig+0x106c>
 8003152:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003156:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800315a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800315e:	fa93 f3a3 	rbit	r3, r3
 8003162:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003166:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800316a:	fab3 f383 	clz	r3, r3
 800316e:	b2db      	uxtb	r3, r3
 8003170:	095b      	lsrs	r3, r3, #5
 8003172:	b2db      	uxtb	r3, r3
 8003174:	f043 0301 	orr.w	r3, r3, #1
 8003178:	b2db      	uxtb	r3, r3
 800317a:	2b01      	cmp	r3, #1
 800317c:	d102      	bne.n	8003184 <HAL_RCC_OscConfig+0x2cc>
 800317e:	4b1a      	ldr	r3, [pc, #104]	; (80031e8 <HAL_RCC_OscConfig+0x330>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	e015      	b.n	80031b0 <HAL_RCC_OscConfig+0x2f8>
 8003184:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003188:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800318c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003190:	fa93 f3a3 	rbit	r3, r3
 8003194:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003198:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800319c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80031a0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80031a4:	fa93 f3a3 	rbit	r3, r3
 80031a8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80031ac:	4b0e      	ldr	r3, [pc, #56]	; (80031e8 <HAL_RCC_OscConfig+0x330>)
 80031ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80031b4:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80031b8:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80031bc:	fa92 f2a2 	rbit	r2, r2
 80031c0:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80031c4:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80031c8:	fab2 f282 	clz	r2, r2
 80031cc:	b2d2      	uxtb	r2, r2
 80031ce:	f042 0220 	orr.w	r2, r2, #32
 80031d2:	b2d2      	uxtb	r2, r2
 80031d4:	f002 021f 	and.w	r2, r2, #31
 80031d8:	2101      	movs	r1, #1
 80031da:	fa01 f202 	lsl.w	r2, r1, r2
 80031de:	4013      	ands	r3, r2
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d1ab      	bne.n	800313c <HAL_RCC_OscConfig+0x284>
 80031e4:	e003      	b.n	80031ee <HAL_RCC_OscConfig+0x336>
 80031e6:	bf00      	nop
 80031e8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0302 	and.w	r3, r3, #2
 80031fe:	2b00      	cmp	r3, #0
 8003200:	f000 817d 	beq.w	80034fe <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003204:	4ba6      	ldr	r3, [pc, #664]	; (80034a0 <HAL_RCC_OscConfig+0x5e8>)
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f003 030c 	and.w	r3, r3, #12
 800320c:	2b00      	cmp	r3, #0
 800320e:	d00b      	beq.n	8003228 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003210:	4ba3      	ldr	r3, [pc, #652]	; (80034a0 <HAL_RCC_OscConfig+0x5e8>)
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f003 030c 	and.w	r3, r3, #12
 8003218:	2b08      	cmp	r3, #8
 800321a:	d172      	bne.n	8003302 <HAL_RCC_OscConfig+0x44a>
 800321c:	4ba0      	ldr	r3, [pc, #640]	; (80034a0 <HAL_RCC_OscConfig+0x5e8>)
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d16c      	bne.n	8003302 <HAL_RCC_OscConfig+0x44a>
 8003228:	2302      	movs	r3, #2
 800322a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800322e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003232:	fa93 f3a3 	rbit	r3, r3
 8003236:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800323a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800323e:	fab3 f383 	clz	r3, r3
 8003242:	b2db      	uxtb	r3, r3
 8003244:	095b      	lsrs	r3, r3, #5
 8003246:	b2db      	uxtb	r3, r3
 8003248:	f043 0301 	orr.w	r3, r3, #1
 800324c:	b2db      	uxtb	r3, r3
 800324e:	2b01      	cmp	r3, #1
 8003250:	d102      	bne.n	8003258 <HAL_RCC_OscConfig+0x3a0>
 8003252:	4b93      	ldr	r3, [pc, #588]	; (80034a0 <HAL_RCC_OscConfig+0x5e8>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	e013      	b.n	8003280 <HAL_RCC_OscConfig+0x3c8>
 8003258:	2302      	movs	r3, #2
 800325a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800325e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003262:	fa93 f3a3 	rbit	r3, r3
 8003266:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800326a:	2302      	movs	r3, #2
 800326c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003270:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003274:	fa93 f3a3 	rbit	r3, r3
 8003278:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800327c:	4b88      	ldr	r3, [pc, #544]	; (80034a0 <HAL_RCC_OscConfig+0x5e8>)
 800327e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003280:	2202      	movs	r2, #2
 8003282:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003286:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800328a:	fa92 f2a2 	rbit	r2, r2
 800328e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003292:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003296:	fab2 f282 	clz	r2, r2
 800329a:	b2d2      	uxtb	r2, r2
 800329c:	f042 0220 	orr.w	r2, r2, #32
 80032a0:	b2d2      	uxtb	r2, r2
 80032a2:	f002 021f 	and.w	r2, r2, #31
 80032a6:	2101      	movs	r1, #1
 80032a8:	fa01 f202 	lsl.w	r2, r1, r2
 80032ac:	4013      	ands	r3, r2
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d00a      	beq.n	80032c8 <HAL_RCC_OscConfig+0x410>
 80032b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d002      	beq.n	80032c8 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	f000 be2e 	b.w	8003f24 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032c8:	4b75      	ldr	r3, [pc, #468]	; (80034a0 <HAL_RCC_OscConfig+0x5e8>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032d4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	695b      	ldr	r3, [r3, #20]
 80032dc:	21f8      	movs	r1, #248	; 0xf8
 80032de:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80032e6:	fa91 f1a1 	rbit	r1, r1
 80032ea:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80032ee:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80032f2:	fab1 f181 	clz	r1, r1
 80032f6:	b2c9      	uxtb	r1, r1
 80032f8:	408b      	lsls	r3, r1
 80032fa:	4969      	ldr	r1, [pc, #420]	; (80034a0 <HAL_RCC_OscConfig+0x5e8>)
 80032fc:	4313      	orrs	r3, r2
 80032fe:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003300:	e0fd      	b.n	80034fe <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003302:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003306:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	691b      	ldr	r3, [r3, #16]
 800330e:	2b00      	cmp	r3, #0
 8003310:	f000 8088 	beq.w	8003424 <HAL_RCC_OscConfig+0x56c>
 8003314:	2301      	movs	r3, #1
 8003316:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800331a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800331e:	fa93 f3a3 	rbit	r3, r3
 8003322:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003326:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800332a:	fab3 f383 	clz	r3, r3
 800332e:	b2db      	uxtb	r3, r3
 8003330:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003334:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	461a      	mov	r2, r3
 800333c:	2301      	movs	r3, #1
 800333e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003340:	f7fe fc8a 	bl	8001c58 <HAL_GetTick>
 8003344:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003348:	e00a      	b.n	8003360 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800334a:	f7fe fc85 	bl	8001c58 <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	2b02      	cmp	r3, #2
 8003358:	d902      	bls.n	8003360 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	f000 bde2 	b.w	8003f24 <HAL_RCC_OscConfig+0x106c>
 8003360:	2302      	movs	r3, #2
 8003362:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003366:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800336a:	fa93 f3a3 	rbit	r3, r3
 800336e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003372:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003376:	fab3 f383 	clz	r3, r3
 800337a:	b2db      	uxtb	r3, r3
 800337c:	095b      	lsrs	r3, r3, #5
 800337e:	b2db      	uxtb	r3, r3
 8003380:	f043 0301 	orr.w	r3, r3, #1
 8003384:	b2db      	uxtb	r3, r3
 8003386:	2b01      	cmp	r3, #1
 8003388:	d102      	bne.n	8003390 <HAL_RCC_OscConfig+0x4d8>
 800338a:	4b45      	ldr	r3, [pc, #276]	; (80034a0 <HAL_RCC_OscConfig+0x5e8>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	e013      	b.n	80033b8 <HAL_RCC_OscConfig+0x500>
 8003390:	2302      	movs	r3, #2
 8003392:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003396:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800339a:	fa93 f3a3 	rbit	r3, r3
 800339e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80033a2:	2302      	movs	r3, #2
 80033a4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80033a8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80033ac:	fa93 f3a3 	rbit	r3, r3
 80033b0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80033b4:	4b3a      	ldr	r3, [pc, #232]	; (80034a0 <HAL_RCC_OscConfig+0x5e8>)
 80033b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b8:	2202      	movs	r2, #2
 80033ba:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80033be:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80033c2:	fa92 f2a2 	rbit	r2, r2
 80033c6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80033ca:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80033ce:	fab2 f282 	clz	r2, r2
 80033d2:	b2d2      	uxtb	r2, r2
 80033d4:	f042 0220 	orr.w	r2, r2, #32
 80033d8:	b2d2      	uxtb	r2, r2
 80033da:	f002 021f 	and.w	r2, r2, #31
 80033de:	2101      	movs	r1, #1
 80033e0:	fa01 f202 	lsl.w	r2, r1, r2
 80033e4:	4013      	ands	r3, r2
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d0af      	beq.n	800334a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033ea:	4b2d      	ldr	r3, [pc, #180]	; (80034a0 <HAL_RCC_OscConfig+0x5e8>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	695b      	ldr	r3, [r3, #20]
 80033fe:	21f8      	movs	r1, #248	; 0xf8
 8003400:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003404:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003408:	fa91 f1a1 	rbit	r1, r1
 800340c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003410:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003414:	fab1 f181 	clz	r1, r1
 8003418:	b2c9      	uxtb	r1, r1
 800341a:	408b      	lsls	r3, r1
 800341c:	4920      	ldr	r1, [pc, #128]	; (80034a0 <HAL_RCC_OscConfig+0x5e8>)
 800341e:	4313      	orrs	r3, r2
 8003420:	600b      	str	r3, [r1, #0]
 8003422:	e06c      	b.n	80034fe <HAL_RCC_OscConfig+0x646>
 8003424:	2301      	movs	r3, #1
 8003426:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800342a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800342e:	fa93 f3a3 	rbit	r3, r3
 8003432:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003436:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800343a:	fab3 f383 	clz	r3, r3
 800343e:	b2db      	uxtb	r3, r3
 8003440:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003444:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	461a      	mov	r2, r3
 800344c:	2300      	movs	r3, #0
 800344e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003450:	f7fe fc02 	bl	8001c58 <HAL_GetTick>
 8003454:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003458:	e00a      	b.n	8003470 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800345a:	f7fe fbfd 	bl	8001c58 <HAL_GetTick>
 800345e:	4602      	mov	r2, r0
 8003460:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	2b02      	cmp	r3, #2
 8003468:	d902      	bls.n	8003470 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	f000 bd5a 	b.w	8003f24 <HAL_RCC_OscConfig+0x106c>
 8003470:	2302      	movs	r3, #2
 8003472:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003476:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800347a:	fa93 f3a3 	rbit	r3, r3
 800347e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003482:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003486:	fab3 f383 	clz	r3, r3
 800348a:	b2db      	uxtb	r3, r3
 800348c:	095b      	lsrs	r3, r3, #5
 800348e:	b2db      	uxtb	r3, r3
 8003490:	f043 0301 	orr.w	r3, r3, #1
 8003494:	b2db      	uxtb	r3, r3
 8003496:	2b01      	cmp	r3, #1
 8003498:	d104      	bne.n	80034a4 <HAL_RCC_OscConfig+0x5ec>
 800349a:	4b01      	ldr	r3, [pc, #4]	; (80034a0 <HAL_RCC_OscConfig+0x5e8>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	e015      	b.n	80034cc <HAL_RCC_OscConfig+0x614>
 80034a0:	40021000 	.word	0x40021000
 80034a4:	2302      	movs	r3, #2
 80034a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80034ae:	fa93 f3a3 	rbit	r3, r3
 80034b2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80034b6:	2302      	movs	r3, #2
 80034b8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80034bc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80034c0:	fa93 f3a3 	rbit	r3, r3
 80034c4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80034c8:	4bc8      	ldr	r3, [pc, #800]	; (80037ec <HAL_RCC_OscConfig+0x934>)
 80034ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034cc:	2202      	movs	r2, #2
 80034ce:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80034d2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80034d6:	fa92 f2a2 	rbit	r2, r2
 80034da:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80034de:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80034e2:	fab2 f282 	clz	r2, r2
 80034e6:	b2d2      	uxtb	r2, r2
 80034e8:	f042 0220 	orr.w	r2, r2, #32
 80034ec:	b2d2      	uxtb	r2, r2
 80034ee:	f002 021f 	and.w	r2, r2, #31
 80034f2:	2101      	movs	r1, #1
 80034f4:	fa01 f202 	lsl.w	r2, r1, r2
 80034f8:	4013      	ands	r3, r2
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d1ad      	bne.n	800345a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003502:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0308 	and.w	r3, r3, #8
 800350e:	2b00      	cmp	r3, #0
 8003510:	f000 8110 	beq.w	8003734 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003514:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003518:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	699b      	ldr	r3, [r3, #24]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d079      	beq.n	8003618 <HAL_RCC_OscConfig+0x760>
 8003524:	2301      	movs	r3, #1
 8003526:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800352a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800352e:	fa93 f3a3 	rbit	r3, r3
 8003532:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003536:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800353a:	fab3 f383 	clz	r3, r3
 800353e:	b2db      	uxtb	r3, r3
 8003540:	461a      	mov	r2, r3
 8003542:	4bab      	ldr	r3, [pc, #684]	; (80037f0 <HAL_RCC_OscConfig+0x938>)
 8003544:	4413      	add	r3, r2
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	461a      	mov	r2, r3
 800354a:	2301      	movs	r3, #1
 800354c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800354e:	f7fe fb83 	bl	8001c58 <HAL_GetTick>
 8003552:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003556:	e00a      	b.n	800356e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003558:	f7fe fb7e 	bl	8001c58 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	2b02      	cmp	r3, #2
 8003566:	d902      	bls.n	800356e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003568:	2303      	movs	r3, #3
 800356a:	f000 bcdb 	b.w	8003f24 <HAL_RCC_OscConfig+0x106c>
 800356e:	2302      	movs	r3, #2
 8003570:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003574:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003578:	fa93 f3a3 	rbit	r3, r3
 800357c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003580:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003584:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003588:	2202      	movs	r2, #2
 800358a:	601a      	str	r2, [r3, #0]
 800358c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003590:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	fa93 f2a3 	rbit	r2, r3
 800359a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800359e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80035a2:	601a      	str	r2, [r3, #0]
 80035a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80035ac:	2202      	movs	r2, #2
 80035ae:	601a      	str	r2, [r3, #0]
 80035b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	fa93 f2a3 	rbit	r2, r3
 80035be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035c2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80035c6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035c8:	4b88      	ldr	r3, [pc, #544]	; (80037ec <HAL_RCC_OscConfig+0x934>)
 80035ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035d0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80035d4:	2102      	movs	r1, #2
 80035d6:	6019      	str	r1, [r3, #0]
 80035d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035dc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	fa93 f1a3 	rbit	r1, r3
 80035e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035ea:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80035ee:	6019      	str	r1, [r3, #0]
  return result;
 80035f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035f4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	fab3 f383 	clz	r3, r3
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003604:	b2db      	uxtb	r3, r3
 8003606:	f003 031f 	and.w	r3, r3, #31
 800360a:	2101      	movs	r1, #1
 800360c:	fa01 f303 	lsl.w	r3, r1, r3
 8003610:	4013      	ands	r3, r2
 8003612:	2b00      	cmp	r3, #0
 8003614:	d0a0      	beq.n	8003558 <HAL_RCC_OscConfig+0x6a0>
 8003616:	e08d      	b.n	8003734 <HAL_RCC_OscConfig+0x87c>
 8003618:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800361c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003620:	2201      	movs	r2, #1
 8003622:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003624:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003628:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	fa93 f2a3 	rbit	r2, r3
 8003632:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003636:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800363a:	601a      	str	r2, [r3, #0]
  return result;
 800363c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003640:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003644:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003646:	fab3 f383 	clz	r3, r3
 800364a:	b2db      	uxtb	r3, r3
 800364c:	461a      	mov	r2, r3
 800364e:	4b68      	ldr	r3, [pc, #416]	; (80037f0 <HAL_RCC_OscConfig+0x938>)
 8003650:	4413      	add	r3, r2
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	461a      	mov	r2, r3
 8003656:	2300      	movs	r3, #0
 8003658:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800365a:	f7fe fafd 	bl	8001c58 <HAL_GetTick>
 800365e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003662:	e00a      	b.n	800367a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003664:	f7fe faf8 	bl	8001c58 <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	2b02      	cmp	r3, #2
 8003672:	d902      	bls.n	800367a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003674:	2303      	movs	r3, #3
 8003676:	f000 bc55 	b.w	8003f24 <HAL_RCC_OscConfig+0x106c>
 800367a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800367e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003682:	2202      	movs	r2, #2
 8003684:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003686:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800368a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	fa93 f2a3 	rbit	r2, r3
 8003694:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003698:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800369c:	601a      	str	r2, [r3, #0]
 800369e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036a2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80036a6:	2202      	movs	r2, #2
 80036a8:	601a      	str	r2, [r3, #0]
 80036aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036ae:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	fa93 f2a3 	rbit	r2, r3
 80036b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80036c0:	601a      	str	r2, [r3, #0]
 80036c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80036ca:	2202      	movs	r2, #2
 80036cc:	601a      	str	r2, [r3, #0]
 80036ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	fa93 f2a3 	rbit	r2, r3
 80036dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036e0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80036e4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036e6:	4b41      	ldr	r3, [pc, #260]	; (80037ec <HAL_RCC_OscConfig+0x934>)
 80036e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036ee:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80036f2:	2102      	movs	r1, #2
 80036f4:	6019      	str	r1, [r3, #0]
 80036f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036fa:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	fa93 f1a3 	rbit	r1, r3
 8003704:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003708:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800370c:	6019      	str	r1, [r3, #0]
  return result;
 800370e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003712:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	fab3 f383 	clz	r3, r3
 800371c:	b2db      	uxtb	r3, r3
 800371e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003722:	b2db      	uxtb	r3, r3
 8003724:	f003 031f 	and.w	r3, r3, #31
 8003728:	2101      	movs	r1, #1
 800372a:	fa01 f303 	lsl.w	r3, r1, r3
 800372e:	4013      	ands	r3, r2
 8003730:	2b00      	cmp	r3, #0
 8003732:	d197      	bne.n	8003664 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003734:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003738:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0304 	and.w	r3, r3, #4
 8003744:	2b00      	cmp	r3, #0
 8003746:	f000 81a1 	beq.w	8003a8c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800374a:	2300      	movs	r3, #0
 800374c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003750:	4b26      	ldr	r3, [pc, #152]	; (80037ec <HAL_RCC_OscConfig+0x934>)
 8003752:	69db      	ldr	r3, [r3, #28]
 8003754:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d116      	bne.n	800378a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800375c:	4b23      	ldr	r3, [pc, #140]	; (80037ec <HAL_RCC_OscConfig+0x934>)
 800375e:	69db      	ldr	r3, [r3, #28]
 8003760:	4a22      	ldr	r2, [pc, #136]	; (80037ec <HAL_RCC_OscConfig+0x934>)
 8003762:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003766:	61d3      	str	r3, [r2, #28]
 8003768:	4b20      	ldr	r3, [pc, #128]	; (80037ec <HAL_RCC_OscConfig+0x934>)
 800376a:	69db      	ldr	r3, [r3, #28]
 800376c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003770:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003774:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003778:	601a      	str	r2, [r3, #0]
 800377a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800377e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003782:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003784:	2301      	movs	r3, #1
 8003786:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800378a:	4b1a      	ldr	r3, [pc, #104]	; (80037f4 <HAL_RCC_OscConfig+0x93c>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003792:	2b00      	cmp	r3, #0
 8003794:	d11a      	bne.n	80037cc <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003796:	4b17      	ldr	r3, [pc, #92]	; (80037f4 <HAL_RCC_OscConfig+0x93c>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a16      	ldr	r2, [pc, #88]	; (80037f4 <HAL_RCC_OscConfig+0x93c>)
 800379c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037a0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037a2:	f7fe fa59 	bl	8001c58 <HAL_GetTick>
 80037a6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037aa:	e009      	b.n	80037c0 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037ac:	f7fe fa54 	bl	8001c58 <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	2b64      	cmp	r3, #100	; 0x64
 80037ba:	d901      	bls.n	80037c0 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	e3b1      	b.n	8003f24 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037c0:	4b0c      	ldr	r3, [pc, #48]	; (80037f4 <HAL_RCC_OscConfig+0x93c>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d0ef      	beq.n	80037ac <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037d0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d10d      	bne.n	80037f8 <HAL_RCC_OscConfig+0x940>
 80037dc:	4b03      	ldr	r3, [pc, #12]	; (80037ec <HAL_RCC_OscConfig+0x934>)
 80037de:	6a1b      	ldr	r3, [r3, #32]
 80037e0:	4a02      	ldr	r2, [pc, #8]	; (80037ec <HAL_RCC_OscConfig+0x934>)
 80037e2:	f043 0301 	orr.w	r3, r3, #1
 80037e6:	6213      	str	r3, [r2, #32]
 80037e8:	e03c      	b.n	8003864 <HAL_RCC_OscConfig+0x9ac>
 80037ea:	bf00      	nop
 80037ec:	40021000 	.word	0x40021000
 80037f0:	10908120 	.word	0x10908120
 80037f4:	40007000 	.word	0x40007000
 80037f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d10c      	bne.n	8003822 <HAL_RCC_OscConfig+0x96a>
 8003808:	4bc1      	ldr	r3, [pc, #772]	; (8003b10 <HAL_RCC_OscConfig+0xc58>)
 800380a:	6a1b      	ldr	r3, [r3, #32]
 800380c:	4ac0      	ldr	r2, [pc, #768]	; (8003b10 <HAL_RCC_OscConfig+0xc58>)
 800380e:	f023 0301 	bic.w	r3, r3, #1
 8003812:	6213      	str	r3, [r2, #32]
 8003814:	4bbe      	ldr	r3, [pc, #760]	; (8003b10 <HAL_RCC_OscConfig+0xc58>)
 8003816:	6a1b      	ldr	r3, [r3, #32]
 8003818:	4abd      	ldr	r2, [pc, #756]	; (8003b10 <HAL_RCC_OscConfig+0xc58>)
 800381a:	f023 0304 	bic.w	r3, r3, #4
 800381e:	6213      	str	r3, [r2, #32]
 8003820:	e020      	b.n	8003864 <HAL_RCC_OscConfig+0x9ac>
 8003822:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003826:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	2b05      	cmp	r3, #5
 8003830:	d10c      	bne.n	800384c <HAL_RCC_OscConfig+0x994>
 8003832:	4bb7      	ldr	r3, [pc, #732]	; (8003b10 <HAL_RCC_OscConfig+0xc58>)
 8003834:	6a1b      	ldr	r3, [r3, #32]
 8003836:	4ab6      	ldr	r2, [pc, #728]	; (8003b10 <HAL_RCC_OscConfig+0xc58>)
 8003838:	f043 0304 	orr.w	r3, r3, #4
 800383c:	6213      	str	r3, [r2, #32]
 800383e:	4bb4      	ldr	r3, [pc, #720]	; (8003b10 <HAL_RCC_OscConfig+0xc58>)
 8003840:	6a1b      	ldr	r3, [r3, #32]
 8003842:	4ab3      	ldr	r2, [pc, #716]	; (8003b10 <HAL_RCC_OscConfig+0xc58>)
 8003844:	f043 0301 	orr.w	r3, r3, #1
 8003848:	6213      	str	r3, [r2, #32]
 800384a:	e00b      	b.n	8003864 <HAL_RCC_OscConfig+0x9ac>
 800384c:	4bb0      	ldr	r3, [pc, #704]	; (8003b10 <HAL_RCC_OscConfig+0xc58>)
 800384e:	6a1b      	ldr	r3, [r3, #32]
 8003850:	4aaf      	ldr	r2, [pc, #700]	; (8003b10 <HAL_RCC_OscConfig+0xc58>)
 8003852:	f023 0301 	bic.w	r3, r3, #1
 8003856:	6213      	str	r3, [r2, #32]
 8003858:	4bad      	ldr	r3, [pc, #692]	; (8003b10 <HAL_RCC_OscConfig+0xc58>)
 800385a:	6a1b      	ldr	r3, [r3, #32]
 800385c:	4aac      	ldr	r2, [pc, #688]	; (8003b10 <HAL_RCC_OscConfig+0xc58>)
 800385e:	f023 0304 	bic.w	r3, r3, #4
 8003862:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003864:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003868:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	2b00      	cmp	r3, #0
 8003872:	f000 8081 	beq.w	8003978 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003876:	f7fe f9ef 	bl	8001c58 <HAL_GetTick>
 800387a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800387e:	e00b      	b.n	8003898 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003880:	f7fe f9ea 	bl	8001c58 <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003890:	4293      	cmp	r3, r2
 8003892:	d901      	bls.n	8003898 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003894:	2303      	movs	r3, #3
 8003896:	e345      	b.n	8003f24 <HAL_RCC_OscConfig+0x106c>
 8003898:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800389c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80038a0:	2202      	movs	r2, #2
 80038a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038a8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	fa93 f2a3 	rbit	r2, r3
 80038b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038b6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80038ba:	601a      	str	r2, [r3, #0]
 80038bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038c0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80038c4:	2202      	movs	r2, #2
 80038c6:	601a      	str	r2, [r3, #0]
 80038c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038cc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	fa93 f2a3 	rbit	r2, r3
 80038d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038da:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80038de:	601a      	str	r2, [r3, #0]
  return result;
 80038e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038e4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80038e8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038ea:	fab3 f383 	clz	r3, r3
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	095b      	lsrs	r3, r3, #5
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	f043 0302 	orr.w	r3, r3, #2
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	2b02      	cmp	r3, #2
 80038fc:	d102      	bne.n	8003904 <HAL_RCC_OscConfig+0xa4c>
 80038fe:	4b84      	ldr	r3, [pc, #528]	; (8003b10 <HAL_RCC_OscConfig+0xc58>)
 8003900:	6a1b      	ldr	r3, [r3, #32]
 8003902:	e013      	b.n	800392c <HAL_RCC_OscConfig+0xa74>
 8003904:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003908:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800390c:	2202      	movs	r2, #2
 800390e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003910:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003914:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	fa93 f2a3 	rbit	r2, r3
 800391e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003922:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003926:	601a      	str	r2, [r3, #0]
 8003928:	4b79      	ldr	r3, [pc, #484]	; (8003b10 <HAL_RCC_OscConfig+0xc58>)
 800392a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003930:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003934:	2102      	movs	r1, #2
 8003936:	6011      	str	r1, [r2, #0]
 8003938:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800393c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003940:	6812      	ldr	r2, [r2, #0]
 8003942:	fa92 f1a2 	rbit	r1, r2
 8003946:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800394a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800394e:	6011      	str	r1, [r2, #0]
  return result;
 8003950:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003954:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003958:	6812      	ldr	r2, [r2, #0]
 800395a:	fab2 f282 	clz	r2, r2
 800395e:	b2d2      	uxtb	r2, r2
 8003960:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003964:	b2d2      	uxtb	r2, r2
 8003966:	f002 021f 	and.w	r2, r2, #31
 800396a:	2101      	movs	r1, #1
 800396c:	fa01 f202 	lsl.w	r2, r1, r2
 8003970:	4013      	ands	r3, r2
 8003972:	2b00      	cmp	r3, #0
 8003974:	d084      	beq.n	8003880 <HAL_RCC_OscConfig+0x9c8>
 8003976:	e07f      	b.n	8003a78 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003978:	f7fe f96e 	bl	8001c58 <HAL_GetTick>
 800397c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003980:	e00b      	b.n	800399a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003982:	f7fe f969 	bl	8001c58 <HAL_GetTick>
 8003986:	4602      	mov	r2, r0
 8003988:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003992:	4293      	cmp	r3, r2
 8003994:	d901      	bls.n	800399a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	e2c4      	b.n	8003f24 <HAL_RCC_OscConfig+0x106c>
 800399a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800399e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80039a2:	2202      	movs	r2, #2
 80039a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039aa:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	fa93 f2a3 	rbit	r2, r3
 80039b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039b8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80039bc:	601a      	str	r2, [r3, #0]
 80039be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039c2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80039c6:	2202      	movs	r2, #2
 80039c8:	601a      	str	r2, [r3, #0]
 80039ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039ce:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	fa93 f2a3 	rbit	r2, r3
 80039d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039dc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80039e0:	601a      	str	r2, [r3, #0]
  return result;
 80039e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039e6:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80039ea:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039ec:	fab3 f383 	clz	r3, r3
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	095b      	lsrs	r3, r3, #5
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	f043 0302 	orr.w	r3, r3, #2
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d102      	bne.n	8003a06 <HAL_RCC_OscConfig+0xb4e>
 8003a00:	4b43      	ldr	r3, [pc, #268]	; (8003b10 <HAL_RCC_OscConfig+0xc58>)
 8003a02:	6a1b      	ldr	r3, [r3, #32]
 8003a04:	e013      	b.n	8003a2e <HAL_RCC_OscConfig+0xb76>
 8003a06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a0a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003a0e:	2202      	movs	r2, #2
 8003a10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a16:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	fa93 f2a3 	rbit	r2, r3
 8003a20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a24:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003a28:	601a      	str	r2, [r3, #0]
 8003a2a:	4b39      	ldr	r3, [pc, #228]	; (8003b10 <HAL_RCC_OscConfig+0xc58>)
 8003a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a32:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003a36:	2102      	movs	r1, #2
 8003a38:	6011      	str	r1, [r2, #0]
 8003a3a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a3e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003a42:	6812      	ldr	r2, [r2, #0]
 8003a44:	fa92 f1a2 	rbit	r1, r2
 8003a48:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a4c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003a50:	6011      	str	r1, [r2, #0]
  return result;
 8003a52:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a56:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003a5a:	6812      	ldr	r2, [r2, #0]
 8003a5c:	fab2 f282 	clz	r2, r2
 8003a60:	b2d2      	uxtb	r2, r2
 8003a62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a66:	b2d2      	uxtb	r2, r2
 8003a68:	f002 021f 	and.w	r2, r2, #31
 8003a6c:	2101      	movs	r1, #1
 8003a6e:	fa01 f202 	lsl.w	r2, r1, r2
 8003a72:	4013      	ands	r3, r2
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d184      	bne.n	8003982 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003a78:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d105      	bne.n	8003a8c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a80:	4b23      	ldr	r3, [pc, #140]	; (8003b10 <HAL_RCC_OscConfig+0xc58>)
 8003a82:	69db      	ldr	r3, [r3, #28]
 8003a84:	4a22      	ldr	r2, [pc, #136]	; (8003b10 <HAL_RCC_OscConfig+0xc58>)
 8003a86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a8a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a90:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	69db      	ldr	r3, [r3, #28]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	f000 8242 	beq.w	8003f22 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a9e:	4b1c      	ldr	r3, [pc, #112]	; (8003b10 <HAL_RCC_OscConfig+0xc58>)
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	f003 030c 	and.w	r3, r3, #12
 8003aa6:	2b08      	cmp	r3, #8
 8003aa8:	f000 8213 	beq.w	8003ed2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003aac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ab0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	69db      	ldr	r3, [r3, #28]
 8003ab8:	2b02      	cmp	r3, #2
 8003aba:	f040 8162 	bne.w	8003d82 <HAL_RCC_OscConfig+0xeca>
 8003abe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ac2:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003ac6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003aca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003acc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ad0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	fa93 f2a3 	rbit	r2, r3
 8003ada:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ade:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003ae2:	601a      	str	r2, [r3, #0]
  return result;
 8003ae4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ae8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003aec:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aee:	fab3 f383 	clz	r3, r3
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003af8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	461a      	mov	r2, r3
 8003b00:	2300      	movs	r3, #0
 8003b02:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b04:	f7fe f8a8 	bl	8001c58 <HAL_GetTick>
 8003b08:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b0c:	e00c      	b.n	8003b28 <HAL_RCC_OscConfig+0xc70>
 8003b0e:	bf00      	nop
 8003b10:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b14:	f7fe f8a0 	bl	8001c58 <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d901      	bls.n	8003b28 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	e1fd      	b.n	8003f24 <HAL_RCC_OscConfig+0x106c>
 8003b28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b2c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003b30:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b3a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	fa93 f2a3 	rbit	r2, r3
 8003b44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b48:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003b4c:	601a      	str	r2, [r3, #0]
  return result;
 8003b4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b52:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003b56:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b58:	fab3 f383 	clz	r3, r3
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	095b      	lsrs	r3, r3, #5
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	f043 0301 	orr.w	r3, r3, #1
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d102      	bne.n	8003b72 <HAL_RCC_OscConfig+0xcba>
 8003b6c:	4bb0      	ldr	r3, [pc, #704]	; (8003e30 <HAL_RCC_OscConfig+0xf78>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	e027      	b.n	8003bc2 <HAL_RCC_OscConfig+0xd0a>
 8003b72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b76:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003b7a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b84:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	fa93 f2a3 	rbit	r2, r3
 8003b8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b92:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003b96:	601a      	str	r2, [r3, #0]
 8003b98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b9c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003ba0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ba4:	601a      	str	r2, [r3, #0]
 8003ba6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003baa:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	fa93 f2a3 	rbit	r2, r3
 8003bb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bb8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003bbc:	601a      	str	r2, [r3, #0]
 8003bbe:	4b9c      	ldr	r3, [pc, #624]	; (8003e30 <HAL_RCC_OscConfig+0xf78>)
 8003bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003bc6:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003bca:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003bce:	6011      	str	r1, [r2, #0]
 8003bd0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003bd4:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003bd8:	6812      	ldr	r2, [r2, #0]
 8003bda:	fa92 f1a2 	rbit	r1, r2
 8003bde:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003be2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003be6:	6011      	str	r1, [r2, #0]
  return result;
 8003be8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003bec:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003bf0:	6812      	ldr	r2, [r2, #0]
 8003bf2:	fab2 f282 	clz	r2, r2
 8003bf6:	b2d2      	uxtb	r2, r2
 8003bf8:	f042 0220 	orr.w	r2, r2, #32
 8003bfc:	b2d2      	uxtb	r2, r2
 8003bfe:	f002 021f 	and.w	r2, r2, #31
 8003c02:	2101      	movs	r1, #1
 8003c04:	fa01 f202 	lsl.w	r2, r1, r2
 8003c08:	4013      	ands	r3, r2
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d182      	bne.n	8003b14 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c0e:	4b88      	ldr	r3, [pc, #544]	; (8003e30 <HAL_RCC_OscConfig+0xf78>)
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003c16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c1a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003c22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c26:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	6a1b      	ldr	r3, [r3, #32]
 8003c2e:	430b      	orrs	r3, r1
 8003c30:	497f      	ldr	r1, [pc, #508]	; (8003e30 <HAL_RCC_OscConfig+0xf78>)
 8003c32:	4313      	orrs	r3, r2
 8003c34:	604b      	str	r3, [r1, #4]
 8003c36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c3a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003c3e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003c42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c48:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	fa93 f2a3 	rbit	r2, r3
 8003c52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c56:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003c5a:	601a      	str	r2, [r3, #0]
  return result;
 8003c5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c60:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003c64:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c66:	fab3 f383 	clz	r3, r3
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003c70:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	461a      	mov	r2, r3
 8003c78:	2301      	movs	r3, #1
 8003c7a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c7c:	f7fd ffec 	bl	8001c58 <HAL_GetTick>
 8003c80:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c84:	e009      	b.n	8003c9a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c86:	f7fd ffe7 	bl	8001c58 <HAL_GetTick>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d901      	bls.n	8003c9a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e144      	b.n	8003f24 <HAL_RCC_OscConfig+0x106c>
 8003c9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c9e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003ca2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ca6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ca8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cac:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	fa93 f2a3 	rbit	r2, r3
 8003cb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cba:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003cbe:	601a      	str	r2, [r3, #0]
  return result;
 8003cc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cc4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003cc8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003cca:	fab3 f383 	clz	r3, r3
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	095b      	lsrs	r3, r3, #5
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	f043 0301 	orr.w	r3, r3, #1
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d102      	bne.n	8003ce4 <HAL_RCC_OscConfig+0xe2c>
 8003cde:	4b54      	ldr	r3, [pc, #336]	; (8003e30 <HAL_RCC_OscConfig+0xf78>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	e027      	b.n	8003d34 <HAL_RCC_OscConfig+0xe7c>
 8003ce4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ce8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003cec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003cf0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cf6:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	fa93 f2a3 	rbit	r2, r3
 8003d00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d04:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003d08:	601a      	str	r2, [r3, #0]
 8003d0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d0e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003d12:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d16:	601a      	str	r2, [r3, #0]
 8003d18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d1c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	fa93 f2a3 	rbit	r2, r3
 8003d26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d2a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003d2e:	601a      	str	r2, [r3, #0]
 8003d30:	4b3f      	ldr	r3, [pc, #252]	; (8003e30 <HAL_RCC_OscConfig+0xf78>)
 8003d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d34:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d38:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003d3c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003d40:	6011      	str	r1, [r2, #0]
 8003d42:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d46:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003d4a:	6812      	ldr	r2, [r2, #0]
 8003d4c:	fa92 f1a2 	rbit	r1, r2
 8003d50:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d54:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003d58:	6011      	str	r1, [r2, #0]
  return result;
 8003d5a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d5e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003d62:	6812      	ldr	r2, [r2, #0]
 8003d64:	fab2 f282 	clz	r2, r2
 8003d68:	b2d2      	uxtb	r2, r2
 8003d6a:	f042 0220 	orr.w	r2, r2, #32
 8003d6e:	b2d2      	uxtb	r2, r2
 8003d70:	f002 021f 	and.w	r2, r2, #31
 8003d74:	2101      	movs	r1, #1
 8003d76:	fa01 f202 	lsl.w	r2, r1, r2
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d082      	beq.n	8003c86 <HAL_RCC_OscConfig+0xdce>
 8003d80:	e0cf      	b.n	8003f22 <HAL_RCC_OscConfig+0x106a>
 8003d82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d86:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003d8a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003d8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d94:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	fa93 f2a3 	rbit	r2, r3
 8003d9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003da2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003da6:	601a      	str	r2, [r3, #0]
  return result;
 8003da8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dac:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003db0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003db2:	fab3 f383 	clz	r3, r3
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003dbc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dc8:	f7fd ff46 	bl	8001c58 <HAL_GetTick>
 8003dcc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003dd0:	e009      	b.n	8003de6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dd2:	f7fd ff41 	bl	8001c58 <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d901      	bls.n	8003de6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e09e      	b.n	8003f24 <HAL_RCC_OscConfig+0x106c>
 8003de6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dea:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003dee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003df2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003df4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003df8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	fa93 f2a3 	rbit	r2, r3
 8003e02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e06:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003e0a:	601a      	str	r2, [r3, #0]
  return result;
 8003e0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e10:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003e14:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e16:	fab3 f383 	clz	r3, r3
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	095b      	lsrs	r3, r3, #5
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	f043 0301 	orr.w	r3, r3, #1
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d104      	bne.n	8003e34 <HAL_RCC_OscConfig+0xf7c>
 8003e2a:	4b01      	ldr	r3, [pc, #4]	; (8003e30 <HAL_RCC_OscConfig+0xf78>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	e029      	b.n	8003e84 <HAL_RCC_OscConfig+0xfcc>
 8003e30:	40021000 	.word	0x40021000
 8003e34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e38:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003e3c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e46:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	fa93 f2a3 	rbit	r2, r3
 8003e50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e54:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003e58:	601a      	str	r2, [r3, #0]
 8003e5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e5e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003e62:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e66:	601a      	str	r2, [r3, #0]
 8003e68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e6c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	fa93 f2a3 	rbit	r2, r3
 8003e76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e7a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003e7e:	601a      	str	r2, [r3, #0]
 8003e80:	4b2b      	ldr	r3, [pc, #172]	; (8003f30 <HAL_RCC_OscConfig+0x1078>)
 8003e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e84:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003e88:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003e8c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003e90:	6011      	str	r1, [r2, #0]
 8003e92:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003e96:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003e9a:	6812      	ldr	r2, [r2, #0]
 8003e9c:	fa92 f1a2 	rbit	r1, r2
 8003ea0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ea4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003ea8:	6011      	str	r1, [r2, #0]
  return result;
 8003eaa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003eae:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003eb2:	6812      	ldr	r2, [r2, #0]
 8003eb4:	fab2 f282 	clz	r2, r2
 8003eb8:	b2d2      	uxtb	r2, r2
 8003eba:	f042 0220 	orr.w	r2, r2, #32
 8003ebe:	b2d2      	uxtb	r2, r2
 8003ec0:	f002 021f 	and.w	r2, r2, #31
 8003ec4:	2101      	movs	r1, #1
 8003ec6:	fa01 f202 	lsl.w	r2, r1, r2
 8003eca:	4013      	ands	r3, r2
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d180      	bne.n	8003dd2 <HAL_RCC_OscConfig+0xf1a>
 8003ed0:	e027      	b.n	8003f22 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ed2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ed6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	69db      	ldr	r3, [r3, #28]
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d101      	bne.n	8003ee6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e01e      	b.n	8003f24 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003ee6:	4b12      	ldr	r3, [pc, #72]	; (8003f30 <HAL_RCC_OscConfig+0x1078>)
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003eee:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003ef2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003ef6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003efa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	6a1b      	ldr	r3, [r3, #32]
 8003f02:	429a      	cmp	r2, r3
 8003f04:	d10b      	bne.n	8003f1e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003f06:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003f0a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003f0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f12:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d001      	beq.n	8003f22 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e000      	b.n	8003f24 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003f22:	2300      	movs	r3, #0
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	40021000 	.word	0x40021000

08003f34 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b09e      	sub	sp, #120	; 0x78
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d101      	bne.n	8003f4c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e162      	b.n	8004212 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f4c:	4b90      	ldr	r3, [pc, #576]	; (8004190 <HAL_RCC_ClockConfig+0x25c>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 0307 	and.w	r3, r3, #7
 8003f54:	683a      	ldr	r2, [r7, #0]
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d910      	bls.n	8003f7c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f5a:	4b8d      	ldr	r3, [pc, #564]	; (8004190 <HAL_RCC_ClockConfig+0x25c>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f023 0207 	bic.w	r2, r3, #7
 8003f62:	498b      	ldr	r1, [pc, #556]	; (8004190 <HAL_RCC_ClockConfig+0x25c>)
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f6a:	4b89      	ldr	r3, [pc, #548]	; (8004190 <HAL_RCC_ClockConfig+0x25c>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0307 	and.w	r3, r3, #7
 8003f72:	683a      	ldr	r2, [r7, #0]
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d001      	beq.n	8003f7c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e14a      	b.n	8004212 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0302 	and.w	r3, r3, #2
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d008      	beq.n	8003f9a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f88:	4b82      	ldr	r3, [pc, #520]	; (8004194 <HAL_RCC_ClockConfig+0x260>)
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	497f      	ldr	r1, [pc, #508]	; (8004194 <HAL_RCC_ClockConfig+0x260>)
 8003f96:	4313      	orrs	r3, r2
 8003f98:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0301 	and.w	r3, r3, #1
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	f000 80dc 	beq.w	8004160 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d13c      	bne.n	800402a <HAL_RCC_ClockConfig+0xf6>
 8003fb0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003fb4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003fb8:	fa93 f3a3 	rbit	r3, r3
 8003fbc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003fbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fc0:	fab3 f383 	clz	r3, r3
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	095b      	lsrs	r3, r3, #5
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	f043 0301 	orr.w	r3, r3, #1
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d102      	bne.n	8003fda <HAL_RCC_ClockConfig+0xa6>
 8003fd4:	4b6f      	ldr	r3, [pc, #444]	; (8004194 <HAL_RCC_ClockConfig+0x260>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	e00f      	b.n	8003ffa <HAL_RCC_ClockConfig+0xc6>
 8003fda:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003fde:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fe0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003fe2:	fa93 f3a3 	rbit	r3, r3
 8003fe6:	667b      	str	r3, [r7, #100]	; 0x64
 8003fe8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003fec:	663b      	str	r3, [r7, #96]	; 0x60
 8003fee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ff0:	fa93 f3a3 	rbit	r3, r3
 8003ff4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ff6:	4b67      	ldr	r3, [pc, #412]	; (8004194 <HAL_RCC_ClockConfig+0x260>)
 8003ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003ffe:	65ba      	str	r2, [r7, #88]	; 0x58
 8004000:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004002:	fa92 f2a2 	rbit	r2, r2
 8004006:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004008:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800400a:	fab2 f282 	clz	r2, r2
 800400e:	b2d2      	uxtb	r2, r2
 8004010:	f042 0220 	orr.w	r2, r2, #32
 8004014:	b2d2      	uxtb	r2, r2
 8004016:	f002 021f 	and.w	r2, r2, #31
 800401a:	2101      	movs	r1, #1
 800401c:	fa01 f202 	lsl.w	r2, r1, r2
 8004020:	4013      	ands	r3, r2
 8004022:	2b00      	cmp	r3, #0
 8004024:	d17b      	bne.n	800411e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e0f3      	b.n	8004212 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	2b02      	cmp	r3, #2
 8004030:	d13c      	bne.n	80040ac <HAL_RCC_ClockConfig+0x178>
 8004032:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004036:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004038:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800403a:	fa93 f3a3 	rbit	r3, r3
 800403e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004040:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004042:	fab3 f383 	clz	r3, r3
 8004046:	b2db      	uxtb	r3, r3
 8004048:	095b      	lsrs	r3, r3, #5
 800404a:	b2db      	uxtb	r3, r3
 800404c:	f043 0301 	orr.w	r3, r3, #1
 8004050:	b2db      	uxtb	r3, r3
 8004052:	2b01      	cmp	r3, #1
 8004054:	d102      	bne.n	800405c <HAL_RCC_ClockConfig+0x128>
 8004056:	4b4f      	ldr	r3, [pc, #316]	; (8004194 <HAL_RCC_ClockConfig+0x260>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	e00f      	b.n	800407c <HAL_RCC_ClockConfig+0x148>
 800405c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004060:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004062:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004064:	fa93 f3a3 	rbit	r3, r3
 8004068:	647b      	str	r3, [r7, #68]	; 0x44
 800406a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800406e:	643b      	str	r3, [r7, #64]	; 0x40
 8004070:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004072:	fa93 f3a3 	rbit	r3, r3
 8004076:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004078:	4b46      	ldr	r3, [pc, #280]	; (8004194 <HAL_RCC_ClockConfig+0x260>)
 800407a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004080:	63ba      	str	r2, [r7, #56]	; 0x38
 8004082:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004084:	fa92 f2a2 	rbit	r2, r2
 8004088:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800408a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800408c:	fab2 f282 	clz	r2, r2
 8004090:	b2d2      	uxtb	r2, r2
 8004092:	f042 0220 	orr.w	r2, r2, #32
 8004096:	b2d2      	uxtb	r2, r2
 8004098:	f002 021f 	and.w	r2, r2, #31
 800409c:	2101      	movs	r1, #1
 800409e:	fa01 f202 	lsl.w	r2, r1, r2
 80040a2:	4013      	ands	r3, r2
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d13a      	bne.n	800411e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e0b2      	b.n	8004212 <HAL_RCC_ClockConfig+0x2de>
 80040ac:	2302      	movs	r3, #2
 80040ae:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b2:	fa93 f3a3 	rbit	r3, r3
 80040b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80040b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040ba:	fab3 f383 	clz	r3, r3
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	095b      	lsrs	r3, r3, #5
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	f043 0301 	orr.w	r3, r3, #1
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d102      	bne.n	80040d4 <HAL_RCC_ClockConfig+0x1a0>
 80040ce:	4b31      	ldr	r3, [pc, #196]	; (8004194 <HAL_RCC_ClockConfig+0x260>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	e00d      	b.n	80040f0 <HAL_RCC_ClockConfig+0x1bc>
 80040d4:	2302      	movs	r3, #2
 80040d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040da:	fa93 f3a3 	rbit	r3, r3
 80040de:	627b      	str	r3, [r7, #36]	; 0x24
 80040e0:	2302      	movs	r3, #2
 80040e2:	623b      	str	r3, [r7, #32]
 80040e4:	6a3b      	ldr	r3, [r7, #32]
 80040e6:	fa93 f3a3 	rbit	r3, r3
 80040ea:	61fb      	str	r3, [r7, #28]
 80040ec:	4b29      	ldr	r3, [pc, #164]	; (8004194 <HAL_RCC_ClockConfig+0x260>)
 80040ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f0:	2202      	movs	r2, #2
 80040f2:	61ba      	str	r2, [r7, #24]
 80040f4:	69ba      	ldr	r2, [r7, #24]
 80040f6:	fa92 f2a2 	rbit	r2, r2
 80040fa:	617a      	str	r2, [r7, #20]
  return result;
 80040fc:	697a      	ldr	r2, [r7, #20]
 80040fe:	fab2 f282 	clz	r2, r2
 8004102:	b2d2      	uxtb	r2, r2
 8004104:	f042 0220 	orr.w	r2, r2, #32
 8004108:	b2d2      	uxtb	r2, r2
 800410a:	f002 021f 	and.w	r2, r2, #31
 800410e:	2101      	movs	r1, #1
 8004110:	fa01 f202 	lsl.w	r2, r1, r2
 8004114:	4013      	ands	r3, r2
 8004116:	2b00      	cmp	r3, #0
 8004118:	d101      	bne.n	800411e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e079      	b.n	8004212 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800411e:	4b1d      	ldr	r3, [pc, #116]	; (8004194 <HAL_RCC_ClockConfig+0x260>)
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	f023 0203 	bic.w	r2, r3, #3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	491a      	ldr	r1, [pc, #104]	; (8004194 <HAL_RCC_ClockConfig+0x260>)
 800412c:	4313      	orrs	r3, r2
 800412e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004130:	f7fd fd92 	bl	8001c58 <HAL_GetTick>
 8004134:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004136:	e00a      	b.n	800414e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004138:	f7fd fd8e 	bl	8001c58 <HAL_GetTick>
 800413c:	4602      	mov	r2, r0
 800413e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004140:	1ad3      	subs	r3, r2, r3
 8004142:	f241 3288 	movw	r2, #5000	; 0x1388
 8004146:	4293      	cmp	r3, r2
 8004148:	d901      	bls.n	800414e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e061      	b.n	8004212 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800414e:	4b11      	ldr	r3, [pc, #68]	; (8004194 <HAL_RCC_ClockConfig+0x260>)
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	f003 020c 	and.w	r2, r3, #12
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	429a      	cmp	r2, r3
 800415e:	d1eb      	bne.n	8004138 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004160:	4b0b      	ldr	r3, [pc, #44]	; (8004190 <HAL_RCC_ClockConfig+0x25c>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0307 	and.w	r3, r3, #7
 8004168:	683a      	ldr	r2, [r7, #0]
 800416a:	429a      	cmp	r2, r3
 800416c:	d214      	bcs.n	8004198 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800416e:	4b08      	ldr	r3, [pc, #32]	; (8004190 <HAL_RCC_ClockConfig+0x25c>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f023 0207 	bic.w	r2, r3, #7
 8004176:	4906      	ldr	r1, [pc, #24]	; (8004190 <HAL_RCC_ClockConfig+0x25c>)
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	4313      	orrs	r3, r2
 800417c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800417e:	4b04      	ldr	r3, [pc, #16]	; (8004190 <HAL_RCC_ClockConfig+0x25c>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0307 	and.w	r3, r3, #7
 8004186:	683a      	ldr	r2, [r7, #0]
 8004188:	429a      	cmp	r2, r3
 800418a:	d005      	beq.n	8004198 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	e040      	b.n	8004212 <HAL_RCC_ClockConfig+0x2de>
 8004190:	40022000 	.word	0x40022000
 8004194:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 0304 	and.w	r3, r3, #4
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d008      	beq.n	80041b6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041a4:	4b1d      	ldr	r3, [pc, #116]	; (800421c <HAL_RCC_ClockConfig+0x2e8>)
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	491a      	ldr	r1, [pc, #104]	; (800421c <HAL_RCC_ClockConfig+0x2e8>)
 80041b2:	4313      	orrs	r3, r2
 80041b4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0308 	and.w	r3, r3, #8
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d009      	beq.n	80041d6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041c2:	4b16      	ldr	r3, [pc, #88]	; (800421c <HAL_RCC_ClockConfig+0x2e8>)
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	00db      	lsls	r3, r3, #3
 80041d0:	4912      	ldr	r1, [pc, #72]	; (800421c <HAL_RCC_ClockConfig+0x2e8>)
 80041d2:	4313      	orrs	r3, r2
 80041d4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80041d6:	f000 f829 	bl	800422c <HAL_RCC_GetSysClockFreq>
 80041da:	4601      	mov	r1, r0
 80041dc:	4b0f      	ldr	r3, [pc, #60]	; (800421c <HAL_RCC_ClockConfig+0x2e8>)
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041e4:	22f0      	movs	r2, #240	; 0xf0
 80041e6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041e8:	693a      	ldr	r2, [r7, #16]
 80041ea:	fa92 f2a2 	rbit	r2, r2
 80041ee:	60fa      	str	r2, [r7, #12]
  return result;
 80041f0:	68fa      	ldr	r2, [r7, #12]
 80041f2:	fab2 f282 	clz	r2, r2
 80041f6:	b2d2      	uxtb	r2, r2
 80041f8:	40d3      	lsrs	r3, r2
 80041fa:	4a09      	ldr	r2, [pc, #36]	; (8004220 <HAL_RCC_ClockConfig+0x2ec>)
 80041fc:	5cd3      	ldrb	r3, [r2, r3]
 80041fe:	fa21 f303 	lsr.w	r3, r1, r3
 8004202:	4a08      	ldr	r2, [pc, #32]	; (8004224 <HAL_RCC_ClockConfig+0x2f0>)
 8004204:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004206:	4b08      	ldr	r3, [pc, #32]	; (8004228 <HAL_RCC_ClockConfig+0x2f4>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4618      	mov	r0, r3
 800420c:	f7fd fce0 	bl	8001bd0 <HAL_InitTick>
  
  return HAL_OK;
 8004210:	2300      	movs	r3, #0
}
 8004212:	4618      	mov	r0, r3
 8004214:	3778      	adds	r7, #120	; 0x78
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	40021000 	.word	0x40021000
 8004220:	080069f8 	.word	0x080069f8
 8004224:	20000008 	.word	0x20000008
 8004228:	2000000c 	.word	0x2000000c

0800422c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800422c:	b480      	push	{r7}
 800422e:	b08b      	sub	sp, #44	; 0x2c
 8004230:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004232:	2300      	movs	r3, #0
 8004234:	61fb      	str	r3, [r7, #28]
 8004236:	2300      	movs	r3, #0
 8004238:	61bb      	str	r3, [r7, #24]
 800423a:	2300      	movs	r3, #0
 800423c:	627b      	str	r3, [r7, #36]	; 0x24
 800423e:	2300      	movs	r3, #0
 8004240:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004242:	2300      	movs	r3, #0
 8004244:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004246:	4b29      	ldr	r3, [pc, #164]	; (80042ec <HAL_RCC_GetSysClockFreq+0xc0>)
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	f003 030c 	and.w	r3, r3, #12
 8004252:	2b04      	cmp	r3, #4
 8004254:	d002      	beq.n	800425c <HAL_RCC_GetSysClockFreq+0x30>
 8004256:	2b08      	cmp	r3, #8
 8004258:	d003      	beq.n	8004262 <HAL_RCC_GetSysClockFreq+0x36>
 800425a:	e03c      	b.n	80042d6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800425c:	4b24      	ldr	r3, [pc, #144]	; (80042f0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800425e:	623b      	str	r3, [r7, #32]
      break;
 8004260:	e03c      	b.n	80042dc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004268:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800426c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800426e:	68ba      	ldr	r2, [r7, #8]
 8004270:	fa92 f2a2 	rbit	r2, r2
 8004274:	607a      	str	r2, [r7, #4]
  return result;
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	fab2 f282 	clz	r2, r2
 800427c:	b2d2      	uxtb	r2, r2
 800427e:	40d3      	lsrs	r3, r2
 8004280:	4a1c      	ldr	r2, [pc, #112]	; (80042f4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004282:	5cd3      	ldrb	r3, [r2, r3]
 8004284:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004286:	4b19      	ldr	r3, [pc, #100]	; (80042ec <HAL_RCC_GetSysClockFreq+0xc0>)
 8004288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800428a:	f003 030f 	and.w	r3, r3, #15
 800428e:	220f      	movs	r2, #15
 8004290:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004292:	693a      	ldr	r2, [r7, #16]
 8004294:	fa92 f2a2 	rbit	r2, r2
 8004298:	60fa      	str	r2, [r7, #12]
  return result;
 800429a:	68fa      	ldr	r2, [r7, #12]
 800429c:	fab2 f282 	clz	r2, r2
 80042a0:	b2d2      	uxtb	r2, r2
 80042a2:	40d3      	lsrs	r3, r2
 80042a4:	4a14      	ldr	r2, [pc, #80]	; (80042f8 <HAL_RCC_GetSysClockFreq+0xcc>)
 80042a6:	5cd3      	ldrb	r3, [r2, r3]
 80042a8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d008      	beq.n	80042c6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80042b4:	4a0e      	ldr	r2, [pc, #56]	; (80042f0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80042b6:	69bb      	ldr	r3, [r7, #24]
 80042b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	fb02 f303 	mul.w	r3, r2, r3
 80042c2:	627b      	str	r3, [r7, #36]	; 0x24
 80042c4:	e004      	b.n	80042d0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	4a0c      	ldr	r2, [pc, #48]	; (80042fc <HAL_RCC_GetSysClockFreq+0xd0>)
 80042ca:	fb02 f303 	mul.w	r3, r2, r3
 80042ce:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80042d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d2:	623b      	str	r3, [r7, #32]
      break;
 80042d4:	e002      	b.n	80042dc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80042d6:	4b06      	ldr	r3, [pc, #24]	; (80042f0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80042d8:	623b      	str	r3, [r7, #32]
      break;
 80042da:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042dc:	6a3b      	ldr	r3, [r7, #32]
}
 80042de:	4618      	mov	r0, r3
 80042e0:	372c      	adds	r7, #44	; 0x2c
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr
 80042ea:	bf00      	nop
 80042ec:	40021000 	.word	0x40021000
 80042f0:	007a1200 	.word	0x007a1200
 80042f4:	08006a08 	.word	0x08006a08
 80042f8:	08006a18 	.word	0x08006a18
 80042fc:	003d0900 	.word	0x003d0900

08004300 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b092      	sub	sp, #72	; 0x48
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004308:	2300      	movs	r3, #0
 800430a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800430c:	2300      	movs	r3, #0
 800430e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004310:	2300      	movs	r3, #0
 8004312:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800431e:	2b00      	cmp	r3, #0
 8004320:	f000 80d4 	beq.w	80044cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004324:	4b4e      	ldr	r3, [pc, #312]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004326:	69db      	ldr	r3, [r3, #28]
 8004328:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d10e      	bne.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004330:	4b4b      	ldr	r3, [pc, #300]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004332:	69db      	ldr	r3, [r3, #28]
 8004334:	4a4a      	ldr	r2, [pc, #296]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004336:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800433a:	61d3      	str	r3, [r2, #28]
 800433c:	4b48      	ldr	r3, [pc, #288]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800433e:	69db      	ldr	r3, [r3, #28]
 8004340:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004344:	60bb      	str	r3, [r7, #8]
 8004346:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004348:	2301      	movs	r3, #1
 800434a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800434e:	4b45      	ldr	r3, [pc, #276]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004356:	2b00      	cmp	r3, #0
 8004358:	d118      	bne.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800435a:	4b42      	ldr	r3, [pc, #264]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a41      	ldr	r2, [pc, #260]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004360:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004364:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004366:	f7fd fc77 	bl	8001c58 <HAL_GetTick>
 800436a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800436c:	e008      	b.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800436e:	f7fd fc73 	bl	8001c58 <HAL_GetTick>
 8004372:	4602      	mov	r2, r0
 8004374:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004376:	1ad3      	subs	r3, r2, r3
 8004378:	2b64      	cmp	r3, #100	; 0x64
 800437a:	d901      	bls.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800437c:	2303      	movs	r3, #3
 800437e:	e13c      	b.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004380:	4b38      	ldr	r3, [pc, #224]	; (8004464 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004388:	2b00      	cmp	r3, #0
 800438a:	d0f0      	beq.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800438c:	4b34      	ldr	r3, [pc, #208]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800438e:	6a1b      	ldr	r3, [r3, #32]
 8004390:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004394:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004396:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004398:	2b00      	cmp	r3, #0
 800439a:	f000 8084 	beq.w	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d07c      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80043ac:	4b2c      	ldr	r3, [pc, #176]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043ae:	6a1b      	ldr	r3, [r3, #32]
 80043b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80043ba:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043be:	fa93 f3a3 	rbit	r3, r3
 80043c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80043c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80043c6:	fab3 f383 	clz	r3, r3
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	461a      	mov	r2, r3
 80043ce:	4b26      	ldr	r3, [pc, #152]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80043d0:	4413      	add	r3, r2
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	461a      	mov	r2, r3
 80043d6:	2301      	movs	r3, #1
 80043d8:	6013      	str	r3, [r2, #0]
 80043da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80043de:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043e2:	fa93 f3a3 	rbit	r3, r3
 80043e6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80043e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80043ea:	fab3 f383 	clz	r3, r3
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	461a      	mov	r2, r3
 80043f2:	4b1d      	ldr	r3, [pc, #116]	; (8004468 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80043f4:	4413      	add	r3, r2
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	461a      	mov	r2, r3
 80043fa:	2300      	movs	r3, #0
 80043fc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80043fe:	4a18      	ldr	r2, [pc, #96]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004400:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004402:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004404:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004406:	f003 0301 	and.w	r3, r3, #1
 800440a:	2b00      	cmp	r3, #0
 800440c:	d04b      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800440e:	f7fd fc23 	bl	8001c58 <HAL_GetTick>
 8004412:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004414:	e00a      	b.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004416:	f7fd fc1f 	bl	8001c58 <HAL_GetTick>
 800441a:	4602      	mov	r2, r0
 800441c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800441e:	1ad3      	subs	r3, r2, r3
 8004420:	f241 3288 	movw	r2, #5000	; 0x1388
 8004424:	4293      	cmp	r3, r2
 8004426:	d901      	bls.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004428:	2303      	movs	r3, #3
 800442a:	e0e6      	b.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 800442c:	2302      	movs	r3, #2
 800442e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004432:	fa93 f3a3 	rbit	r3, r3
 8004436:	627b      	str	r3, [r7, #36]	; 0x24
 8004438:	2302      	movs	r3, #2
 800443a:	623b      	str	r3, [r7, #32]
 800443c:	6a3b      	ldr	r3, [r7, #32]
 800443e:	fa93 f3a3 	rbit	r3, r3
 8004442:	61fb      	str	r3, [r7, #28]
  return result;
 8004444:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004446:	fab3 f383 	clz	r3, r3
 800444a:	b2db      	uxtb	r3, r3
 800444c:	095b      	lsrs	r3, r3, #5
 800444e:	b2db      	uxtb	r3, r3
 8004450:	f043 0302 	orr.w	r3, r3, #2
 8004454:	b2db      	uxtb	r3, r3
 8004456:	2b02      	cmp	r3, #2
 8004458:	d108      	bne.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800445a:	4b01      	ldr	r3, [pc, #4]	; (8004460 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800445c:	6a1b      	ldr	r3, [r3, #32]
 800445e:	e00d      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004460:	40021000 	.word	0x40021000
 8004464:	40007000 	.word	0x40007000
 8004468:	10908100 	.word	0x10908100
 800446c:	2302      	movs	r3, #2
 800446e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004470:	69bb      	ldr	r3, [r7, #24]
 8004472:	fa93 f3a3 	rbit	r3, r3
 8004476:	617b      	str	r3, [r7, #20]
 8004478:	4b62      	ldr	r3, [pc, #392]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800447a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447c:	2202      	movs	r2, #2
 800447e:	613a      	str	r2, [r7, #16]
 8004480:	693a      	ldr	r2, [r7, #16]
 8004482:	fa92 f2a2 	rbit	r2, r2
 8004486:	60fa      	str	r2, [r7, #12]
  return result;
 8004488:	68fa      	ldr	r2, [r7, #12]
 800448a:	fab2 f282 	clz	r2, r2
 800448e:	b2d2      	uxtb	r2, r2
 8004490:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004494:	b2d2      	uxtb	r2, r2
 8004496:	f002 021f 	and.w	r2, r2, #31
 800449a:	2101      	movs	r1, #1
 800449c:	fa01 f202 	lsl.w	r2, r1, r2
 80044a0:	4013      	ands	r3, r2
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d0b7      	beq.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80044a6:	4b57      	ldr	r3, [pc, #348]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80044a8:	6a1b      	ldr	r3, [r3, #32]
 80044aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	4954      	ldr	r1, [pc, #336]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80044b4:	4313      	orrs	r3, r2
 80044b6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80044b8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d105      	bne.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044c0:	4b50      	ldr	r3, [pc, #320]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80044c2:	69db      	ldr	r3, [r3, #28]
 80044c4:	4a4f      	ldr	r2, [pc, #316]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80044c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044ca:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 0301 	and.w	r3, r3, #1
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d008      	beq.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80044d8:	4b4a      	ldr	r3, [pc, #296]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80044da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044dc:	f023 0203 	bic.w	r2, r3, #3
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	4947      	ldr	r1, [pc, #284]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80044e6:	4313      	orrs	r3, r2
 80044e8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0320 	and.w	r3, r3, #32
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d008      	beq.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80044f6:	4b43      	ldr	r3, [pc, #268]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80044f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044fa:	f023 0210 	bic.w	r2, r3, #16
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	4940      	ldr	r1, [pc, #256]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004504:	4313      	orrs	r3, r2
 8004506:	630b      	str	r3, [r1, #48]	; 0x30
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004510:	2b00      	cmp	r3, #0
 8004512:	d008      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004514:	4b3b      	ldr	r3, [pc, #236]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004518:	f023 0220 	bic.w	r2, r3, #32
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	691b      	ldr	r3, [r3, #16]
 8004520:	4938      	ldr	r1, [pc, #224]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004522:	4313      	orrs	r3, r2
 8004524:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d008      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004532:	4b34      	ldr	r3, [pc, #208]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004536:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	695b      	ldr	r3, [r3, #20]
 800453e:	4931      	ldr	r1, [pc, #196]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004540:	4313      	orrs	r3, r2
 8004542:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800454c:	2b00      	cmp	r3, #0
 800454e:	d008      	beq.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004550:	4b2c      	ldr	r3, [pc, #176]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	69db      	ldr	r3, [r3, #28]
 800455c:	4929      	ldr	r1, [pc, #164]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800455e:	4313      	orrs	r3, r2
 8004560:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800456a:	2b00      	cmp	r3, #0
 800456c:	d008      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 800456e:	4b25      	ldr	r3, [pc, #148]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004572:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	699b      	ldr	r3, [r3, #24]
 800457a:	4922      	ldr	r1, [pc, #136]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800457c:	4313      	orrs	r3, r2
 800457e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004588:	2b00      	cmp	r3, #0
 800458a:	d008      	beq.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800458c:	4b1d      	ldr	r3, [pc, #116]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800458e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004590:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6a1b      	ldr	r3, [r3, #32]
 8004598:	491a      	ldr	r1, [pc, #104]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800459a:	4313      	orrs	r3, r2
 800459c:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d008      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80045aa:	4b16      	ldr	r3, [pc, #88]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80045ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ae:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b6:	4913      	ldr	r1, [pc, #76]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80045b8:	4313      	orrs	r3, r2
 80045ba:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d008      	beq.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80045c8:	4b0e      	ldr	r3, [pc, #56]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80045ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045cc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045d4:	490b      	ldr	r1, [pc, #44]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80045d6:	4313      	orrs	r3, r2
 80045d8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d008      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80045e6:	4b07      	ldr	r3, [pc, #28]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80045e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ea:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f2:	4904      	ldr	r1, [pc, #16]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80045f4:	4313      	orrs	r3, r2
 80045f6:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3748      	adds	r7, #72	; 0x48
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	40021000 	.word	0x40021000

08004608 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d101      	bne.n	800461a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e09d      	b.n	8004756 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461e:	2b00      	cmp	r3, #0
 8004620:	d108      	bne.n	8004634 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800462a:	d009      	beq.n	8004640 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2200      	movs	r2, #0
 8004630:	61da      	str	r2, [r3, #28]
 8004632:	e005      	b.n	8004640 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800464c:	b2db      	uxtb	r3, r3
 800464e:	2b00      	cmp	r3, #0
 8004650:	d106      	bne.n	8004660 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f7fd f8e6 	bl	800182c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2202      	movs	r2, #2
 8004664:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004676:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004680:	d902      	bls.n	8004688 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004682:	2300      	movs	r3, #0
 8004684:	60fb      	str	r3, [r7, #12]
 8004686:	e002      	b.n	800468e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004688:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800468c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004696:	d007      	beq.n	80046a8 <HAL_SPI_Init+0xa0>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80046a0:	d002      	beq.n	80046a8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80046b8:	431a      	orrs	r2, r3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	f003 0302 	and.w	r3, r3, #2
 80046c2:	431a      	orrs	r2, r3
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	695b      	ldr	r3, [r3, #20]
 80046c8:	f003 0301 	and.w	r3, r3, #1
 80046cc:	431a      	orrs	r2, r3
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	699b      	ldr	r3, [r3, #24]
 80046d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046d6:	431a      	orrs	r2, r3
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	69db      	ldr	r3, [r3, #28]
 80046dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80046e0:	431a      	orrs	r2, r3
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a1b      	ldr	r3, [r3, #32]
 80046e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046ea:	ea42 0103 	orr.w	r1, r2, r3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	430a      	orrs	r2, r1
 80046fc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	699b      	ldr	r3, [r3, #24]
 8004702:	0c1b      	lsrs	r3, r3, #16
 8004704:	f003 0204 	and.w	r2, r3, #4
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470c:	f003 0310 	and.w	r3, r3, #16
 8004710:	431a      	orrs	r2, r3
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004716:	f003 0308 	and.w	r3, r3, #8
 800471a:	431a      	orrs	r2, r3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004724:	ea42 0103 	orr.w	r1, r2, r3
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	430a      	orrs	r2, r1
 8004734:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	69da      	ldr	r2, [r3, #28]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004744:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004754:	2300      	movs	r3, #0
}
 8004756:	4618      	mov	r0, r3
 8004758:	3710      	adds	r7, #16
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}

0800475e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800475e:	b580      	push	{r7, lr}
 8004760:	b088      	sub	sp, #32
 8004762:	af00      	add	r7, sp, #0
 8004764:	60f8      	str	r0, [r7, #12]
 8004766:	60b9      	str	r1, [r7, #8]
 8004768:	603b      	str	r3, [r7, #0]
 800476a:	4613      	mov	r3, r2
 800476c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800476e:	2300      	movs	r3, #0
 8004770:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004778:	2b01      	cmp	r3, #1
 800477a:	d101      	bne.n	8004780 <HAL_SPI_Transmit+0x22>
 800477c:	2302      	movs	r3, #2
 800477e:	e15f      	b.n	8004a40 <HAL_SPI_Transmit+0x2e2>
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004788:	f7fd fa66 	bl	8001c58 <HAL_GetTick>
 800478c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800478e:	88fb      	ldrh	r3, [r7, #6]
 8004790:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004798:	b2db      	uxtb	r3, r3
 800479a:	2b01      	cmp	r3, #1
 800479c:	d002      	beq.n	80047a4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800479e:	2302      	movs	r3, #2
 80047a0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80047a2:	e148      	b.n	8004a36 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d002      	beq.n	80047b0 <HAL_SPI_Transmit+0x52>
 80047aa:	88fb      	ldrh	r3, [r7, #6]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d102      	bne.n	80047b6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80047b4:	e13f      	b.n	8004a36 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2203      	movs	r2, #3
 80047ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2200      	movs	r2, #0
 80047c2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	68ba      	ldr	r2, [r7, #8]
 80047c8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	88fa      	ldrh	r2, [r7, #6]
 80047ce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	88fa      	ldrh	r2, [r7, #6]
 80047d4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2200      	movs	r2, #0
 80047da:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2200      	movs	r2, #0
 80047e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2200      	movs	r2, #0
 80047e8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2200      	movs	r2, #0
 80047f0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2200      	movs	r2, #0
 80047f6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004800:	d10f      	bne.n	8004822 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004810:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004820:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800482c:	2b40      	cmp	r3, #64	; 0x40
 800482e:	d007      	beq.n	8004840 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800483e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004848:	d94f      	bls.n	80048ea <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d002      	beq.n	8004858 <HAL_SPI_Transmit+0xfa>
 8004852:	8afb      	ldrh	r3, [r7, #22]
 8004854:	2b01      	cmp	r3, #1
 8004856:	d142      	bne.n	80048de <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800485c:	881a      	ldrh	r2, [r3, #0]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004868:	1c9a      	adds	r2, r3, #2
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004872:	b29b      	uxth	r3, r3
 8004874:	3b01      	subs	r3, #1
 8004876:	b29a      	uxth	r2, r3
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800487c:	e02f      	b.n	80048de <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	f003 0302 	and.w	r3, r3, #2
 8004888:	2b02      	cmp	r3, #2
 800488a:	d112      	bne.n	80048b2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004890:	881a      	ldrh	r2, [r3, #0]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800489c:	1c9a      	adds	r2, r3, #2
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	3b01      	subs	r3, #1
 80048aa:	b29a      	uxth	r2, r3
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	87da      	strh	r2, [r3, #62]	; 0x3e
 80048b0:	e015      	b.n	80048de <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048b2:	f7fd f9d1 	bl	8001c58 <HAL_GetTick>
 80048b6:	4602      	mov	r2, r0
 80048b8:	69bb      	ldr	r3, [r7, #24]
 80048ba:	1ad3      	subs	r3, r2, r3
 80048bc:	683a      	ldr	r2, [r7, #0]
 80048be:	429a      	cmp	r2, r3
 80048c0:	d803      	bhi.n	80048ca <HAL_SPI_Transmit+0x16c>
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048c8:	d102      	bne.n	80048d0 <HAL_SPI_Transmit+0x172>
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d106      	bne.n	80048de <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 80048d0:	2303      	movs	r3, #3
 80048d2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80048dc:	e0ab      	b.n	8004a36 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d1ca      	bne.n	800487e <HAL_SPI_Transmit+0x120>
 80048e8:	e080      	b.n	80049ec <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d002      	beq.n	80048f8 <HAL_SPI_Transmit+0x19a>
 80048f2:	8afb      	ldrh	r3, [r7, #22]
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d174      	bne.n	80049e2 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d912      	bls.n	8004928 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004906:	881a      	ldrh	r2, [r3, #0]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004912:	1c9a      	adds	r2, r3, #2
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800491c:	b29b      	uxth	r3, r3
 800491e:	3b02      	subs	r3, #2
 8004920:	b29a      	uxth	r2, r3
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004926:	e05c      	b.n	80049e2 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	330c      	adds	r3, #12
 8004932:	7812      	ldrb	r2, [r2, #0]
 8004934:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800493a:	1c5a      	adds	r2, r3, #1
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004944:	b29b      	uxth	r3, r3
 8004946:	3b01      	subs	r3, #1
 8004948:	b29a      	uxth	r2, r3
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800494e:	e048      	b.n	80049e2 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	f003 0302 	and.w	r3, r3, #2
 800495a:	2b02      	cmp	r3, #2
 800495c:	d12b      	bne.n	80049b6 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004962:	b29b      	uxth	r3, r3
 8004964:	2b01      	cmp	r3, #1
 8004966:	d912      	bls.n	800498e <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800496c:	881a      	ldrh	r2, [r3, #0]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004978:	1c9a      	adds	r2, r3, #2
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004982:	b29b      	uxth	r3, r3
 8004984:	3b02      	subs	r3, #2
 8004986:	b29a      	uxth	r2, r3
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800498c:	e029      	b.n	80049e2 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	330c      	adds	r3, #12
 8004998:	7812      	ldrb	r2, [r2, #0]
 800499a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a0:	1c5a      	adds	r2, r3, #1
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	3b01      	subs	r3, #1
 80049ae:	b29a      	uxth	r2, r3
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80049b4:	e015      	b.n	80049e2 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049b6:	f7fd f94f 	bl	8001c58 <HAL_GetTick>
 80049ba:	4602      	mov	r2, r0
 80049bc:	69bb      	ldr	r3, [r7, #24]
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	683a      	ldr	r2, [r7, #0]
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d803      	bhi.n	80049ce <HAL_SPI_Transmit+0x270>
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049cc:	d102      	bne.n	80049d4 <HAL_SPI_Transmit+0x276>
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d106      	bne.n	80049e2 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80049d4:	2303      	movs	r3, #3
 80049d6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80049e0:	e029      	b.n	8004a36 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d1b1      	bne.n	8004950 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80049ec:	69ba      	ldr	r2, [r7, #24]
 80049ee:	6839      	ldr	r1, [r7, #0]
 80049f0:	68f8      	ldr	r0, [r7, #12]
 80049f2:	f000 fcf9 	bl	80053e8 <SPI_EndRxTxTransaction>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d002      	beq.n	8004a02 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2220      	movs	r2, #32
 8004a00:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d10a      	bne.n	8004a20 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	613b      	str	r3, [r7, #16]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	613b      	str	r3, [r7, #16]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	613b      	str	r3, [r7, #16]
 8004a1e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d002      	beq.n	8004a2e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	77fb      	strb	r3, [r7, #31]
 8004a2c:	e003      	b.n	8004a36 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2201      	movs	r2, #1
 8004a32:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004a3e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3720      	adds	r7, #32
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b088      	sub	sp, #32
 8004a4c:	af02      	add	r7, sp, #8
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	60b9      	str	r1, [r7, #8]
 8004a52:	603b      	str	r3, [r7, #0]
 8004a54:	4613      	mov	r3, r2
 8004a56:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d002      	beq.n	8004a6e <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8004a68:	2302      	movs	r3, #2
 8004a6a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004a6c:	e11a      	b.n	8004ca4 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a76:	d112      	bne.n	8004a9e <HAL_SPI_Receive+0x56>
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d10e      	bne.n	8004a9e <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2204      	movs	r2, #4
 8004a84:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004a88:	88fa      	ldrh	r2, [r7, #6]
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	9300      	str	r3, [sp, #0]
 8004a8e:	4613      	mov	r3, r2
 8004a90:	68ba      	ldr	r2, [r7, #8]
 8004a92:	68b9      	ldr	r1, [r7, #8]
 8004a94:	68f8      	ldr	r0, [r7, #12]
 8004a96:	f000 f90e 	bl	8004cb6 <HAL_SPI_TransmitReceive>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	e107      	b.n	8004cae <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d101      	bne.n	8004aac <HAL_SPI_Receive+0x64>
 8004aa8:	2302      	movs	r3, #2
 8004aaa:	e100      	b.n	8004cae <HAL_SPI_Receive+0x266>
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ab4:	f7fd f8d0 	bl	8001c58 <HAL_GetTick>
 8004ab8:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d002      	beq.n	8004ac6 <HAL_SPI_Receive+0x7e>
 8004ac0:	88fb      	ldrh	r3, [r7, #6]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d102      	bne.n	8004acc <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004aca:	e0eb      	b.n	8004ca4 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2204      	movs	r2, #4
 8004ad0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	68ba      	ldr	r2, [r7, #8]
 8004ade:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	88fa      	ldrh	r2, [r7, #6]
 8004ae4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	88fa      	ldrh	r2, [r7, #6]
 8004aec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2200      	movs	r2, #0
 8004af4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2200      	movs	r2, #0
 8004afa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2200      	movs	r2, #0
 8004b00:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2200      	movs	r2, #0
 8004b06:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b16:	d908      	bls.n	8004b2a <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	685a      	ldr	r2, [r3, #4]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004b26:	605a      	str	r2, [r3, #4]
 8004b28:	e007      	b.n	8004b3a <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	685a      	ldr	r2, [r3, #4]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004b38:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b42:	d10f      	bne.n	8004b64 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b52:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004b62:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b6e:	2b40      	cmp	r3, #64	; 0x40
 8004b70:	d007      	beq.n	8004b82 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b80:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b8a:	d86f      	bhi.n	8004c6c <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004b8c:	e034      	b.n	8004bf8 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	f003 0301 	and.w	r3, r3, #1
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d117      	bne.n	8004bcc <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f103 020c 	add.w	r2, r3, #12
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba8:	7812      	ldrb	r2, [r2, #0]
 8004baa:	b2d2      	uxtb	r2, r2
 8004bac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb2:	1c5a      	adds	r2, r3, #1
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	3b01      	subs	r3, #1
 8004bc2:	b29a      	uxth	r2, r3
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004bca:	e015      	b.n	8004bf8 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bcc:	f7fd f844 	bl	8001c58 <HAL_GetTick>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	1ad3      	subs	r3, r2, r3
 8004bd6:	683a      	ldr	r2, [r7, #0]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d803      	bhi.n	8004be4 <HAL_SPI_Receive+0x19c>
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004be2:	d102      	bne.n	8004bea <HAL_SPI_Receive+0x1a2>
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d106      	bne.n	8004bf8 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8004bea:	2303      	movs	r3, #3
 8004bec:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8004bf6:	e055      	b.n	8004ca4 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d1c4      	bne.n	8004b8e <HAL_SPI_Receive+0x146>
 8004c04:	e038      	b.n	8004c78 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	f003 0301 	and.w	r3, r3, #1
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d115      	bne.n	8004c40 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	68da      	ldr	r2, [r3, #12]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c1e:	b292      	uxth	r2, r2
 8004c20:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c26:	1c9a      	adds	r2, r3, #2
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	3b01      	subs	r3, #1
 8004c36:	b29a      	uxth	r2, r3
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004c3e:	e015      	b.n	8004c6c <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c40:	f7fd f80a 	bl	8001c58 <HAL_GetTick>
 8004c44:	4602      	mov	r2, r0
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	683a      	ldr	r2, [r7, #0]
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d803      	bhi.n	8004c58 <HAL_SPI_Receive+0x210>
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c56:	d102      	bne.n	8004c5e <HAL_SPI_Receive+0x216>
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d106      	bne.n	8004c6c <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2201      	movs	r2, #1
 8004c66:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8004c6a:	e01b      	b.n	8004ca4 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d1c6      	bne.n	8004c06 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c78:	693a      	ldr	r2, [r7, #16]
 8004c7a:	6839      	ldr	r1, [r7, #0]
 8004c7c:	68f8      	ldr	r0, [r7, #12]
 8004c7e:	f000 fb5b 	bl	8005338 <SPI_EndRxTransaction>
 8004c82:	4603      	mov	r3, r0
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d002      	beq.n	8004c8e <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2220      	movs	r2, #32
 8004c8c:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d002      	beq.n	8004c9c <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	75fb      	strb	r3, [r7, #23]
 8004c9a:	e003      	b.n	8004ca4 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004cac:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3718      	adds	r7, #24
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}

08004cb6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004cb6:	b580      	push	{r7, lr}
 8004cb8:	b08a      	sub	sp, #40	; 0x28
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	60f8      	str	r0, [r7, #12]
 8004cbe:	60b9      	str	r1, [r7, #8]
 8004cc0:	607a      	str	r2, [r7, #4]
 8004cc2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d101      	bne.n	8004cdc <HAL_SPI_TransmitReceive+0x26>
 8004cd8:	2302      	movs	r3, #2
 8004cda:	e20a      	b.n	80050f2 <HAL_SPI_TransmitReceive+0x43c>
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ce4:	f7fc ffb8 	bl	8001c58 <HAL_GetTick>
 8004ce8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004cf0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004cf8:	887b      	ldrh	r3, [r7, #2]
 8004cfa:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004cfc:	887b      	ldrh	r3, [r7, #2]
 8004cfe:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004d00:	7efb      	ldrb	r3, [r7, #27]
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d00e      	beq.n	8004d24 <HAL_SPI_TransmitReceive+0x6e>
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d0c:	d106      	bne.n	8004d1c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d102      	bne.n	8004d1c <HAL_SPI_TransmitReceive+0x66>
 8004d16:	7efb      	ldrb	r3, [r7, #27]
 8004d18:	2b04      	cmp	r3, #4
 8004d1a:	d003      	beq.n	8004d24 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004d1c:	2302      	movs	r3, #2
 8004d1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004d22:	e1e0      	b.n	80050e6 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d005      	beq.n	8004d36 <HAL_SPI_TransmitReceive+0x80>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d002      	beq.n	8004d36 <HAL_SPI_TransmitReceive+0x80>
 8004d30:	887b      	ldrh	r3, [r7, #2]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d103      	bne.n	8004d3e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004d3c:	e1d3      	b.n	80050e6 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	2b04      	cmp	r3, #4
 8004d48:	d003      	beq.n	8004d52 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2205      	movs	r2, #5
 8004d4e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2200      	movs	r2, #0
 8004d56:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	887a      	ldrh	r2, [r7, #2]
 8004d62:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	887a      	ldrh	r2, [r7, #2]
 8004d6a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	68ba      	ldr	r2, [r7, #8]
 8004d72:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	887a      	ldrh	r2, [r7, #2]
 8004d78:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	887a      	ldrh	r2, [r7, #2]
 8004d7e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2200      	movs	r2, #0
 8004d84:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	68db      	ldr	r3, [r3, #12]
 8004d90:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d94:	d802      	bhi.n	8004d9c <HAL_SPI_TransmitReceive+0xe6>
 8004d96:	8a3b      	ldrh	r3, [r7, #16]
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d908      	bls.n	8004dae <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	685a      	ldr	r2, [r3, #4]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004daa:	605a      	str	r2, [r3, #4]
 8004dac:	e007      	b.n	8004dbe <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	685a      	ldr	r2, [r3, #4]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004dbc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dc8:	2b40      	cmp	r3, #64	; 0x40
 8004dca:	d007      	beq.n	8004ddc <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004dda:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004de4:	f240 8081 	bls.w	8004eea <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d002      	beq.n	8004df6 <HAL_SPI_TransmitReceive+0x140>
 8004df0:	8a7b      	ldrh	r3, [r7, #18]
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d16d      	bne.n	8004ed2 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dfa:	881a      	ldrh	r2, [r3, #0]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e06:	1c9a      	adds	r2, r3, #2
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	3b01      	subs	r3, #1
 8004e14:	b29a      	uxth	r2, r3
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e1a:	e05a      	b.n	8004ed2 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	f003 0302 	and.w	r3, r3, #2
 8004e26:	2b02      	cmp	r3, #2
 8004e28:	d11b      	bne.n	8004e62 <HAL_SPI_TransmitReceive+0x1ac>
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d016      	beq.n	8004e62 <HAL_SPI_TransmitReceive+0x1ac>
 8004e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d113      	bne.n	8004e62 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e3e:	881a      	ldrh	r2, [r3, #0]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e4a:	1c9a      	adds	r2, r3, #2
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	3b01      	subs	r3, #1
 8004e58:	b29a      	uxth	r2, r3
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	f003 0301 	and.w	r3, r3, #1
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d11c      	bne.n	8004eaa <HAL_SPI_TransmitReceive+0x1f4>
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d016      	beq.n	8004eaa <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	68da      	ldr	r2, [r3, #12]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e86:	b292      	uxth	r2, r2
 8004e88:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8e:	1c9a      	adds	r2, r3, #2
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	3b01      	subs	r3, #1
 8004e9e:	b29a      	uxth	r2, r3
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004eaa:	f7fc fed5 	bl	8001c58 <HAL_GetTick>
 8004eae:	4602      	mov	r2, r0
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	1ad3      	subs	r3, r2, r3
 8004eb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d80b      	bhi.n	8004ed2 <HAL_SPI_TransmitReceive+0x21c>
 8004eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ec0:	d007      	beq.n	8004ed2 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8004ec2:	2303      	movs	r3, #3
 8004ec4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8004ed0:	e109      	b.n	80050e6 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d19f      	bne.n	8004e1c <HAL_SPI_TransmitReceive+0x166>
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d199      	bne.n	8004e1c <HAL_SPI_TransmitReceive+0x166>
 8004ee8:	e0e3      	b.n	80050b2 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d003      	beq.n	8004efa <HAL_SPI_TransmitReceive+0x244>
 8004ef2:	8a7b      	ldrh	r3, [r7, #18]
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	f040 80cf 	bne.w	8005098 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d912      	bls.n	8004f2a <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f08:	881a      	ldrh	r2, [r3, #0]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f14:	1c9a      	adds	r2, r3, #2
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	3b02      	subs	r3, #2
 8004f22:	b29a      	uxth	r2, r3
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004f28:	e0b6      	b.n	8005098 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	330c      	adds	r3, #12
 8004f34:	7812      	ldrb	r2, [r2, #0]
 8004f36:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f3c:	1c5a      	adds	r2, r3, #1
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	3b01      	subs	r3, #1
 8004f4a:	b29a      	uxth	r2, r3
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f50:	e0a2      	b.n	8005098 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	f003 0302 	and.w	r3, r3, #2
 8004f5c:	2b02      	cmp	r3, #2
 8004f5e:	d134      	bne.n	8004fca <HAL_SPI_TransmitReceive+0x314>
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d02f      	beq.n	8004fca <HAL_SPI_TransmitReceive+0x314>
 8004f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d12c      	bne.n	8004fca <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d912      	bls.n	8004fa0 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f7e:	881a      	ldrh	r2, [r3, #0]
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f8a:	1c9a      	adds	r2, r3, #2
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	3b02      	subs	r3, #2
 8004f98:	b29a      	uxth	r2, r3
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004f9e:	e012      	b.n	8004fc6 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	330c      	adds	r3, #12
 8004faa:	7812      	ldrb	r2, [r2, #0]
 8004fac:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb2:	1c5a      	adds	r2, r3, #1
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	3b01      	subs	r3, #1
 8004fc0:	b29a      	uxth	r2, r3
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	f003 0301 	and.w	r3, r3, #1
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d148      	bne.n	800506a <HAL_SPI_TransmitReceive+0x3b4>
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d042      	beq.n	800506a <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d923      	bls.n	8005038 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	68da      	ldr	r2, [r3, #12]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffa:	b292      	uxth	r2, r2
 8004ffc:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005002:	1c9a      	adds	r2, r3, #2
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800500e:	b29b      	uxth	r3, r3
 8005010:	3b02      	subs	r3, #2
 8005012:	b29a      	uxth	r2, r3
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005020:	b29b      	uxth	r3, r3
 8005022:	2b01      	cmp	r3, #1
 8005024:	d81f      	bhi.n	8005066 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	685a      	ldr	r2, [r3, #4]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005034:	605a      	str	r2, [r3, #4]
 8005036:	e016      	b.n	8005066 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f103 020c 	add.w	r2, r3, #12
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005044:	7812      	ldrb	r2, [r2, #0]
 8005046:	b2d2      	uxtb	r2, r2
 8005048:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800504e:	1c5a      	adds	r2, r3, #1
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800505a:	b29b      	uxth	r3, r3
 800505c:	3b01      	subs	r3, #1
 800505e:	b29a      	uxth	r2, r3
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005066:	2301      	movs	r3, #1
 8005068:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800506a:	f7fc fdf5 	bl	8001c58 <HAL_GetTick>
 800506e:	4602      	mov	r2, r0
 8005070:	69fb      	ldr	r3, [r7, #28]
 8005072:	1ad3      	subs	r3, r2, r3
 8005074:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005076:	429a      	cmp	r2, r3
 8005078:	d803      	bhi.n	8005082 <HAL_SPI_TransmitReceive+0x3cc>
 800507a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800507c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005080:	d102      	bne.n	8005088 <HAL_SPI_TransmitReceive+0x3d2>
 8005082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005084:	2b00      	cmp	r3, #0
 8005086:	d107      	bne.n	8005098 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8005088:	2303      	movs	r3, #3
 800508a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2201      	movs	r2, #1
 8005092:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8005096:	e026      	b.n	80050e6 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800509c:	b29b      	uxth	r3, r3
 800509e:	2b00      	cmp	r3, #0
 80050a0:	f47f af57 	bne.w	8004f52 <HAL_SPI_TransmitReceive+0x29c>
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	f47f af50 	bne.w	8004f52 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80050b2:	69fa      	ldr	r2, [r7, #28]
 80050b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80050b6:	68f8      	ldr	r0, [r7, #12]
 80050b8:	f000 f996 	bl	80053e8 <SPI_EndRxTxTransaction>
 80050bc:	4603      	mov	r3, r0
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d005      	beq.n	80050ce <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2220      	movs	r2, #32
 80050cc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d003      	beq.n	80050de <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80050dc:	e003      	b.n	80050e6 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2201      	movs	r2, #1
 80050e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2200      	movs	r2, #0
 80050ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80050ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3728      	adds	r7, #40	; 0x28
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
	...

080050fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b088      	sub	sp, #32
 8005100:	af00      	add	r7, sp, #0
 8005102:	60f8      	str	r0, [r7, #12]
 8005104:	60b9      	str	r1, [r7, #8]
 8005106:	603b      	str	r3, [r7, #0]
 8005108:	4613      	mov	r3, r2
 800510a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800510c:	f7fc fda4 	bl	8001c58 <HAL_GetTick>
 8005110:	4602      	mov	r2, r0
 8005112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005114:	1a9b      	subs	r3, r3, r2
 8005116:	683a      	ldr	r2, [r7, #0]
 8005118:	4413      	add	r3, r2
 800511a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800511c:	f7fc fd9c 	bl	8001c58 <HAL_GetTick>
 8005120:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005122:	4b39      	ldr	r3, [pc, #228]	; (8005208 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	015b      	lsls	r3, r3, #5
 8005128:	0d1b      	lsrs	r3, r3, #20
 800512a:	69fa      	ldr	r2, [r7, #28]
 800512c:	fb02 f303 	mul.w	r3, r2, r3
 8005130:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005132:	e054      	b.n	80051de <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800513a:	d050      	beq.n	80051de <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800513c:	f7fc fd8c 	bl	8001c58 <HAL_GetTick>
 8005140:	4602      	mov	r2, r0
 8005142:	69bb      	ldr	r3, [r7, #24]
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	69fa      	ldr	r2, [r7, #28]
 8005148:	429a      	cmp	r2, r3
 800514a:	d902      	bls.n	8005152 <SPI_WaitFlagStateUntilTimeout+0x56>
 800514c:	69fb      	ldr	r3, [r7, #28]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d13d      	bne.n	80051ce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	685a      	ldr	r2, [r3, #4]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005160:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800516a:	d111      	bne.n	8005190 <SPI_WaitFlagStateUntilTimeout+0x94>
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005174:	d004      	beq.n	8005180 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800517e:	d107      	bne.n	8005190 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800518e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005194:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005198:	d10f      	bne.n	80051ba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80051a8:	601a      	str	r2, [r3, #0]
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80051b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2201      	movs	r2, #1
 80051be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2200      	movs	r2, #0
 80051c6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80051ca:	2303      	movs	r3, #3
 80051cc:	e017      	b.n	80051fe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d101      	bne.n	80051d8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80051d4:	2300      	movs	r3, #0
 80051d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	3b01      	subs	r3, #1
 80051dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	689a      	ldr	r2, [r3, #8]
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	4013      	ands	r3, r2
 80051e8:	68ba      	ldr	r2, [r7, #8]
 80051ea:	429a      	cmp	r2, r3
 80051ec:	bf0c      	ite	eq
 80051ee:	2301      	moveq	r3, #1
 80051f0:	2300      	movne	r3, #0
 80051f2:	b2db      	uxtb	r3, r3
 80051f4:	461a      	mov	r2, r3
 80051f6:	79fb      	ldrb	r3, [r7, #7]
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d19b      	bne.n	8005134 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80051fc:	2300      	movs	r3, #0
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3720      	adds	r7, #32
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
 8005206:	bf00      	nop
 8005208:	20000008 	.word	0x20000008

0800520c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b08a      	sub	sp, #40	; 0x28
 8005210:	af00      	add	r7, sp, #0
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	60b9      	str	r1, [r7, #8]
 8005216:	607a      	str	r2, [r7, #4]
 8005218:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800521a:	2300      	movs	r3, #0
 800521c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800521e:	f7fc fd1b 	bl	8001c58 <HAL_GetTick>
 8005222:	4602      	mov	r2, r0
 8005224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005226:	1a9b      	subs	r3, r3, r2
 8005228:	683a      	ldr	r2, [r7, #0]
 800522a:	4413      	add	r3, r2
 800522c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800522e:	f7fc fd13 	bl	8001c58 <HAL_GetTick>
 8005232:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	330c      	adds	r3, #12
 800523a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800523c:	4b3d      	ldr	r3, [pc, #244]	; (8005334 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	4613      	mov	r3, r2
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	4413      	add	r3, r2
 8005246:	00da      	lsls	r2, r3, #3
 8005248:	1ad3      	subs	r3, r2, r3
 800524a:	0d1b      	lsrs	r3, r3, #20
 800524c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800524e:	fb02 f303 	mul.w	r3, r2, r3
 8005252:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005254:	e060      	b.n	8005318 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800525c:	d107      	bne.n	800526e <SPI_WaitFifoStateUntilTimeout+0x62>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d104      	bne.n	800526e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005264:	69fb      	ldr	r3, [r7, #28]
 8005266:	781b      	ldrb	r3, [r3, #0]
 8005268:	b2db      	uxtb	r3, r3
 800526a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800526c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005274:	d050      	beq.n	8005318 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005276:	f7fc fcef 	bl	8001c58 <HAL_GetTick>
 800527a:	4602      	mov	r2, r0
 800527c:	6a3b      	ldr	r3, [r7, #32]
 800527e:	1ad3      	subs	r3, r2, r3
 8005280:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005282:	429a      	cmp	r2, r3
 8005284:	d902      	bls.n	800528c <SPI_WaitFifoStateUntilTimeout+0x80>
 8005286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005288:	2b00      	cmp	r3, #0
 800528a:	d13d      	bne.n	8005308 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	685a      	ldr	r2, [r3, #4]
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800529a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052a4:	d111      	bne.n	80052ca <SPI_WaitFifoStateUntilTimeout+0xbe>
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052ae:	d004      	beq.n	80052ba <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052b8:	d107      	bne.n	80052ca <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052c8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052d2:	d10f      	bne.n	80052f4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80052e2:	601a      	str	r2, [r3, #0]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80052f2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2200      	movs	r2, #0
 8005300:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005304:	2303      	movs	r3, #3
 8005306:	e010      	b.n	800532a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d101      	bne.n	8005312 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800530e:	2300      	movs	r3, #0
 8005310:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005312:	69bb      	ldr	r3, [r7, #24]
 8005314:	3b01      	subs	r3, #1
 8005316:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	689a      	ldr	r2, [r3, #8]
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	4013      	ands	r3, r2
 8005322:	687a      	ldr	r2, [r7, #4]
 8005324:	429a      	cmp	r2, r3
 8005326:	d196      	bne.n	8005256 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005328:	2300      	movs	r3, #0
}
 800532a:	4618      	mov	r0, r3
 800532c:	3728      	adds	r7, #40	; 0x28
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
 8005332:	bf00      	nop
 8005334:	20000008 	.word	0x20000008

08005338 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b086      	sub	sp, #24
 800533c:	af02      	add	r7, sp, #8
 800533e:	60f8      	str	r0, [r7, #12]
 8005340:	60b9      	str	r1, [r7, #8]
 8005342:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800534c:	d111      	bne.n	8005372 <SPI_EndRxTransaction+0x3a>
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005356:	d004      	beq.n	8005362 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005360:	d107      	bne.n	8005372 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005370:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	9300      	str	r3, [sp, #0]
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	2200      	movs	r2, #0
 800537a:	2180      	movs	r1, #128	; 0x80
 800537c:	68f8      	ldr	r0, [r7, #12]
 800537e:	f7ff febd 	bl	80050fc <SPI_WaitFlagStateUntilTimeout>
 8005382:	4603      	mov	r3, r0
 8005384:	2b00      	cmp	r3, #0
 8005386:	d007      	beq.n	8005398 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800538c:	f043 0220 	orr.w	r2, r3, #32
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005394:	2303      	movs	r3, #3
 8005396:	e023      	b.n	80053e0 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053a0:	d11d      	bne.n	80053de <SPI_EndRxTransaction+0xa6>
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053aa:	d004      	beq.n	80053b6 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053b4:	d113      	bne.n	80053de <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	9300      	str	r3, [sp, #0]
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	2200      	movs	r2, #0
 80053be:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80053c2:	68f8      	ldr	r0, [r7, #12]
 80053c4:	f7ff ff22 	bl	800520c <SPI_WaitFifoStateUntilTimeout>
 80053c8:	4603      	mov	r3, r0
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d007      	beq.n	80053de <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053d2:	f043 0220 	orr.w	r2, r3, #32
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80053da:	2303      	movs	r3, #3
 80053dc:	e000      	b.n	80053e0 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80053de:	2300      	movs	r3, #0
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3710      	adds	r7, #16
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}

080053e8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b086      	sub	sp, #24
 80053ec:	af02      	add	r7, sp, #8
 80053ee:	60f8      	str	r0, [r7, #12]
 80053f0:	60b9      	str	r1, [r7, #8]
 80053f2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	9300      	str	r3, [sp, #0]
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	2200      	movs	r2, #0
 80053fc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005400:	68f8      	ldr	r0, [r7, #12]
 8005402:	f7ff ff03 	bl	800520c <SPI_WaitFifoStateUntilTimeout>
 8005406:	4603      	mov	r3, r0
 8005408:	2b00      	cmp	r3, #0
 800540a:	d007      	beq.n	800541c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005410:	f043 0220 	orr.w	r2, r3, #32
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005418:	2303      	movs	r3, #3
 800541a:	e027      	b.n	800546c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	9300      	str	r3, [sp, #0]
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	2200      	movs	r2, #0
 8005424:	2180      	movs	r1, #128	; 0x80
 8005426:	68f8      	ldr	r0, [r7, #12]
 8005428:	f7ff fe68 	bl	80050fc <SPI_WaitFlagStateUntilTimeout>
 800542c:	4603      	mov	r3, r0
 800542e:	2b00      	cmp	r3, #0
 8005430:	d007      	beq.n	8005442 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005436:	f043 0220 	orr.w	r2, r3, #32
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800543e:	2303      	movs	r3, #3
 8005440:	e014      	b.n	800546c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	9300      	str	r3, [sp, #0]
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	2200      	movs	r2, #0
 800544a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800544e:	68f8      	ldr	r0, [r7, #12]
 8005450:	f7ff fedc 	bl	800520c <SPI_WaitFifoStateUntilTimeout>
 8005454:	4603      	mov	r3, r0
 8005456:	2b00      	cmp	r3, #0
 8005458:	d007      	beq.n	800546a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800545e:	f043 0220 	orr.w	r2, r3, #32
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005466:	2303      	movs	r3, #3
 8005468:	e000      	b.n	800546c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800546a:	2300      	movs	r3, #0
}
 800546c:	4618      	mov	r0, r3
 800546e:	3710      	adds	r7, #16
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}

08005474 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b082      	sub	sp, #8
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d101      	bne.n	8005486 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	e049      	b.n	800551a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800548c:	b2db      	uxtb	r3, r3
 800548e:	2b00      	cmp	r3, #0
 8005490:	d106      	bne.n	80054a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2200      	movs	r2, #0
 8005496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f7fc fa0a 	bl	80018b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2202      	movs	r2, #2
 80054a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	3304      	adds	r3, #4
 80054b0:	4619      	mov	r1, r3
 80054b2:	4610      	mov	r0, r2
 80054b4:	f000 fd90 	bl	8005fd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2201      	movs	r2, #1
 80054c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2201      	movs	r2, #1
 80054cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2201      	movs	r2, #1
 80054d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2201      	movs	r2, #1
 80054dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2201      	movs	r2, #1
 80054e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2201      	movs	r2, #1
 80054f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2201      	movs	r2, #1
 80054fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2201      	movs	r2, #1
 8005504:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005518:	2300      	movs	r3, #0
}
 800551a:	4618      	mov	r0, r3
 800551c:	3708      	adds	r7, #8
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
	...

08005524 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005524:	b480      	push	{r7}
 8005526:	b085      	sub	sp, #20
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005532:	b2db      	uxtb	r3, r3
 8005534:	2b01      	cmp	r3, #1
 8005536:	d001      	beq.n	800553c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	e03b      	b.n	80055b4 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2202      	movs	r2, #2
 8005540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	68da      	ldr	r2, [r3, #12]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f042 0201 	orr.w	r2, r2, #1
 8005552:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a19      	ldr	r2, [pc, #100]	; (80055c0 <HAL_TIM_Base_Start_IT+0x9c>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d009      	beq.n	8005572 <HAL_TIM_Base_Start_IT+0x4e>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005566:	d004      	beq.n	8005572 <HAL_TIM_Base_Start_IT+0x4e>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a15      	ldr	r2, [pc, #84]	; (80055c4 <HAL_TIM_Base_Start_IT+0xa0>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d115      	bne.n	800559e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	689a      	ldr	r2, [r3, #8]
 8005578:	4b13      	ldr	r3, [pc, #76]	; (80055c8 <HAL_TIM_Base_Start_IT+0xa4>)
 800557a:	4013      	ands	r3, r2
 800557c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2b06      	cmp	r3, #6
 8005582:	d015      	beq.n	80055b0 <HAL_TIM_Base_Start_IT+0x8c>
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800558a:	d011      	beq.n	80055b0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f042 0201 	orr.w	r2, r2, #1
 800559a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800559c:	e008      	b.n	80055b0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f042 0201 	orr.w	r2, r2, #1
 80055ac:	601a      	str	r2, [r3, #0]
 80055ae:	e000      	b.n	80055b2 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055b0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80055b2:	2300      	movs	r3, #0
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3714      	adds	r7, #20
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr
 80055c0:	40012c00 	.word	0x40012c00
 80055c4:	40014000 	.word	0x40014000
 80055c8:	00010007 	.word	0x00010007

080055cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b082      	sub	sp, #8
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d101      	bne.n	80055de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e049      	b.n	8005672 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d106      	bne.n	80055f8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f000 f841 	bl	800567a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2202      	movs	r2, #2
 80055fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	3304      	adds	r3, #4
 8005608:	4619      	mov	r1, r3
 800560a:	4610      	mov	r0, r2
 800560c:	f000 fce4 	bl	8005fd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2201      	movs	r2, #1
 8005634:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2201      	movs	r2, #1
 8005644:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2201      	movs	r2, #1
 800564c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2201      	movs	r2, #1
 8005654:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2201      	movs	r2, #1
 800565c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2201      	movs	r2, #1
 8005664:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005670:	2300      	movs	r3, #0
}
 8005672:	4618      	mov	r0, r3
 8005674:	3708      	adds	r7, #8
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}

0800567a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800567a:	b480      	push	{r7}
 800567c:	b083      	sub	sp, #12
 800567e:	af00      	add	r7, sp, #0
 8005680:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005682:	bf00      	nop
 8005684:	370c      	adds	r7, #12
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr
	...

08005690 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b084      	sub	sp, #16
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d109      	bne.n	80056b4 <HAL_TIM_PWM_Start+0x24>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	bf14      	ite	ne
 80056ac:	2301      	movne	r3, #1
 80056ae:	2300      	moveq	r3, #0
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	e03c      	b.n	800572e <HAL_TIM_PWM_Start+0x9e>
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	2b04      	cmp	r3, #4
 80056b8:	d109      	bne.n	80056ce <HAL_TIM_PWM_Start+0x3e>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	bf14      	ite	ne
 80056c6:	2301      	movne	r3, #1
 80056c8:	2300      	moveq	r3, #0
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	e02f      	b.n	800572e <HAL_TIM_PWM_Start+0x9e>
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	2b08      	cmp	r3, #8
 80056d2:	d109      	bne.n	80056e8 <HAL_TIM_PWM_Start+0x58>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	2b01      	cmp	r3, #1
 80056de:	bf14      	ite	ne
 80056e0:	2301      	movne	r3, #1
 80056e2:	2300      	moveq	r3, #0
 80056e4:	b2db      	uxtb	r3, r3
 80056e6:	e022      	b.n	800572e <HAL_TIM_PWM_Start+0x9e>
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	2b0c      	cmp	r3, #12
 80056ec:	d109      	bne.n	8005702 <HAL_TIM_PWM_Start+0x72>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	bf14      	ite	ne
 80056fa:	2301      	movne	r3, #1
 80056fc:	2300      	moveq	r3, #0
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	e015      	b.n	800572e <HAL_TIM_PWM_Start+0x9e>
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	2b10      	cmp	r3, #16
 8005706:	d109      	bne.n	800571c <HAL_TIM_PWM_Start+0x8c>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800570e:	b2db      	uxtb	r3, r3
 8005710:	2b01      	cmp	r3, #1
 8005712:	bf14      	ite	ne
 8005714:	2301      	movne	r3, #1
 8005716:	2300      	moveq	r3, #0
 8005718:	b2db      	uxtb	r3, r3
 800571a:	e008      	b.n	800572e <HAL_TIM_PWM_Start+0x9e>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005722:	b2db      	uxtb	r3, r3
 8005724:	2b01      	cmp	r3, #1
 8005726:	bf14      	ite	ne
 8005728:	2301      	movne	r3, #1
 800572a:	2300      	moveq	r3, #0
 800572c:	b2db      	uxtb	r3, r3
 800572e:	2b00      	cmp	r3, #0
 8005730:	d001      	beq.n	8005736 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	e083      	b.n	800583e <HAL_TIM_PWM_Start+0x1ae>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d104      	bne.n	8005746 <HAL_TIM_PWM_Start+0xb6>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2202      	movs	r2, #2
 8005740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005744:	e023      	b.n	800578e <HAL_TIM_PWM_Start+0xfe>
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	2b04      	cmp	r3, #4
 800574a:	d104      	bne.n	8005756 <HAL_TIM_PWM_Start+0xc6>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2202      	movs	r2, #2
 8005750:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005754:	e01b      	b.n	800578e <HAL_TIM_PWM_Start+0xfe>
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	2b08      	cmp	r3, #8
 800575a:	d104      	bne.n	8005766 <HAL_TIM_PWM_Start+0xd6>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2202      	movs	r2, #2
 8005760:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005764:	e013      	b.n	800578e <HAL_TIM_PWM_Start+0xfe>
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	2b0c      	cmp	r3, #12
 800576a:	d104      	bne.n	8005776 <HAL_TIM_PWM_Start+0xe6>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2202      	movs	r2, #2
 8005770:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005774:	e00b      	b.n	800578e <HAL_TIM_PWM_Start+0xfe>
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	2b10      	cmp	r3, #16
 800577a:	d104      	bne.n	8005786 <HAL_TIM_PWM_Start+0xf6>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2202      	movs	r2, #2
 8005780:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005784:	e003      	b.n	800578e <HAL_TIM_PWM_Start+0xfe>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2202      	movs	r2, #2
 800578a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	2201      	movs	r2, #1
 8005794:	6839      	ldr	r1, [r7, #0]
 8005796:	4618      	mov	r0, r3
 8005798:	f000 ffcc 	bl	8006734 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a29      	ldr	r2, [pc, #164]	; (8005848 <HAL_TIM_PWM_Start+0x1b8>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d00e      	beq.n	80057c4 <HAL_TIM_PWM_Start+0x134>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a28      	ldr	r2, [pc, #160]	; (800584c <HAL_TIM_PWM_Start+0x1bc>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d009      	beq.n	80057c4 <HAL_TIM_PWM_Start+0x134>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a26      	ldr	r2, [pc, #152]	; (8005850 <HAL_TIM_PWM_Start+0x1c0>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d004      	beq.n	80057c4 <HAL_TIM_PWM_Start+0x134>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a25      	ldr	r2, [pc, #148]	; (8005854 <HAL_TIM_PWM_Start+0x1c4>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d101      	bne.n	80057c8 <HAL_TIM_PWM_Start+0x138>
 80057c4:	2301      	movs	r3, #1
 80057c6:	e000      	b.n	80057ca <HAL_TIM_PWM_Start+0x13a>
 80057c8:	2300      	movs	r3, #0
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d007      	beq.n	80057de <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80057dc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a19      	ldr	r2, [pc, #100]	; (8005848 <HAL_TIM_PWM_Start+0x1b8>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d009      	beq.n	80057fc <HAL_TIM_PWM_Start+0x16c>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057f0:	d004      	beq.n	80057fc <HAL_TIM_PWM_Start+0x16c>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a15      	ldr	r2, [pc, #84]	; (800584c <HAL_TIM_PWM_Start+0x1bc>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d115      	bne.n	8005828 <HAL_TIM_PWM_Start+0x198>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	689a      	ldr	r2, [r3, #8]
 8005802:	4b15      	ldr	r3, [pc, #84]	; (8005858 <HAL_TIM_PWM_Start+0x1c8>)
 8005804:	4013      	ands	r3, r2
 8005806:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2b06      	cmp	r3, #6
 800580c:	d015      	beq.n	800583a <HAL_TIM_PWM_Start+0x1aa>
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005814:	d011      	beq.n	800583a <HAL_TIM_PWM_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f042 0201 	orr.w	r2, r2, #1
 8005824:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005826:	e008      	b.n	800583a <HAL_TIM_PWM_Start+0x1aa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f042 0201 	orr.w	r2, r2, #1
 8005836:	601a      	str	r2, [r3, #0]
 8005838:	e000      	b.n	800583c <HAL_TIM_PWM_Start+0x1ac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800583a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800583c:	2300      	movs	r3, #0
}
 800583e:	4618      	mov	r0, r3
 8005840:	3710      	adds	r7, #16
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
 8005846:	bf00      	nop
 8005848:	40012c00 	.word	0x40012c00
 800584c:	40014000 	.word	0x40014000
 8005850:	40014400 	.word	0x40014400
 8005854:	40014800 	.word	0x40014800
 8005858:	00010007 	.word	0x00010007

0800585c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b082      	sub	sp, #8
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	2200      	movs	r2, #0
 800586c:	6839      	ldr	r1, [r7, #0]
 800586e:	4618      	mov	r0, r3
 8005870:	f000 ff60 	bl	8006734 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a3b      	ldr	r2, [pc, #236]	; (8005968 <HAL_TIM_PWM_Stop+0x10c>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d00e      	beq.n	800589c <HAL_TIM_PWM_Stop+0x40>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a3a      	ldr	r2, [pc, #232]	; (800596c <HAL_TIM_PWM_Stop+0x110>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d009      	beq.n	800589c <HAL_TIM_PWM_Stop+0x40>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a38      	ldr	r2, [pc, #224]	; (8005970 <HAL_TIM_PWM_Stop+0x114>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d004      	beq.n	800589c <HAL_TIM_PWM_Stop+0x40>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a37      	ldr	r2, [pc, #220]	; (8005974 <HAL_TIM_PWM_Stop+0x118>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d101      	bne.n	80058a0 <HAL_TIM_PWM_Stop+0x44>
 800589c:	2301      	movs	r3, #1
 800589e:	e000      	b.n	80058a2 <HAL_TIM_PWM_Stop+0x46>
 80058a0:	2300      	movs	r3, #0
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d017      	beq.n	80058d6 <HAL_TIM_PWM_Stop+0x7a>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	6a1a      	ldr	r2, [r3, #32]
 80058ac:	f241 1311 	movw	r3, #4369	; 0x1111
 80058b0:	4013      	ands	r3, r2
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d10f      	bne.n	80058d6 <HAL_TIM_PWM_Stop+0x7a>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	6a1a      	ldr	r2, [r3, #32]
 80058bc:	f240 4344 	movw	r3, #1092	; 0x444
 80058c0:	4013      	ands	r3, r2
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d107      	bne.n	80058d6 <HAL_TIM_PWM_Stop+0x7a>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80058d4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	6a1a      	ldr	r2, [r3, #32]
 80058dc:	f241 1311 	movw	r3, #4369	; 0x1111
 80058e0:	4013      	ands	r3, r2
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d10f      	bne.n	8005906 <HAL_TIM_PWM_Stop+0xaa>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	6a1a      	ldr	r2, [r3, #32]
 80058ec:	f240 4344 	movw	r3, #1092	; 0x444
 80058f0:	4013      	ands	r3, r2
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d107      	bne.n	8005906 <HAL_TIM_PWM_Stop+0xaa>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f022 0201 	bic.w	r2, r2, #1
 8005904:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d104      	bne.n	8005916 <HAL_TIM_PWM_Stop+0xba>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005914:	e023      	b.n	800595e <HAL_TIM_PWM_Stop+0x102>
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	2b04      	cmp	r3, #4
 800591a:	d104      	bne.n	8005926 <HAL_TIM_PWM_Stop+0xca>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2201      	movs	r2, #1
 8005920:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005924:	e01b      	b.n	800595e <HAL_TIM_PWM_Stop+0x102>
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	2b08      	cmp	r3, #8
 800592a:	d104      	bne.n	8005936 <HAL_TIM_PWM_Stop+0xda>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2201      	movs	r2, #1
 8005930:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005934:	e013      	b.n	800595e <HAL_TIM_PWM_Stop+0x102>
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	2b0c      	cmp	r3, #12
 800593a:	d104      	bne.n	8005946 <HAL_TIM_PWM_Stop+0xea>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2201      	movs	r2, #1
 8005940:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005944:	e00b      	b.n	800595e <HAL_TIM_PWM_Stop+0x102>
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	2b10      	cmp	r3, #16
 800594a:	d104      	bne.n	8005956 <HAL_TIM_PWM_Stop+0xfa>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2201      	movs	r2, #1
 8005950:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005954:	e003      	b.n	800595e <HAL_TIM_PWM_Stop+0x102>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2201      	movs	r2, #1
 800595a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800595e:	2300      	movs	r3, #0
}
 8005960:	4618      	mov	r0, r3
 8005962:	3708      	adds	r7, #8
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}
 8005968:	40012c00 	.word	0x40012c00
 800596c:	40014000 	.word	0x40014000
 8005970:	40014400 	.word	0x40014400
 8005974:	40014800 	.word	0x40014800

08005978 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b082      	sub	sp, #8
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	691b      	ldr	r3, [r3, #16]
 8005986:	f003 0302 	and.w	r3, r3, #2
 800598a:	2b02      	cmp	r3, #2
 800598c:	d122      	bne.n	80059d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	68db      	ldr	r3, [r3, #12]
 8005994:	f003 0302 	and.w	r3, r3, #2
 8005998:	2b02      	cmp	r3, #2
 800599a:	d11b      	bne.n	80059d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f06f 0202 	mvn.w	r2, #2
 80059a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2201      	movs	r2, #1
 80059aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	699b      	ldr	r3, [r3, #24]
 80059b2:	f003 0303 	and.w	r3, r3, #3
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d003      	beq.n	80059c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f000 faed 	bl	8005f9a <HAL_TIM_IC_CaptureCallback>
 80059c0:	e005      	b.n	80059ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f000 fadf 	bl	8005f86 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f000 faf0 	bl	8005fae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2200      	movs	r2, #0
 80059d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	691b      	ldr	r3, [r3, #16]
 80059da:	f003 0304 	and.w	r3, r3, #4
 80059de:	2b04      	cmp	r3, #4
 80059e0:	d122      	bne.n	8005a28 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	68db      	ldr	r3, [r3, #12]
 80059e8:	f003 0304 	and.w	r3, r3, #4
 80059ec:	2b04      	cmp	r3, #4
 80059ee:	d11b      	bne.n	8005a28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f06f 0204 	mvn.w	r2, #4
 80059f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2202      	movs	r2, #2
 80059fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	699b      	ldr	r3, [r3, #24]
 8005a06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d003      	beq.n	8005a16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f000 fac3 	bl	8005f9a <HAL_TIM_IC_CaptureCallback>
 8005a14:	e005      	b.n	8005a22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f000 fab5 	bl	8005f86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f000 fac6 	bl	8005fae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	691b      	ldr	r3, [r3, #16]
 8005a2e:	f003 0308 	and.w	r3, r3, #8
 8005a32:	2b08      	cmp	r3, #8
 8005a34:	d122      	bne.n	8005a7c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	f003 0308 	and.w	r3, r3, #8
 8005a40:	2b08      	cmp	r3, #8
 8005a42:	d11b      	bne.n	8005a7c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f06f 0208 	mvn.w	r2, #8
 8005a4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2204      	movs	r2, #4
 8005a52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	69db      	ldr	r3, [r3, #28]
 8005a5a:	f003 0303 	and.w	r3, r3, #3
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d003      	beq.n	8005a6a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f000 fa99 	bl	8005f9a <HAL_TIM_IC_CaptureCallback>
 8005a68:	e005      	b.n	8005a76 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f000 fa8b 	bl	8005f86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f000 fa9c 	bl	8005fae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	691b      	ldr	r3, [r3, #16]
 8005a82:	f003 0310 	and.w	r3, r3, #16
 8005a86:	2b10      	cmp	r3, #16
 8005a88:	d122      	bne.n	8005ad0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	68db      	ldr	r3, [r3, #12]
 8005a90:	f003 0310 	and.w	r3, r3, #16
 8005a94:	2b10      	cmp	r3, #16
 8005a96:	d11b      	bne.n	8005ad0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f06f 0210 	mvn.w	r2, #16
 8005aa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2208      	movs	r2, #8
 8005aa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	69db      	ldr	r3, [r3, #28]
 8005aae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d003      	beq.n	8005abe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f000 fa6f 	bl	8005f9a <HAL_TIM_IC_CaptureCallback>
 8005abc:	e005      	b.n	8005aca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f000 fa61 	bl	8005f86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f000 fa72 	bl	8005fae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2200      	movs	r2, #0
 8005ace:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	691b      	ldr	r3, [r3, #16]
 8005ad6:	f003 0301 	and.w	r3, r3, #1
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d10e      	bne.n	8005afc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	f003 0301 	and.w	r3, r3, #1
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d107      	bne.n	8005afc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f06f 0201 	mvn.w	r2, #1
 8005af4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f000 fa3b 	bl	8005f72 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	691b      	ldr	r3, [r3, #16]
 8005b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b06:	2b80      	cmp	r3, #128	; 0x80
 8005b08:	d10e      	bne.n	8005b28 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b14:	2b80      	cmp	r3, #128	; 0x80
 8005b16:	d107      	bne.n	8005b28 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005b20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f000 ff14 	bl	8006950 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	691b      	ldr	r3, [r3, #16]
 8005b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b36:	d10e      	bne.n	8005b56 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	68db      	ldr	r3, [r3, #12]
 8005b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b42:	2b80      	cmp	r3, #128	; 0x80
 8005b44:	d107      	bne.n	8005b56 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005b4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f000 ff07 	bl	8006964 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	691b      	ldr	r3, [r3, #16]
 8005b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b60:	2b40      	cmp	r3, #64	; 0x40
 8005b62:	d10e      	bne.n	8005b82 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	68db      	ldr	r3, [r3, #12]
 8005b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b6e:	2b40      	cmp	r3, #64	; 0x40
 8005b70:	d107      	bne.n	8005b82 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005b7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f000 fa20 	bl	8005fc2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	691b      	ldr	r3, [r3, #16]
 8005b88:	f003 0320 	and.w	r3, r3, #32
 8005b8c:	2b20      	cmp	r3, #32
 8005b8e:	d10e      	bne.n	8005bae <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	68db      	ldr	r3, [r3, #12]
 8005b96:	f003 0320 	and.w	r3, r3, #32
 8005b9a:	2b20      	cmp	r3, #32
 8005b9c:	d107      	bne.n	8005bae <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f06f 0220 	mvn.w	r2, #32
 8005ba6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f000 fec7 	bl	800693c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005bae:	bf00      	nop
 8005bb0:	3708      	adds	r7, #8
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
	...

08005bb8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b086      	sub	sp, #24
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	60f8      	str	r0, [r7, #12]
 8005bc0:	60b9      	str	r1, [r7, #8]
 8005bc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d101      	bne.n	8005bd6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005bd2:	2302      	movs	r3, #2
 8005bd4:	e0ff      	b.n	8005dd6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2201      	movs	r2, #1
 8005bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2b14      	cmp	r3, #20
 8005be2:	f200 80f0 	bhi.w	8005dc6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005be6:	a201      	add	r2, pc, #4	; (adr r2, 8005bec <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bec:	08005c41 	.word	0x08005c41
 8005bf0:	08005dc7 	.word	0x08005dc7
 8005bf4:	08005dc7 	.word	0x08005dc7
 8005bf8:	08005dc7 	.word	0x08005dc7
 8005bfc:	08005c81 	.word	0x08005c81
 8005c00:	08005dc7 	.word	0x08005dc7
 8005c04:	08005dc7 	.word	0x08005dc7
 8005c08:	08005dc7 	.word	0x08005dc7
 8005c0c:	08005cc3 	.word	0x08005cc3
 8005c10:	08005dc7 	.word	0x08005dc7
 8005c14:	08005dc7 	.word	0x08005dc7
 8005c18:	08005dc7 	.word	0x08005dc7
 8005c1c:	08005d03 	.word	0x08005d03
 8005c20:	08005dc7 	.word	0x08005dc7
 8005c24:	08005dc7 	.word	0x08005dc7
 8005c28:	08005dc7 	.word	0x08005dc7
 8005c2c:	08005d45 	.word	0x08005d45
 8005c30:	08005dc7 	.word	0x08005dc7
 8005c34:	08005dc7 	.word	0x08005dc7
 8005c38:	08005dc7 	.word	0x08005dc7
 8005c3c:	08005d85 	.word	0x08005d85
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	68b9      	ldr	r1, [r7, #8]
 8005c46:	4618      	mov	r0, r3
 8005c48:	f000 fa34 	bl	80060b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	699a      	ldr	r2, [r3, #24]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f042 0208 	orr.w	r2, r2, #8
 8005c5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	699a      	ldr	r2, [r3, #24]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f022 0204 	bic.w	r2, r2, #4
 8005c6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	6999      	ldr	r1, [r3, #24]
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	691a      	ldr	r2, [r3, #16]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	430a      	orrs	r2, r1
 8005c7c:	619a      	str	r2, [r3, #24]
      break;
 8005c7e:	e0a5      	b.n	8005dcc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	68b9      	ldr	r1, [r7, #8]
 8005c86:	4618      	mov	r0, r3
 8005c88:	f000 fa9a 	bl	80061c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	699a      	ldr	r2, [r3, #24]
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	699a      	ldr	r2, [r3, #24]
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005caa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	6999      	ldr	r1, [r3, #24]
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	691b      	ldr	r3, [r3, #16]
 8005cb6:	021a      	lsls	r2, r3, #8
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	430a      	orrs	r2, r1
 8005cbe:	619a      	str	r2, [r3, #24]
      break;
 8005cc0:	e084      	b.n	8005dcc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	68b9      	ldr	r1, [r7, #8]
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f000 faf9 	bl	80062c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	69da      	ldr	r2, [r3, #28]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f042 0208 	orr.w	r2, r2, #8
 8005cdc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	69da      	ldr	r2, [r3, #28]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f022 0204 	bic.w	r2, r2, #4
 8005cec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	69d9      	ldr	r1, [r3, #28]
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	691a      	ldr	r2, [r3, #16]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	430a      	orrs	r2, r1
 8005cfe:	61da      	str	r2, [r3, #28]
      break;
 8005d00:	e064      	b.n	8005dcc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	68b9      	ldr	r1, [r7, #8]
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f000 fb57 	bl	80063bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	69da      	ldr	r2, [r3, #28]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	69da      	ldr	r2, [r3, #28]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	69d9      	ldr	r1, [r3, #28]
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	691b      	ldr	r3, [r3, #16]
 8005d38:	021a      	lsls	r2, r3, #8
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	430a      	orrs	r2, r1
 8005d40:	61da      	str	r2, [r3, #28]
      break;
 8005d42:	e043      	b.n	8005dcc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	68b9      	ldr	r1, [r7, #8]
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f000 fb9a 	bl	8006484 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f042 0208 	orr.w	r2, r2, #8
 8005d5e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f022 0204 	bic.w	r2, r2, #4
 8005d6e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	691a      	ldr	r2, [r3, #16]
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	430a      	orrs	r2, r1
 8005d80:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005d82:	e023      	b.n	8005dcc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	68b9      	ldr	r1, [r7, #8]
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f000 fbd8 	bl	8006540 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d9e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	691b      	ldr	r3, [r3, #16]
 8005dba:	021a      	lsls	r2, r3, #8
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	430a      	orrs	r2, r1
 8005dc2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005dc4:	e002      	b.n	8005dcc <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	75fb      	strb	r3, [r7, #23]
      break;
 8005dca:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005dd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3718      	adds	r7, #24
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}
 8005dde:	bf00      	nop

08005de0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b084      	sub	sp, #16
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
 8005de8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005dea:	2300      	movs	r3, #0
 8005dec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d101      	bne.n	8005dfc <HAL_TIM_ConfigClockSource+0x1c>
 8005df8:	2302      	movs	r3, #2
 8005dfa:	e0b6      	b.n	8005f6a <HAL_TIM_ConfigClockSource+0x18a>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2201      	movs	r2, #1
 8005e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2202      	movs	r2, #2
 8005e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e1a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005e1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e26:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	68ba      	ldr	r2, [r7, #8]
 8005e2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e38:	d03e      	beq.n	8005eb8 <HAL_TIM_ConfigClockSource+0xd8>
 8005e3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e3e:	f200 8087 	bhi.w	8005f50 <HAL_TIM_ConfigClockSource+0x170>
 8005e42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e46:	f000 8086 	beq.w	8005f56 <HAL_TIM_ConfigClockSource+0x176>
 8005e4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e4e:	d87f      	bhi.n	8005f50 <HAL_TIM_ConfigClockSource+0x170>
 8005e50:	2b70      	cmp	r3, #112	; 0x70
 8005e52:	d01a      	beq.n	8005e8a <HAL_TIM_ConfigClockSource+0xaa>
 8005e54:	2b70      	cmp	r3, #112	; 0x70
 8005e56:	d87b      	bhi.n	8005f50 <HAL_TIM_ConfigClockSource+0x170>
 8005e58:	2b60      	cmp	r3, #96	; 0x60
 8005e5a:	d050      	beq.n	8005efe <HAL_TIM_ConfigClockSource+0x11e>
 8005e5c:	2b60      	cmp	r3, #96	; 0x60
 8005e5e:	d877      	bhi.n	8005f50 <HAL_TIM_ConfigClockSource+0x170>
 8005e60:	2b50      	cmp	r3, #80	; 0x50
 8005e62:	d03c      	beq.n	8005ede <HAL_TIM_ConfigClockSource+0xfe>
 8005e64:	2b50      	cmp	r3, #80	; 0x50
 8005e66:	d873      	bhi.n	8005f50 <HAL_TIM_ConfigClockSource+0x170>
 8005e68:	2b40      	cmp	r3, #64	; 0x40
 8005e6a:	d058      	beq.n	8005f1e <HAL_TIM_ConfigClockSource+0x13e>
 8005e6c:	2b40      	cmp	r3, #64	; 0x40
 8005e6e:	d86f      	bhi.n	8005f50 <HAL_TIM_ConfigClockSource+0x170>
 8005e70:	2b30      	cmp	r3, #48	; 0x30
 8005e72:	d064      	beq.n	8005f3e <HAL_TIM_ConfigClockSource+0x15e>
 8005e74:	2b30      	cmp	r3, #48	; 0x30
 8005e76:	d86b      	bhi.n	8005f50 <HAL_TIM_ConfigClockSource+0x170>
 8005e78:	2b20      	cmp	r3, #32
 8005e7a:	d060      	beq.n	8005f3e <HAL_TIM_ConfigClockSource+0x15e>
 8005e7c:	2b20      	cmp	r3, #32
 8005e7e:	d867      	bhi.n	8005f50 <HAL_TIM_ConfigClockSource+0x170>
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d05c      	beq.n	8005f3e <HAL_TIM_ConfigClockSource+0x15e>
 8005e84:	2b10      	cmp	r3, #16
 8005e86:	d05a      	beq.n	8005f3e <HAL_TIM_ConfigClockSource+0x15e>
 8005e88:	e062      	b.n	8005f50 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6818      	ldr	r0, [r3, #0]
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	6899      	ldr	r1, [r3, #8]
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	685a      	ldr	r2, [r3, #4]
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	68db      	ldr	r3, [r3, #12]
 8005e9a:	f000 fc2b 	bl	80066f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005eac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	68ba      	ldr	r2, [r7, #8]
 8005eb4:	609a      	str	r2, [r3, #8]
      break;
 8005eb6:	e04f      	b.n	8005f58 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6818      	ldr	r0, [r3, #0]
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	6899      	ldr	r1, [r3, #8]
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	685a      	ldr	r2, [r3, #4]
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	68db      	ldr	r3, [r3, #12]
 8005ec8:	f000 fc14 	bl	80066f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	689a      	ldr	r2, [r3, #8]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005eda:	609a      	str	r2, [r3, #8]
      break;
 8005edc:	e03c      	b.n	8005f58 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6818      	ldr	r0, [r3, #0]
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	6859      	ldr	r1, [r3, #4]
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	68db      	ldr	r3, [r3, #12]
 8005eea:	461a      	mov	r2, r3
 8005eec:	f000 fb88 	bl	8006600 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	2150      	movs	r1, #80	; 0x50
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f000 fbe1 	bl	80066be <TIM_ITRx_SetConfig>
      break;
 8005efc:	e02c      	b.n	8005f58 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6818      	ldr	r0, [r3, #0]
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	6859      	ldr	r1, [r3, #4]
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	68db      	ldr	r3, [r3, #12]
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	f000 fba7 	bl	800665e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	2160      	movs	r1, #96	; 0x60
 8005f16:	4618      	mov	r0, r3
 8005f18:	f000 fbd1 	bl	80066be <TIM_ITRx_SetConfig>
      break;
 8005f1c:	e01c      	b.n	8005f58 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6818      	ldr	r0, [r3, #0]
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	6859      	ldr	r1, [r3, #4]
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	f000 fb68 	bl	8006600 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	2140      	movs	r1, #64	; 0x40
 8005f36:	4618      	mov	r0, r3
 8005f38:	f000 fbc1 	bl	80066be <TIM_ITRx_SetConfig>
      break;
 8005f3c:	e00c      	b.n	8005f58 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4619      	mov	r1, r3
 8005f48:	4610      	mov	r0, r2
 8005f4a:	f000 fbb8 	bl	80066be <TIM_ITRx_SetConfig>
      break;
 8005f4e:	e003      	b.n	8005f58 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	73fb      	strb	r3, [r7, #15]
      break;
 8005f54:	e000      	b.n	8005f58 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005f56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2200      	movs	r2, #0
 8005f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3710      	adds	r7, #16
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}

08005f72 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f72:	b480      	push	{r7}
 8005f74:	b083      	sub	sp, #12
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005f7a:	bf00      	nop
 8005f7c:	370c      	adds	r7, #12
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr

08005f86 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f86:	b480      	push	{r7}
 8005f88:	b083      	sub	sp, #12
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f8e:	bf00      	nop
 8005f90:	370c      	adds	r7, #12
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	4770      	bx	lr

08005f9a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f9a:	b480      	push	{r7}
 8005f9c:	b083      	sub	sp, #12
 8005f9e:	af00      	add	r7, sp, #0
 8005fa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005fa2:	bf00      	nop
 8005fa4:	370c      	adds	r7, #12
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr

08005fae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005fae:	b480      	push	{r7}
 8005fb0:	b083      	sub	sp, #12
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005fb6:	bf00      	nop
 8005fb8:	370c      	adds	r7, #12
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr

08005fc2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005fc2:	b480      	push	{r7}
 8005fc4:	b083      	sub	sp, #12
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005fca:	bf00      	nop
 8005fcc:	370c      	adds	r7, #12
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr
	...

08005fd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b085      	sub	sp, #20
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
 8005fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	4a2e      	ldr	r2, [pc, #184]	; (80060a4 <TIM_Base_SetConfig+0xcc>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d003      	beq.n	8005ff8 <TIM_Base_SetConfig+0x20>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ff6:	d108      	bne.n	800600a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ffe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	68fa      	ldr	r2, [r7, #12]
 8006006:	4313      	orrs	r3, r2
 8006008:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	4a25      	ldr	r2, [pc, #148]	; (80060a4 <TIM_Base_SetConfig+0xcc>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d00f      	beq.n	8006032 <TIM_Base_SetConfig+0x5a>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006018:	d00b      	beq.n	8006032 <TIM_Base_SetConfig+0x5a>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4a22      	ldr	r2, [pc, #136]	; (80060a8 <TIM_Base_SetConfig+0xd0>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d007      	beq.n	8006032 <TIM_Base_SetConfig+0x5a>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4a21      	ldr	r2, [pc, #132]	; (80060ac <TIM_Base_SetConfig+0xd4>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d003      	beq.n	8006032 <TIM_Base_SetConfig+0x5a>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4a20      	ldr	r2, [pc, #128]	; (80060b0 <TIM_Base_SetConfig+0xd8>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d108      	bne.n	8006044 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006038:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	68db      	ldr	r3, [r3, #12]
 800603e:	68fa      	ldr	r2, [r7, #12]
 8006040:	4313      	orrs	r3, r2
 8006042:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	695b      	ldr	r3, [r3, #20]
 800604e:	4313      	orrs	r3, r2
 8006050:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	68fa      	ldr	r2, [r7, #12]
 8006056:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	689a      	ldr	r2, [r3, #8]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	4a0e      	ldr	r2, [pc, #56]	; (80060a4 <TIM_Base_SetConfig+0xcc>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d00b      	beq.n	8006088 <TIM_Base_SetConfig+0xb0>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	4a0d      	ldr	r2, [pc, #52]	; (80060a8 <TIM_Base_SetConfig+0xd0>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d007      	beq.n	8006088 <TIM_Base_SetConfig+0xb0>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	4a0c      	ldr	r2, [pc, #48]	; (80060ac <TIM_Base_SetConfig+0xd4>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d003      	beq.n	8006088 <TIM_Base_SetConfig+0xb0>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	4a0b      	ldr	r2, [pc, #44]	; (80060b0 <TIM_Base_SetConfig+0xd8>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d103      	bne.n	8006090 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	691a      	ldr	r2, [r3, #16]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2201      	movs	r2, #1
 8006094:	615a      	str	r2, [r3, #20]
}
 8006096:	bf00      	nop
 8006098:	3714      	adds	r7, #20
 800609a:	46bd      	mov	sp, r7
 800609c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a0:	4770      	bx	lr
 80060a2:	bf00      	nop
 80060a4:	40012c00 	.word	0x40012c00
 80060a8:	40014000 	.word	0x40014000
 80060ac:	40014400 	.word	0x40014400
 80060b0:	40014800 	.word	0x40014800

080060b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b087      	sub	sp, #28
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6a1b      	ldr	r3, [r3, #32]
 80060c2:	f023 0201 	bic.w	r2, r3, #1
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6a1b      	ldr	r3, [r3, #32]
 80060ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	699b      	ldr	r3, [r3, #24]
 80060da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f023 0303 	bic.w	r3, r3, #3
 80060ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	68fa      	ldr	r2, [r7, #12]
 80060f6:	4313      	orrs	r3, r2
 80060f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	f023 0302 	bic.w	r3, r3, #2
 8006100:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	697a      	ldr	r2, [r7, #20]
 8006108:	4313      	orrs	r3, r2
 800610a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	4a28      	ldr	r2, [pc, #160]	; (80061b0 <TIM_OC1_SetConfig+0xfc>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d00b      	beq.n	800612c <TIM_OC1_SetConfig+0x78>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	4a27      	ldr	r2, [pc, #156]	; (80061b4 <TIM_OC1_SetConfig+0x100>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d007      	beq.n	800612c <TIM_OC1_SetConfig+0x78>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	4a26      	ldr	r2, [pc, #152]	; (80061b8 <TIM_OC1_SetConfig+0x104>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d003      	beq.n	800612c <TIM_OC1_SetConfig+0x78>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	4a25      	ldr	r2, [pc, #148]	; (80061bc <TIM_OC1_SetConfig+0x108>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d10c      	bne.n	8006146 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	f023 0308 	bic.w	r3, r3, #8
 8006132:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	68db      	ldr	r3, [r3, #12]
 8006138:	697a      	ldr	r2, [r7, #20]
 800613a:	4313      	orrs	r3, r2
 800613c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	f023 0304 	bic.w	r3, r3, #4
 8006144:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	4a19      	ldr	r2, [pc, #100]	; (80061b0 <TIM_OC1_SetConfig+0xfc>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d00b      	beq.n	8006166 <TIM_OC1_SetConfig+0xb2>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	4a18      	ldr	r2, [pc, #96]	; (80061b4 <TIM_OC1_SetConfig+0x100>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d007      	beq.n	8006166 <TIM_OC1_SetConfig+0xb2>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	4a17      	ldr	r2, [pc, #92]	; (80061b8 <TIM_OC1_SetConfig+0x104>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d003      	beq.n	8006166 <TIM_OC1_SetConfig+0xb2>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	4a16      	ldr	r2, [pc, #88]	; (80061bc <TIM_OC1_SetConfig+0x108>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d111      	bne.n	800618a <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800616c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006174:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	695b      	ldr	r3, [r3, #20]
 800617a:	693a      	ldr	r2, [r7, #16]
 800617c:	4313      	orrs	r3, r2
 800617e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	699b      	ldr	r3, [r3, #24]
 8006184:	693a      	ldr	r2, [r7, #16]
 8006186:	4313      	orrs	r3, r2
 8006188:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	693a      	ldr	r2, [r7, #16]
 800618e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	68fa      	ldr	r2, [r7, #12]
 8006194:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	685a      	ldr	r2, [r3, #4]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	697a      	ldr	r2, [r7, #20]
 80061a2:	621a      	str	r2, [r3, #32]
}
 80061a4:	bf00      	nop
 80061a6:	371c      	adds	r7, #28
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr
 80061b0:	40012c00 	.word	0x40012c00
 80061b4:	40014000 	.word	0x40014000
 80061b8:	40014400 	.word	0x40014400
 80061bc:	40014800 	.word	0x40014800

080061c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b087      	sub	sp, #28
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6a1b      	ldr	r3, [r3, #32]
 80061ce:	f023 0210 	bic.w	r2, r3, #16
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6a1b      	ldr	r3, [r3, #32]
 80061da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	699b      	ldr	r3, [r3, #24]
 80061e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80061ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	021b      	lsls	r3, r3, #8
 8006202:	68fa      	ldr	r2, [r7, #12]
 8006204:	4313      	orrs	r3, r2
 8006206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	f023 0320 	bic.w	r3, r3, #32
 800620e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	011b      	lsls	r3, r3, #4
 8006216:	697a      	ldr	r2, [r7, #20]
 8006218:	4313      	orrs	r3, r2
 800621a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	4a24      	ldr	r2, [pc, #144]	; (80062b0 <TIM_OC2_SetConfig+0xf0>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d10d      	bne.n	8006240 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800622a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	68db      	ldr	r3, [r3, #12]
 8006230:	011b      	lsls	r3, r3, #4
 8006232:	697a      	ldr	r2, [r7, #20]
 8006234:	4313      	orrs	r3, r2
 8006236:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800623e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	4a1b      	ldr	r2, [pc, #108]	; (80062b0 <TIM_OC2_SetConfig+0xf0>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d00b      	beq.n	8006260 <TIM_OC2_SetConfig+0xa0>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	4a1a      	ldr	r2, [pc, #104]	; (80062b4 <TIM_OC2_SetConfig+0xf4>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d007      	beq.n	8006260 <TIM_OC2_SetConfig+0xa0>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	4a19      	ldr	r2, [pc, #100]	; (80062b8 <TIM_OC2_SetConfig+0xf8>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d003      	beq.n	8006260 <TIM_OC2_SetConfig+0xa0>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	4a18      	ldr	r2, [pc, #96]	; (80062bc <TIM_OC2_SetConfig+0xfc>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d113      	bne.n	8006288 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006266:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800626e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	695b      	ldr	r3, [r3, #20]
 8006274:	009b      	lsls	r3, r3, #2
 8006276:	693a      	ldr	r2, [r7, #16]
 8006278:	4313      	orrs	r3, r2
 800627a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	699b      	ldr	r3, [r3, #24]
 8006280:	009b      	lsls	r3, r3, #2
 8006282:	693a      	ldr	r2, [r7, #16]
 8006284:	4313      	orrs	r3, r2
 8006286:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	693a      	ldr	r2, [r7, #16]
 800628c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	68fa      	ldr	r2, [r7, #12]
 8006292:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	685a      	ldr	r2, [r3, #4]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	697a      	ldr	r2, [r7, #20]
 80062a0:	621a      	str	r2, [r3, #32]
}
 80062a2:	bf00      	nop
 80062a4:	371c      	adds	r7, #28
 80062a6:	46bd      	mov	sp, r7
 80062a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ac:	4770      	bx	lr
 80062ae:	bf00      	nop
 80062b0:	40012c00 	.word	0x40012c00
 80062b4:	40014000 	.word	0x40014000
 80062b8:	40014400 	.word	0x40014400
 80062bc:	40014800 	.word	0x40014800

080062c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b087      	sub	sp, #28
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6a1b      	ldr	r3, [r3, #32]
 80062ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6a1b      	ldr	r3, [r3, #32]
 80062da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	69db      	ldr	r3, [r3, #28]
 80062e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f023 0303 	bic.w	r3, r3, #3
 80062fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	68fa      	ldr	r2, [r7, #12]
 8006302:	4313      	orrs	r3, r2
 8006304:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800630c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	021b      	lsls	r3, r3, #8
 8006314:	697a      	ldr	r2, [r7, #20]
 8006316:	4313      	orrs	r3, r2
 8006318:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	4a23      	ldr	r2, [pc, #140]	; (80063ac <TIM_OC3_SetConfig+0xec>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d10d      	bne.n	800633e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006328:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	68db      	ldr	r3, [r3, #12]
 800632e:	021b      	lsls	r3, r3, #8
 8006330:	697a      	ldr	r2, [r7, #20]
 8006332:	4313      	orrs	r3, r2
 8006334:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800633c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	4a1a      	ldr	r2, [pc, #104]	; (80063ac <TIM_OC3_SetConfig+0xec>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d00b      	beq.n	800635e <TIM_OC3_SetConfig+0x9e>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	4a19      	ldr	r2, [pc, #100]	; (80063b0 <TIM_OC3_SetConfig+0xf0>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d007      	beq.n	800635e <TIM_OC3_SetConfig+0x9e>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	4a18      	ldr	r2, [pc, #96]	; (80063b4 <TIM_OC3_SetConfig+0xf4>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d003      	beq.n	800635e <TIM_OC3_SetConfig+0x9e>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	4a17      	ldr	r2, [pc, #92]	; (80063b8 <TIM_OC3_SetConfig+0xf8>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d113      	bne.n	8006386 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006364:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800636c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	695b      	ldr	r3, [r3, #20]
 8006372:	011b      	lsls	r3, r3, #4
 8006374:	693a      	ldr	r2, [r7, #16]
 8006376:	4313      	orrs	r3, r2
 8006378:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	699b      	ldr	r3, [r3, #24]
 800637e:	011b      	lsls	r3, r3, #4
 8006380:	693a      	ldr	r2, [r7, #16]
 8006382:	4313      	orrs	r3, r2
 8006384:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	693a      	ldr	r2, [r7, #16]
 800638a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	68fa      	ldr	r2, [r7, #12]
 8006390:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	685a      	ldr	r2, [r3, #4]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	697a      	ldr	r2, [r7, #20]
 800639e:	621a      	str	r2, [r3, #32]
}
 80063a0:	bf00      	nop
 80063a2:	371c      	adds	r7, #28
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr
 80063ac:	40012c00 	.word	0x40012c00
 80063b0:	40014000 	.word	0x40014000
 80063b4:	40014400 	.word	0x40014400
 80063b8:	40014800 	.word	0x40014800

080063bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063bc:	b480      	push	{r7}
 80063be:	b087      	sub	sp, #28
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6a1b      	ldr	r3, [r3, #32]
 80063ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6a1b      	ldr	r3, [r3, #32]
 80063d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	69db      	ldr	r3, [r3, #28]
 80063e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80063ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	021b      	lsls	r3, r3, #8
 80063fe:	68fa      	ldr	r2, [r7, #12]
 8006400:	4313      	orrs	r3, r2
 8006402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800640a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	031b      	lsls	r3, r3, #12
 8006412:	693a      	ldr	r2, [r7, #16]
 8006414:	4313      	orrs	r3, r2
 8006416:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	4a16      	ldr	r2, [pc, #88]	; (8006474 <TIM_OC4_SetConfig+0xb8>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d00b      	beq.n	8006438 <TIM_OC4_SetConfig+0x7c>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	4a15      	ldr	r2, [pc, #84]	; (8006478 <TIM_OC4_SetConfig+0xbc>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d007      	beq.n	8006438 <TIM_OC4_SetConfig+0x7c>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	4a14      	ldr	r2, [pc, #80]	; (800647c <TIM_OC4_SetConfig+0xc0>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d003      	beq.n	8006438 <TIM_OC4_SetConfig+0x7c>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	4a13      	ldr	r2, [pc, #76]	; (8006480 <TIM_OC4_SetConfig+0xc4>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d109      	bne.n	800644c <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800643e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	695b      	ldr	r3, [r3, #20]
 8006444:	019b      	lsls	r3, r3, #6
 8006446:	697a      	ldr	r2, [r7, #20]
 8006448:	4313      	orrs	r3, r2
 800644a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	697a      	ldr	r2, [r7, #20]
 8006450:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	68fa      	ldr	r2, [r7, #12]
 8006456:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	685a      	ldr	r2, [r3, #4]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	693a      	ldr	r2, [r7, #16]
 8006464:	621a      	str	r2, [r3, #32]
}
 8006466:	bf00      	nop
 8006468:	371c      	adds	r7, #28
 800646a:	46bd      	mov	sp, r7
 800646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006470:	4770      	bx	lr
 8006472:	bf00      	nop
 8006474:	40012c00 	.word	0x40012c00
 8006478:	40014000 	.word	0x40014000
 800647c:	40014400 	.word	0x40014400
 8006480:	40014800 	.word	0x40014800

08006484 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006484:	b480      	push	{r7}
 8006486:	b087      	sub	sp, #28
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6a1b      	ldr	r3, [r3, #32]
 8006492:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6a1b      	ldr	r3, [r3, #32]
 800649e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	68fa      	ldr	r2, [r7, #12]
 80064be:	4313      	orrs	r3, r2
 80064c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80064c8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	041b      	lsls	r3, r3, #16
 80064d0:	693a      	ldr	r2, [r7, #16]
 80064d2:	4313      	orrs	r3, r2
 80064d4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	4a15      	ldr	r2, [pc, #84]	; (8006530 <TIM_OC5_SetConfig+0xac>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d00b      	beq.n	80064f6 <TIM_OC5_SetConfig+0x72>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	4a14      	ldr	r2, [pc, #80]	; (8006534 <TIM_OC5_SetConfig+0xb0>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d007      	beq.n	80064f6 <TIM_OC5_SetConfig+0x72>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	4a13      	ldr	r2, [pc, #76]	; (8006538 <TIM_OC5_SetConfig+0xb4>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d003      	beq.n	80064f6 <TIM_OC5_SetConfig+0x72>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	4a12      	ldr	r2, [pc, #72]	; (800653c <TIM_OC5_SetConfig+0xb8>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d109      	bne.n	800650a <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064fc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	695b      	ldr	r3, [r3, #20]
 8006502:	021b      	lsls	r3, r3, #8
 8006504:	697a      	ldr	r2, [r7, #20]
 8006506:	4313      	orrs	r3, r2
 8006508:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	697a      	ldr	r2, [r7, #20]
 800650e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	68fa      	ldr	r2, [r7, #12]
 8006514:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	685a      	ldr	r2, [r3, #4]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	693a      	ldr	r2, [r7, #16]
 8006522:	621a      	str	r2, [r3, #32]
}
 8006524:	bf00      	nop
 8006526:	371c      	adds	r7, #28
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr
 8006530:	40012c00 	.word	0x40012c00
 8006534:	40014000 	.word	0x40014000
 8006538:	40014400 	.word	0x40014400
 800653c:	40014800 	.word	0x40014800

08006540 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006540:	b480      	push	{r7}
 8006542:	b087      	sub	sp, #28
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6a1b      	ldr	r3, [r3, #32]
 800654e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6a1b      	ldr	r3, [r3, #32]
 800655a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800656e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006572:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	021b      	lsls	r3, r3, #8
 800657a:	68fa      	ldr	r2, [r7, #12]
 800657c:	4313      	orrs	r3, r2
 800657e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006586:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	689b      	ldr	r3, [r3, #8]
 800658c:	051b      	lsls	r3, r3, #20
 800658e:	693a      	ldr	r2, [r7, #16]
 8006590:	4313      	orrs	r3, r2
 8006592:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	4a16      	ldr	r2, [pc, #88]	; (80065f0 <TIM_OC6_SetConfig+0xb0>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d00b      	beq.n	80065b4 <TIM_OC6_SetConfig+0x74>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	4a15      	ldr	r2, [pc, #84]	; (80065f4 <TIM_OC6_SetConfig+0xb4>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d007      	beq.n	80065b4 <TIM_OC6_SetConfig+0x74>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	4a14      	ldr	r2, [pc, #80]	; (80065f8 <TIM_OC6_SetConfig+0xb8>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d003      	beq.n	80065b4 <TIM_OC6_SetConfig+0x74>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	4a13      	ldr	r2, [pc, #76]	; (80065fc <TIM_OC6_SetConfig+0xbc>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d109      	bne.n	80065c8 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80065ba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	695b      	ldr	r3, [r3, #20]
 80065c0:	029b      	lsls	r3, r3, #10
 80065c2:	697a      	ldr	r2, [r7, #20]
 80065c4:	4313      	orrs	r3, r2
 80065c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	697a      	ldr	r2, [r7, #20]
 80065cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	68fa      	ldr	r2, [r7, #12]
 80065d2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	685a      	ldr	r2, [r3, #4]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	693a      	ldr	r2, [r7, #16]
 80065e0:	621a      	str	r2, [r3, #32]
}
 80065e2:	bf00      	nop
 80065e4:	371c      	adds	r7, #28
 80065e6:	46bd      	mov	sp, r7
 80065e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ec:	4770      	bx	lr
 80065ee:	bf00      	nop
 80065f0:	40012c00 	.word	0x40012c00
 80065f4:	40014000 	.word	0x40014000
 80065f8:	40014400 	.word	0x40014400
 80065fc:	40014800 	.word	0x40014800

08006600 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006600:	b480      	push	{r7}
 8006602:	b087      	sub	sp, #28
 8006604:	af00      	add	r7, sp, #0
 8006606:	60f8      	str	r0, [r7, #12]
 8006608:	60b9      	str	r1, [r7, #8]
 800660a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	6a1b      	ldr	r3, [r3, #32]
 8006610:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	6a1b      	ldr	r3, [r3, #32]
 8006616:	f023 0201 	bic.w	r2, r3, #1
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	699b      	ldr	r3, [r3, #24]
 8006622:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800662a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	011b      	lsls	r3, r3, #4
 8006630:	693a      	ldr	r2, [r7, #16]
 8006632:	4313      	orrs	r3, r2
 8006634:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	f023 030a 	bic.w	r3, r3, #10
 800663c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800663e:	697a      	ldr	r2, [r7, #20]
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	4313      	orrs	r3, r2
 8006644:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	693a      	ldr	r2, [r7, #16]
 800664a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	697a      	ldr	r2, [r7, #20]
 8006650:	621a      	str	r2, [r3, #32]
}
 8006652:	bf00      	nop
 8006654:	371c      	adds	r7, #28
 8006656:	46bd      	mov	sp, r7
 8006658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665c:	4770      	bx	lr

0800665e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800665e:	b480      	push	{r7}
 8006660:	b087      	sub	sp, #28
 8006662:	af00      	add	r7, sp, #0
 8006664:	60f8      	str	r0, [r7, #12]
 8006666:	60b9      	str	r1, [r7, #8]
 8006668:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	6a1b      	ldr	r3, [r3, #32]
 800666e:	f023 0210 	bic.w	r2, r3, #16
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	699b      	ldr	r3, [r3, #24]
 800667a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	6a1b      	ldr	r3, [r3, #32]
 8006680:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006688:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	031b      	lsls	r3, r3, #12
 800668e:	697a      	ldr	r2, [r7, #20]
 8006690:	4313      	orrs	r3, r2
 8006692:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800669a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	011b      	lsls	r3, r3, #4
 80066a0:	693a      	ldr	r2, [r7, #16]
 80066a2:	4313      	orrs	r3, r2
 80066a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	697a      	ldr	r2, [r7, #20]
 80066aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	693a      	ldr	r2, [r7, #16]
 80066b0:	621a      	str	r2, [r3, #32]
}
 80066b2:	bf00      	nop
 80066b4:	371c      	adds	r7, #28
 80066b6:	46bd      	mov	sp, r7
 80066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066bc:	4770      	bx	lr

080066be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80066be:	b480      	push	{r7}
 80066c0:	b085      	sub	sp, #20
 80066c2:	af00      	add	r7, sp, #0
 80066c4:	6078      	str	r0, [r7, #4]
 80066c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80066d6:	683a      	ldr	r2, [r7, #0]
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	4313      	orrs	r3, r2
 80066dc:	f043 0307 	orr.w	r3, r3, #7
 80066e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	68fa      	ldr	r2, [r7, #12]
 80066e6:	609a      	str	r2, [r3, #8]
}
 80066e8:	bf00      	nop
 80066ea:	3714      	adds	r7, #20
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr

080066f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b087      	sub	sp, #28
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	60f8      	str	r0, [r7, #12]
 80066fc:	60b9      	str	r1, [r7, #8]
 80066fe:	607a      	str	r2, [r7, #4]
 8006700:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800670e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	021a      	lsls	r2, r3, #8
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	431a      	orrs	r2, r3
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	4313      	orrs	r3, r2
 800671c:	697a      	ldr	r2, [r7, #20]
 800671e:	4313      	orrs	r3, r2
 8006720:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	697a      	ldr	r2, [r7, #20]
 8006726:	609a      	str	r2, [r3, #8]
}
 8006728:	bf00      	nop
 800672a:	371c      	adds	r7, #28
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr

08006734 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006734:	b480      	push	{r7}
 8006736:	b087      	sub	sp, #28
 8006738:	af00      	add	r7, sp, #0
 800673a:	60f8      	str	r0, [r7, #12]
 800673c:	60b9      	str	r1, [r7, #8]
 800673e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	f003 031f 	and.w	r3, r3, #31
 8006746:	2201      	movs	r2, #1
 8006748:	fa02 f303 	lsl.w	r3, r2, r3
 800674c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	6a1a      	ldr	r2, [r3, #32]
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	43db      	mvns	r3, r3
 8006756:	401a      	ands	r2, r3
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	6a1a      	ldr	r2, [r3, #32]
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	f003 031f 	and.w	r3, r3, #31
 8006766:	6879      	ldr	r1, [r7, #4]
 8006768:	fa01 f303 	lsl.w	r3, r1, r3
 800676c:	431a      	orrs	r2, r3
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	621a      	str	r2, [r3, #32]
}
 8006772:	bf00      	nop
 8006774:	371c      	adds	r7, #28
 8006776:	46bd      	mov	sp, r7
 8006778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677c:	4770      	bx	lr
	...

08006780 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006780:	b480      	push	{r7}
 8006782:	b085      	sub	sp, #20
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
 8006788:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006790:	2b01      	cmp	r3, #1
 8006792:	d101      	bne.n	8006798 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006794:	2302      	movs	r3, #2
 8006796:	e04f      	b.n	8006838 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2201      	movs	r2, #1
 800679c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2202      	movs	r2, #2
 80067a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	689b      	ldr	r3, [r3, #8]
 80067b6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a21      	ldr	r2, [pc, #132]	; (8006844 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d108      	bne.n	80067d4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80067c8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	68fa      	ldr	r2, [r7, #12]
 80067d0:	4313      	orrs	r3, r2
 80067d2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	68fa      	ldr	r2, [r7, #12]
 80067e2:	4313      	orrs	r3, r2
 80067e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	68fa      	ldr	r2, [r7, #12]
 80067ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a14      	ldr	r2, [pc, #80]	; (8006844 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d009      	beq.n	800680c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006800:	d004      	beq.n	800680c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a10      	ldr	r2, [pc, #64]	; (8006848 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d10c      	bne.n	8006826 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006812:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	68ba      	ldr	r2, [r7, #8]
 800681a:	4313      	orrs	r3, r2
 800681c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	68ba      	ldr	r2, [r7, #8]
 8006824:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2201      	movs	r2, #1
 800682a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2200      	movs	r2, #0
 8006832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006836:	2300      	movs	r3, #0
}
 8006838:	4618      	mov	r0, r3
 800683a:	3714      	adds	r7, #20
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr
 8006844:	40012c00 	.word	0x40012c00
 8006848:	40014000 	.word	0x40014000

0800684c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800684c:	b480      	push	{r7}
 800684e:	b085      	sub	sp, #20
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006856:	2300      	movs	r3, #0
 8006858:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006860:	2b01      	cmp	r3, #1
 8006862:	d101      	bne.n	8006868 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006864:	2302      	movs	r3, #2
 8006866:	e060      	b.n	800692a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2201      	movs	r2, #1
 800686c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	68db      	ldr	r3, [r3, #12]
 800687a:	4313      	orrs	r3, r2
 800687c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	689b      	ldr	r3, [r3, #8]
 8006888:	4313      	orrs	r3, r2
 800688a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	4313      	orrs	r3, r2
 8006898:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4313      	orrs	r3, r2
 80068a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	691b      	ldr	r3, [r3, #16]
 80068b2:	4313      	orrs	r3, r2
 80068b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	695b      	ldr	r3, [r3, #20]
 80068c0:	4313      	orrs	r3, r2
 80068c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ce:	4313      	orrs	r3, r2
 80068d0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	699b      	ldr	r3, [r3, #24]
 80068dc:	041b      	lsls	r3, r3, #16
 80068de:	4313      	orrs	r3, r2
 80068e0:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a14      	ldr	r2, [pc, #80]	; (8006938 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d115      	bne.n	8006918 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f6:	051b      	lsls	r3, r3, #20
 80068f8:	4313      	orrs	r3, r2
 80068fa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	69db      	ldr	r3, [r3, #28]
 8006906:	4313      	orrs	r3, r2
 8006908:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	6a1b      	ldr	r3, [r3, #32]
 8006914:	4313      	orrs	r3, r2
 8006916:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	68fa      	ldr	r2, [r7, #12]
 800691e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2200      	movs	r2, #0
 8006924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006928:	2300      	movs	r3, #0
}
 800692a:	4618      	mov	r0, r3
 800692c:	3714      	adds	r7, #20
 800692e:	46bd      	mov	sp, r7
 8006930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006934:	4770      	bx	lr
 8006936:	bf00      	nop
 8006938:	40012c00 	.word	0x40012c00

0800693c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800693c:	b480      	push	{r7}
 800693e:	b083      	sub	sp, #12
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006944:	bf00      	nop
 8006946:	370c      	adds	r7, #12
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr

08006950 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006950:	b480      	push	{r7}
 8006952:	b083      	sub	sp, #12
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006958:	bf00      	nop
 800695a:	370c      	adds	r7, #12
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr

08006964 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006964:	b480      	push	{r7}
 8006966:	b083      	sub	sp, #12
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800696c:	bf00      	nop
 800696e:	370c      	adds	r7, #12
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr

08006978 <__libc_init_array>:
 8006978:	b570      	push	{r4, r5, r6, lr}
 800697a:	4d0d      	ldr	r5, [pc, #52]	; (80069b0 <__libc_init_array+0x38>)
 800697c:	4c0d      	ldr	r4, [pc, #52]	; (80069b4 <__libc_init_array+0x3c>)
 800697e:	1b64      	subs	r4, r4, r5
 8006980:	10a4      	asrs	r4, r4, #2
 8006982:	2600      	movs	r6, #0
 8006984:	42a6      	cmp	r6, r4
 8006986:	d109      	bne.n	800699c <__libc_init_array+0x24>
 8006988:	4d0b      	ldr	r5, [pc, #44]	; (80069b8 <__libc_init_array+0x40>)
 800698a:	4c0c      	ldr	r4, [pc, #48]	; (80069bc <__libc_init_array+0x44>)
 800698c:	f000 f820 	bl	80069d0 <_init>
 8006990:	1b64      	subs	r4, r4, r5
 8006992:	10a4      	asrs	r4, r4, #2
 8006994:	2600      	movs	r6, #0
 8006996:	42a6      	cmp	r6, r4
 8006998:	d105      	bne.n	80069a6 <__libc_init_array+0x2e>
 800699a:	bd70      	pop	{r4, r5, r6, pc}
 800699c:	f855 3b04 	ldr.w	r3, [r5], #4
 80069a0:	4798      	blx	r3
 80069a2:	3601      	adds	r6, #1
 80069a4:	e7ee      	b.n	8006984 <__libc_init_array+0xc>
 80069a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80069aa:	4798      	blx	r3
 80069ac:	3601      	adds	r6, #1
 80069ae:	e7f2      	b.n	8006996 <__libc_init_array+0x1e>
 80069b0:	08006a28 	.word	0x08006a28
 80069b4:	08006a28 	.word	0x08006a28
 80069b8:	08006a28 	.word	0x08006a28
 80069bc:	08006a2c 	.word	0x08006a2c

080069c0 <memset>:
 80069c0:	4402      	add	r2, r0
 80069c2:	4603      	mov	r3, r0
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d100      	bne.n	80069ca <memset+0xa>
 80069c8:	4770      	bx	lr
 80069ca:	f803 1b01 	strb.w	r1, [r3], #1
 80069ce:	e7f9      	b.n	80069c4 <memset+0x4>

080069d0 <_init>:
 80069d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069d2:	bf00      	nop
 80069d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069d6:	bc08      	pop	{r3}
 80069d8:	469e      	mov	lr, r3
 80069da:	4770      	bx	lr

080069dc <_fini>:
 80069dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069de:	bf00      	nop
 80069e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069e2:	bc08      	pop	{r3}
 80069e4:	469e      	mov	lr, r3
 80069e6:	4770      	bx	lr
